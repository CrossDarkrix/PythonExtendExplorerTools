# -*- coding: utf-8 -*-

import ast
import concurrent.futures
import datetime
import json
import locale
from mutagen.easyid3 import EasyID3
import mutagen.id3
import mutagen.flac
import mutagen.mp3
import mutagen.mp4
import numpy
import os
import pathlib
import py7zr
import platform
import re
import shutil
import send2trash
import sys
import tarfile
import time
import threading
import psutil
import zipfile
import pyqtgraph
from PySide6.QtCore import (QCoreApplication, QByteArray, QMetaObject, QRect, Qt, Signal, QSize, QFile, QEvent, QFileInfo, QTimer, QLocale, QThread, QDate)
from PySide6.QtGui import (QAction, QFont, QStandardItem, QStandardItemModel, QDesktopServices, QCursor, QPixmap, QPixmapCache, QIcon, QImage, QGuiApplication, QColor)
from PySide6.QtWidgets import (QApplication, QCheckBox, QLabel, QListView, QLineEdit, QMainWindow, QPlainTextEdit, QPushButton, QTabWidget, QTreeView, QWidget, QFileSystemModel, QMenu, QAbstractItemView, QDialog, QDialogButtonBox, QFileIconProvider, QGridLayout, QScrollArea, QCalendarWidget, QMenuBar)
from PySide6.QtCharts import (QChart, QChartView, QPieSeries, QPieSlice)

BackupNowPath = [u'']
PathListory = [u'']
SelectedItemPath = [u'']
CopiedItems = [u'']
CopiedItemCount = [0]
SortedNumbar = [u'']
SelectedItem = [u'0']
QLinePath = [u'']
PathHistorys = []
PathHistorys2 = [u'']
CheckPaths = [u'0']
StopPath = [u'0']
StopPath2 = [u'0']
NowRootDirectoryPath = [u'']
BackupRootPath = [os.path.expanduser(u'~')]
OneChecked = [u'1']
OneChecked2 = [u'0']
OneChecked3 = [u'0']
BackPageIndex = [1]
EditFilePath = []
EditMediaPath_FLAC = []
EditMediaPath_M4A = []
EditMediaPath_MP3 = []
DropedCoverImage = [u'']
DropedCheck = [u'0']

try:
	locale.setlocale(locale.LC_CTYPE, u'Japanese_Japan.932')
except:
	locale.setlocale(locale.LC_TIME, u'ja_JP.UTF-8')
LoadThread = concurrent.futures.ThreadPoolExecutor(os.cpu_count() * 9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999 * 9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999)
OutOfThread0 = QThread()

class Credit(QDialog):
	def __init__(self, parent=None):
		super(Credit, self).__init__(parent)
		self.setWindowIcon(QIcon(QPixmap(QSize(512, 512)).fromImage(QImage.fromData(QByteArray.fromBase64(
			b'')))))
		self.setWindowTitle('ライセンスについて')
		self.setFixedSize(250, 350)
		self.setStyleSheet('QDialog{background: #2d2d2d;color: #ededed;}')
		self.Fonts = QFont()
		self.Fonts.setPixelSize(13)
		self.setFont(self.Fonts)
		self.py7zr = QLabel()
		self.py7zr.setFont(self.Fonts)
		self.py7zr.setText('\t\t\t\t[Py7zr]')
		self.py7zr.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
		self.py7zr_c = QLabel()
		self.py7zr_c.setFont(self.Fonts)
		self.py7zr_c.setText('\t\t・Copyright (C) 2019-2022 Hiroshi Miura\n\n\t\t・pylzma Copyright (c) 2004-2015 by Joachim Bauch\n\n\t\t・7-Zip Copyright (C) 1999-2010 Igor Pavlov\n\n\t\t・LZMA SDK Copyright (C) 1999-2010 Igor Pavlov\n')
		self.py7zr_c.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
		self.Send2Trash = QLabel()
		self.Send2Trash.setFont(self.Fonts)
		self.Send2Trash.setText('\t\t\t\t[Send2Trash]')
		self.Send2Trash.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
		self.Send2Trash_c = QLabel()
		self.Send2Trash_c.setFont(self.Fonts)
		self.Send2Trash_c.setText('\t\t・Copyright (c) 2017, Virgil Dupras')
		self.Send2Trash_c.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
		self.PSUtil = QLabel()
		self.PSUtil.setText('\t\t\t\t[psutil]')
		self.PSUtil.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
		self.PSUtil.setFont(self.Fonts)
		self.PSUtil_c = QLabel()
		self.PSUtil_c.setFont(self.Fonts)
		self.PSUtil_c.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
		self.PSUtil_c.setText("\t\t・Copyright (c) 2009, Jay Loden, Dave Daeschler, Giampaolo Rodola")
		self.OkButton = QDialogButtonBox(QDialogButtonBox.Ok, Qt.Horizontal, self)
		self.OkButton.accepted.connect(self.accept)
		self.OkButton.setStyleSheet('QDialogButtonBox{background: #2d2d2d;color: #ededed;} QPushButton{background: #2d2d2d;color: #ededed;}')
		self.CreditLayout = QGridLayout()
		self.CreditLayout.addWidget(self.py7zr, 0, 0, Qt.AlignLeft)
		self.CreditLayout.addWidget(self.py7zr_c, 1, 0, Qt.AlignLeft)
		self.CreditLayout.addWidget(self.Send2Trash, 2, 0, Qt.AlignLeft)
		self.CreditLayout.addWidget(self.Send2Trash_c, 3, 0, Qt.AlignLeft)
		self.CreditLayout.addWidget(self.PSUtil, 4, 0, Qt.AlignLeft)
		self.CreditLayout.addWidget(self.PSUtil_c, 5, 0, Qt.AlignLeft)
		self.CreditLayout.addWidget(self.OkButton, 7, 2, Qt.AlignLeft)
		for col in range(self.CreditLayout.columnCount()):
			self.CreditLayout.setColumnMinimumWidth(col, 10)
		self.setMinimumWidth(660)
		self.setMaximumWidth(700)
		self.CreditLayout.setAlignment(Qt.AlignCenter)
		self.setLayout(self.CreditLayout)

	@staticmethod
	def ShowResult():
		r = Credit()
		r.exec()
		if r.result() == QDialog.Accepted:
			pass

class SystemInfoWidget(QWidget): # System情報パネル
	def __init__(self, parent=None):
		super(SystemInfoWidget, self).__init__(parent)
		self.cpu = QLabel()
		self.cpu.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
		self.cpu.setMinimumWidth(350)
		self.cpuLabel = QLabel()
		self.cpuLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
		self.cpuLabel.setText('CPU使用率: ')
		self.cpuLabel.setAlignment(Qt.AlignLeft)
		self.diskExplainLabel = QLabel()
		self.diskExplainLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
		self.diskExplainLabel.setText('ディスク使用容量 / 空き容量: ')
		self.diskFree = QLabel()
		self.diskFree.setMinimumWidth(350)
		self.diskFree.setAlignment(Qt.AlignLeft)
		self.diskFree.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
		self.diskUsed = QLabel()
		self.diskUsed.setMinimumWidth(350)
		self.diskUsed.setAlignment(Qt.AlignLeft)
		self.diskUsed.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
		self.diskUsedCapacity = QLabel()
		self.diskUsedCapacity.setMinimumWidth(350)
		self.diskUsedCapacity.setAlignment(Qt.AlignLeft)
		self.diskUsedCapacity.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
		self.diskUsedCapacityLabel = QLabel()
		self.diskUsedCapacityLabel.setAlignment(Qt.AlignLeft)
		self.diskUsedCapacityLabel.setMinimumWidth(160)
		self.diskUsedCapacityLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
		self.diskUsedCapacityLabel.setText('ディスク使用量: ')
		self.diskUsedCapacityLabel.setAlignment(Qt.AlignLeft)
		self.diskframe = QLabel()
		self.diskframe.setAlignment(Qt.AlignCenter)
		self.diskframe.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
		self.diskframe.setMaximumHeight(1)
		self.diskframe.setMinimumWidth(600)
		self.frame0 = QLabel()
		self.frame0.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
		self.frame0.setMaximumHeight(1)
		self.frame0.setMinimumWidth(550)
		self.frame1 = QLabel()
		self.frame1.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
		self.frame1.setMaximumHeight(1)
		self.frame1.setMinimumWidth(550)
		self.frame2 = QLabel()
		self.frame2.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
		self.frame2.setMaximumHeight(1)
		self.frame2.setMinimumWidth(550)
		self.frame3 = QLabel()
		self.frame3.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
		self.frame3.setMaximumHeight(1)
		self.frame3.setMinimumWidth(550)
		self.frame4 = QLabel()
		self.frame4.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
		self.frame4.setMaximumHeight(1)
		self.frame4.setMinimumWidth(550)
		self.memoryExplainLabel = QLabel()
		self.memoryExplainLabel.setAlignment(Qt.AlignLeft)
		self.memoryExplainLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
		self.memoryExplainLabel.setText('メモリー使用率 / 空き容量: ')
		self.memoryExplainLabel.setMinimumWidth(160)
		self.memoryFree = QLabel()
		self.memoryFree.setAlignment(Qt.AlignLeft)
		self.memoryFree.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
		self.memoryFree.setMinimumWidth(350)
		self.memoryUsed = QLabel()
		self.memoryUsed.setAlignment(Qt.AlignLeft)
		self.memoryUsed.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
		self.memoryUsed.setMinimumWidth(350)
		self.memoryUsedCapacityPercent = QLabel()
		self.memoryUsedCapacityPercent.setMinimumWidth(350)
		self.memoryUsedCapacityPercent.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
		self.memoryUsedCapacityPercentLabel = QLabel()
		self.memoryUsedCapacityPercentLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
		self.memoryUsedCapacityPercentLabel.setAlignment(Qt.AlignLeft)
		self.memoryUsedCapacityPercentLabel.setText('物理メモリー使用率: ')
		self.network = QLabel()
		self.network.setAlignment(Qt.AlignLeft)
		self.network.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
		self.network.setMinimumWidth(350)
		self.networkLabel = QLabel()
		self.networkLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
		self.networkLabel.setText('ネットワーク使用率: ')
		self.networkLabel.setAlignment(Qt.AlignLeft)
		self.virtualMemoryFree = QLabel()
		self.virtualMemoryFree.setAlignment(Qt.AlignLeft)
		self.virtualMemoryFree.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
		self.virtualMemoryFree.setMinimumWidth(450)
		self.virtualMemoryUsed = QLabel()
		self.virtualMemoryUsed.setMinimumWidth(450)
		self.virtualMemoryUsed.setAlignment(Qt.AlignLeft)
		self.virtualMemoryUsed.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
		self.virtualMemoryUsedCapacity = QLabel()
		self.virtualMemoryUsedCapacity.setMinimumWidth(350)
		self.virtualMemoryUsedCapacity.setAlignment(Qt.AlignLeft)
		self.virtualMemoryUsedCapacity.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
		self.virtualMemoryUsedCapacityLabel = QLabel()
		self.virtualMemoryUsedCapacityLabel.setAlignment(Qt.AlignLeft)
		self.virtualMemoryUsedCapacityLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
		self.virtualMemoryUsedCapacityLabel.setText('仮想メモリー使用率: ')
		self.virtualmemoryExplainLabel = QLabel()
		self.virtualmemoryExplainLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
		self.virtualmemoryExplainLabel.setText('仮想メモリー使用量 / 空き容量: ')
		threading.Thread(target=self.CPUMontor, daemon=True).start()
		threading.Thread(target=self.MemoryMonitor, daemon=True).start()
		threading.Thread(target=self.WiFiSpeedRate, daemon=True).start()
		threading.Thread(target=self.UsedMemory, daemon=True).start()
		threading.Thread(target=self.FreeMemory, daemon=True).start()
		threading.Thread(target=self.SwapMemoryUsedPercent, daemon=True).start()
		threading.Thread(target=self.SwapUsed, daemon=True).start()
		threading.Thread(target=self.SwapFree, daemon=True).start()
		threading.Thread(target=self.DiskUsedPercent, daemon=True).start()
		threading.Thread(target=self.DiskUsed, daemon=True).start()
		threading.Thread(target=self.DiskFree, daemon=True).start()
		self.SystemInfoLayout = QGridLayout()
		self.SystemInfoLayout.addWidget(self.frame0, 0, 0)
		self.SystemInfoLayout.addWidget(self.networkLabel, 1, 0, Qt.AlignCenter)
		self.SystemInfoLayout.addWidget(self.network, 1, 1, Qt.AlignCenter)
		self.SystemInfoLayout.addWidget(self.frame1, 2, 0)
		self.SystemInfoLayout.addWidget(self.cpuLabel, 3, 0, Qt.AlignCenter)
		self.SystemInfoLayout.addWidget(self.cpu, 3, 1, Qt.AlignCenter)
		self.SystemInfoLayout.addWidget(self.frame2, 4, 0)
		self.SystemInfoLayout.addWidget(self.memoryUsedCapacityPercentLabel, 5, 0, Qt.AlignCenter)
		self.SystemInfoLayout.addWidget(self.memoryUsedCapacityPercent, 5, 1, Qt.AlignCenter)
		self.SystemInfoLayout.addWidget(self.memoryUsed, 6, 1, Qt.AlignCenter)
		self.SystemInfoLayout.addWidget(self.memoryExplainLabel, 7, 0, Qt.AlignCenter)
		self.SystemInfoLayout.addWidget(self.memoryFree, 8, 1, Qt.AlignCenter)
		self.SystemInfoLayout.addWidget(self.frame3, 9, 0)
		self.SystemInfoLayout.addWidget(self.virtualMemoryUsedCapacityLabel, 10, 0, Qt.AlignCenter)
		self.SystemInfoLayout.addWidget(self.virtualMemoryUsedCapacity, 10, 1, Qt.AlignCenter)
		self.SystemInfoLayout.addWidget(self.virtualMemoryUsed, 11, 1, Qt.AlignCenter)
		self.SystemInfoLayout.addWidget(self.virtualmemoryExplainLabel, 12, 0, Qt.AlignCenter)
		self.SystemInfoLayout.addWidget(self.virtualMemoryFree, 13, 1, Qt.AlignCenter)
		self.SystemInfoLayout.addWidget(self.frame4, 14, 0)
		self.SystemInfoLayout.addWidget(self.diskUsedCapacityLabel, 15, 0, Qt.AlignCenter)
		self.SystemInfoLayout.addWidget(self.diskUsedCapacity, 15, 1, Qt.AlignCenter)
		self.SystemInfoLayout.addWidget(self.diskFree, 16, 1, Qt.AlignCenter)
		self.SystemInfoLayout.addWidget(self.diskExplainLabel, 17, 0, Qt.AlignCenter)
		self.SystemInfoLayout.addWidget(self.diskUsed, 18, 1, Qt.AlignCenter)
		for Col in range(self.SystemInfoLayout.columnCount()):
			self.SystemInfoLayout.setColumnMinimumWidth(Col, 5000)
		self.SystemInfoLayout.setContentsMargins(10, 0, 0, 0)
		self.setLayout(self.SystemInfoLayout)
		self.setMinimumWidth(600)
		self.setMaximumWidth(620)

	def WiFiSpeedRate(self): # 0.8秒毎に更新
		try:
			while True:
				Net_IN1 = psutil.net_io_counters().bytes_recv
				Net_OUT1 = psutil.net_io_counters().bytes_sent
				time.sleep(0.8)
				Net_IN2 = psutil.net_io_counters().bytes_recv
				Net_OUT2 = psutil.net_io_counters().bytes_sent
				NETIN = '{}GB'.format(round((Net_IN2 - Net_IN1) / 1073741824, 1))
				if NETIN[0:2] == '0.':
					NETIN = '{}MB'.format(round((Net_IN2 - Net_IN1) / 1048576, 1))
					if NETIN[0:2] == '0.':
						NETIN = '{}KB'.format(round((Net_IN2 - Net_IN1) / 1024, 1))
						if NETIN[0:2] == '0.':
							NETIN = '{}B'.format((Net_IN2 - Net_IN1))
				NETOUT = '{}GB'.format(round((Net_OUT2 - Net_OUT1) / 1073741824, 1))
				if NETOUT[0:2] == '0.':
					NETOUT = '{}MB'.format(round((Net_OUT2 - Net_OUT1) / 1048576, 1))
					if NETOUT[0:2] == '0.':
						NETOUT = '{}KB'.format(round((Net_OUT2 - Net_OUT1) / 1024, 1))
						if NETOUT[0:2] == '0.':
							NETOUT = '{}B'.format((Net_OUT2 - Net_OUT1))
				self.network.setText('↓{} /s ↑{} /s'.format(NETIN, NETOUT))
		except:
			pass

	def CPUMontor(self): # 0.8秒毎に更新
		try:
			while True:
				self.cpu.setText('{}%'.format(psutil.cpu_percent(interval=0.8)))
		except:
			pass

	def MemoryMonitor(self): # 0.8秒毎に更新
		try:
			while True:
				self.memoryUsedCapacityPercent.setText('{}%'.format(psutil.virtual_memory().percent))
				time.sleep(0.8)
		except:
			pass

	def FreeMemory(self): # 0.8秒毎に更新
		try:
			while True:
				MemoryFree = '{}GB'.format(round(psutil.virtual_memory().available / 1073741824, 1))
				if MemoryFree[0:2] == '0.':
					MemoryFree = '{}MB'.format(round(psutil.virtual_memory().available / 1048576, 1))
					if MemoryFree[0:2] == '0.':
						MemoryFree = '{}KB'.format(round(psutil.virtual_memory().available / 1024, 1))
						if MemoryFree[0:2] == '0.':
							MemoryFree = '{}B'.format(psutil.virtual_memory().available)
				self.memoryFree.setText('空き容量: {}GB 中 約{}'.format(round(psutil.virtual_memory().total / 1073741824, 1), MemoryFree))
				time.sleep(0.8)
		except:
			pass

	def UsedMemory(self): # 0.8秒毎に更新
		try:
			while True:
				useMemory = '{}GB'.format(round(psutil.virtual_memory().used / 1073741824, 1))
				if useMemory[0:2] == '0.':
					useMemory = '{}MB'.format(round(psutil.virtual_memory().used / 1048576, 1))
					if useMemory[0:2] == '0.':
						useMemory = '{}KB'.format(round(psutil.virtual_memory().used / 1024, 1))
						if useMemory[0:2] == '0.':
							useMemory = '{}B'.format(psutil.virtual_memory().used)
				self.memoryUsed.setText('使用容量: {}GB 中 約{}'.format(round(psutil.virtual_memory().total / 1073741824, 1), useMemory))
				time.sleep(0.8)
		except:
			pass

	def SwapMemoryUsedPercent(self): # 0.8秒毎に更新
		try:
			while True:
				self.virtualMemoryUsedCapacity.setText('{}%'.format(psutil.swap_memory().percent))
				time.sleep(0.8)
		except:
			pass

	def SwapUsed(self): # 0.8秒毎に更新
		try:
			while True:
				Swpused = '{}GB'.format(round(psutil.swap_memory().used / 1073741824, 1))
				if Swpused[0:2] == '0.':
					Swpused = '{}MB'.format(round(psutil.swap_memory().used / 1048576, 1))
					if Swpused[0:2] == '0.':
						Swpused = '{}KB'.format(round(psutil.swap_memory().used / 1024, 1))
						if Swpused[0:2] == '0.':
							Swpused = '{}B'.format(psutil.swap_memory().used)
				self.virtualMemoryUsed.setText('使用容量: {}GB 中 約{}'.format(round(psutil.swap_memory().total / 1073741824, 1), Swpused))
				time.sleep(0.8)
		except:
			pass

	def SwapFree(self): # 0.8秒毎に更新
		try:
			while True:
				SwpFree = '{}GB'.format(round(psutil.swap_memory().free / 1073741824, 1))
				if SwpFree[0:2] == '0.':
					SwpFree = '{}MB'.format(round(psutil.swap_memory().free / 1048576, 1))
					if SwpFree[0:2] == '0.':
						SwpFree = '{}KB'.format(round(psutil.swap_memory().free / 1024, 1))
						if SwpFree[0:2] == '0.':
							SwpFree = '{}B'.format(psutil.swap_memory().free)
				self.virtualMemoryFree.setText('空き容量: {}GB 中 約{}'.format(round(psutil.swap_memory().total / 1073741824, 1), SwpFree))
				time.sleep(0.8)
		except:
			pass

	def DiskUsedPercent(self): # 0.8秒毎に更新
		try:
			if not os.path.splitdrive(os.environ['windir'])[0] == '':
				mountPath = os.path.splitdrive(os.environ['windir'])[0] + '/'
			else:
				mountPath = '/'
		except KeyError:
			mountPath = '/'
		try:
			while True:
				self.diskUsedCapacity.setText('{}%'.format(psutil.disk_usage(mountPath).percent))
				time.sleep(0.8)
		except:
			pass

	def DiskUsed(self): # 0.8秒毎に更新
		try:
			if not os.path.splitdrive(os.environ['windir'])[0] == '':
				mountPath = os.path.splitdrive(os.environ['windir'])[0] + '/'
			else:
				mountPath = '/'
		except KeyError:
			mountPath = '/'
		try:
			TotalDisk = '{}TB'.format(round(psutil.disk_usage(mountPath).total / 1099511627776, 1))
			if TotalDisk[0:2] == '0.':
				TotalDisk = '{}GB'.format(round(psutil.disk_usage(mountPath).total / 1073741824, 1))
				if TotalDisk[0:2] == '0.':
					TotalDisk = '{}MB'.format(round(psutil.disk_usage(mountPath).total / 1048576, 1))
					if TotalDisk[0:2] == '0.':
						TotalDisk = '{}KB'.format(round(psutil.disk_usage(mountPath).total / 1024, 1))
						if TotalDisk[0:2] == '0.':
							TotalDisk = '{}B'.format(psutil.disk_usage(mountPath).total)
			while True:
				diskUseBytes = '{}TB'.format(round(psutil.disk_usage(mountPath).used / 1099511627776, 1))
				if diskUseBytes[0:2] == '0.':
					diskUseBytes = '{}GB'.format(round(psutil.disk_usage(mountPath).used / 1073741824, 1))
					if diskUseBytes[0:2] == '0.':
						diskUseBytes = '{}MB'.format(round(psutil.disk_usage(mountPath).used / 1048576, 1))
						if diskUseBytes[0:2] == '0.':
							diskUseBytes = '{}KB'.format(round(psutil.disk_usage(mountPath).used / 1024, 1))
							if diskUseBytes[0:2] == '0.':
								diskUseBytes = '{}B'.format(psutil.disk_usage(mountPath).used)
				self.diskUsed.setText('使用容量: 約{} 中 約{}'.format(TotalDisk, diskUseBytes))
				time.sleep(0.8)
		except:
			pass

	def DiskFree(self): # 0.8秒毎に更新
		try:
			if not os.path.splitdrive(os.environ['windir'])[0] == '':
				mountPath = os.path.splitdrive(os.environ['windir'])[0] + '/'
			else:
				mountPath = '/'
		except KeyError:
			mountPath = '/'
		try:
			TotalDisk = '{}TB'.format(round(psutil.disk_usage(mountPath).total / 1099511627776, 1))
			if TotalDisk[0:2] == '0.':
				TotalDisk = '{}GB'.format(round(psutil.disk_usage(mountPath).total / 1073741824, 1))
				if TotalDisk[0:2] == '0.':
					TotalDisk = '{}MB'.format(round(psutil.disk_usage(mountPath).total / 1048576, 1))
					if TotalDisk[0:2] == '0.':
						TotalDisk = '{}KB'.format(round(psutil.disk_usage(mountPath).total / 1024, 1))
						if TotalDisk[0:2] == '0.':
							TotalDisk = '{}B'.format(psutil.disk_usage(mountPath).total)
			while True:
				diskFreeBytes = '{}TB'.format(round(psutil.disk_usage(mountPath).free / 1099511627776, 1))
				if diskFreeBytes[0:2] == '0.':
					diskFreeBytes = '{}GB'.format(round(psutil.disk_usage(mountPath).free / 1073741824, 1))
					if diskFreeBytes[0:2] == '0.':
						diskFreeBytes = '{}MB'.format(round(psutil.disk_usage(mountPath).free / 1048576, 1))
						if diskFreeBytes[0:2] == '0.':
							diskFreeBytes = '{}KB'.format(round(psutil.disk_usage(mountPath).free / 1024, 1))
							if diskFreeBytes[0:2] == '0.':
								diskFreeBytes = '{}KB'.format(psutil.disk_usage(mountPath).free)
				self.diskFree.setText('空き容量: 約{} 中 約{}'.format(TotalDisk, diskFreeBytes))
				time.sleep(0.8)
		except:
			pass

class DiskPieWidget(QWidget): # ディスクの使用状況
	def __init__(self):
		super(DiskPieWidget, self).__init__()
		OutOfThread0.started.connect(self.updateSet)
		self.setStyleSheet('QWidget{background: #292828;color: #ededed;border: 0px #292828;}')
		self.setGraph()

	def updateSet(self):
		self.DataUpdate = QTimer()
		self.DataUpdate.timeout.connect(self.setGraph)
		self.DataUpdate.start(5000)

	def setGraph(self):
		DiskWidgets = []
		for idx, devices in enumerate(sorted(psutil.disk_partitions())):
			try:
				DevceName = devices.device
				MountPosition = devices.mountpoint
				devInfo = psutil.disk_usage(MountPosition)
				UsedRegion = round(devInfo.used / devInfo.total * 100)
				FreeRegion = round(devInfo.free / devInfo.total * 100)
				DeviceSerises = QPieSeries()
				DeviceSerises.clear()
				DeviceSerises.append('使用領域', UsedRegion)
				DeviceSerises.append('空き領域', FreeRegion)
				DeviceSerises.setHorizontalPosition(0.4999)
				DeviceSerises.setVerticalPosition(0.62)
				DeviceSerises.setPieSize(0.5)
				DeviceRegionLabelFont = QFont()
				DeviceRegionLabelFont.setPixelSize(8)
				DeviceSerises.slices()[0].setLabelFont(DeviceRegionLabelFont)
				DeviceSerises.slices()[0].setLabelBrush(QColor(237, 237, 237))
				DeviceSerises.slices()[0].setBrush(QColor(233, 88, 88))
				DeviceSerises.slices()[0].setLabel('使用領域 ({}%)'.format(round(100 * DeviceSerises.slices()[0].percentage())))
				DeviceSerises.slices()[0].setLabelPosition(QPieSlice.LabelInsideHorizontal)
				DeviceSerises.slices()[1].setLabelFont(DeviceRegionLabelFont)
				DeviceSerises.slices()[1].setLabelBrush(QColor(237, 237, 237))
				DeviceSerises.slices()[1].setBrush(QColor(39, 128, 219))
				DeviceSerises.slices()[1].setLabel('空き領域 ({}%)'.format(round(100 * DeviceSerises.slices()[1].percentage())))
				DeviceChart = QChart()
				DeviceChart.setBackgroundBrush(QColor(41, 40, 40))
				DeviceChart.addSeries(DeviceSerises)
				DeviceChart.setFont(DeviceRegionLabelFont)
				DeviceChart.legend().setVisible(True)
				DeviceChart.legend().setAlignment(Qt.AlignBottom)
				DeviceChart.legend().setLabelBrush(QColor(237, 237, 237))
				DeviceChart.setMaximumSize(300, 100)
				DeviceChart.setContentsMargins(-200, -58, -215, -38)
				DeviceChartView = QChartView(DeviceChart)
				DeviceChartView.setObjectName('DiskChart_{}'.format(idx))
				DeviceChartView.setStyleSheet('QChartView#DiskChart_%s{background: #292828;}' % str(idx))
				DeviceChartView.setFont(DeviceRegionLabelFont)
				DeviceChartView.setMaximumWidth(600)
				DeviceChartView.setMaximumHeight(500)
				DeviceChartView.setContentsMargins(0, 0, 20, 0)
				DeviceChartView.setAlignment(Qt.AlignCenter)
				DeviceChart.setBackgroundRoundness(0)
				DiskWidgets.append([DeviceChartView, DevceName])
			except:
				pass
		self.DiskWdget = QGridLayout()
		self.colmunsCount = [_c for _c in range(len(DiskWidgets))]
		self.delmiterColmun = []
		DmiterCount0 = []
		DmiterCount1 = []
		for ix in range(0, len(self.colmunsCount), 2):
			try:
				self.delmiterColmun.append(self.colmunsCount[ix:ix + 2])
			except:
				continue
		for d0 in self.delmiterColmun:
			try:
				DmiterCount0.append(d0[1])
			except:
				continue
		for d1 in self.delmiterColmun:
			try:
				DmiterCount1.append(d1[0])
			except:
				continue
		row = 0
		col = 0
		for idx, DeviceWidget in enumerate(DiskWidgets):
			if idx in DmiterCount1:
				row = 0
				col = idx + 1
			elif idx in DmiterCount0:
				row = 1
				col = idx
			self.DiskWdget.addWidget(DeviceWidget[0], row, col, Qt.AlignLeft)
			self.DiskWdget.setContentsMargins(0, 0, 10, 0)
			self.DiskLabelList = QListView()
			self.DiskLabelList.setStyleSheet('QListView{background: #292828;color: #ededed;border: 0px #292828;}')
			self.DiskLabel0 = QLabel()
			self.DiskLabel0.setPixmap(QFileIconProvider().icon(QFileIconProvider.Drive).pixmap(QSize(32, 32)))
			self.DiskLabel0.setStyleSheet('QLabel{background: #292828;color: #ededed;}')
			self.DiskLabel0.setAlignment(Qt.AlignLeft)
			self.DiskLabel1Font = QFont()
			self.DiskLabel1Font.setPixelSize(25)
			self.DiskLabel1 = QLabel()
			self.DiskLabel1.setAlignment(Qt.AlignLeft)
			self.DiskLabel1.setText(DeviceWidget[1])
			self.DiskLabel1.setStyleSheet('QLabel{background: #292828;color: #ededed;}')
			self.DiskLabel1.setFont(self.DiskLabel1Font)
			self.DiskSpaceFont = QFont()
			self.DiskSpaceFont.setPixelSize(1)
			self.DiskSpace = QLabel()
			self.DiskSpace.setAlignment(Qt.AlignLeft)
			self.DiskSpace.setText(' ')
			self.DiskSpace.setStyleSheet('QLabel{background: #292828;color: #ededed;}')
			self.DiskSpace.setFont(self.DiskLabel1Font)
			self.DiskLabelSubWidget = QGridLayout()
			self.DiskLabelSubWidget.addWidget(self.DiskLabel1, 0, 3, Qt.AlignLeft)
			self.DiskLabelSubWidget.addWidget(self.DiskLabel0, 0, 1, Qt.AlignLeft)
			self.DiskLabelSubWidget.addWidget(self.DiskSpace, 0, 2, Qt.AlignLeft)
			self.DiskLabelList.setIconSize(QSize(25, 25))
			self.DiskLabelList.setLayout(self.DiskLabelSubWidget)
			self.DiskLabelList.setMaximumWidth(247)
			self.DiskLabelList.setMinimumHeight(10)
			self.DiskWdget.addWidget(self.DiskLabelList, row + 1, col, Qt.AlignLeft)
			col = col + idx
		self.setLayout(self.DiskWdget)

class EditMusicTagDailog(QDialog): # 音楽ファイルだった時に出すプロパティ
	def __init__(self, SelectedFilePath):
		super(EditMusicTagDailog, self).__init__()
		self.FilePathList = SelectedFilePath
		self.setWindowTitle('ファイルの詳細')
		self.setFixedSize(530, 680)
		DropedCheck[0] = '0'
		self.FilesCount = 0
		self.FoldersCount = 0
		self.Files = []
		self.OtherFiles = []
		self.Folders = []
		EditMediaPath_FLAC[0:] = []
		EditMediaPath_M4A[0:] = []
		EditMediaPath_MP3[0:] = []
		self.setStyleSheet('QDialog{background: #2d2d2d;color: #ededed;}')
		self.FilePropertyTab = QTabWidget(self)
		self.FilePropertyTab.setFixedSize(490, 615)
		self.FilePropertyTab.setStyleSheet('QWidget{background: #2d2d2d;color: #ededed;} QTabBar::tab{background: #2d2d2d;color: White;border: 1px solid #1a1a1a;border-color: #1a1a1a;} QTabWidget::pane{background: #2d2d2d;color: #ededed;} QTabWidget::tab{border: 0px solid #1a1a1a;border-color: #1a1a1a;background: #2d2d2d;#ededed;}')
		if len(self.FilePathList) == 1:
			self.OhterMultipleFileCheck = False
			self.MultipleFileCheck = True
			self.GeneralTab = QWidget()
			self.PreviewIcon = QLabel(self.GeneralTab)
			self.PreviewIcon.setGeometry(QRect(35, 0, 70, 70))
			self.PreviewIcon.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
			self.FileName = QLineEdit(self.GeneralTab)
			self.FileName.setGeometry(QRect(160, 20, 310, 30))
			self.FileName.setStyleSheet('QLineEdit{background: #2d2d2d;color: #ededed;border 0px;}')
			self.BorderFrame1 = QLabel(self.GeneralTab)
			self.BorderFrame1.setGeometry(QRect(20, 85, 450, 1))
			self.BorderFrame1.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
			self.FileTypeLabel = QLabel('ファイルの種類:', self.GeneralTab)
			self.FileTypeLabel.setGeometry(QRect(20, 115, 110, 30))
			self.FileTypeLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
			self.FileType = QLabel(self.GeneralTab)
			self.FileType.setGeometry(QRect(160, 115, 310, 30))
			self.FileType.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
			self.BorderFrame2 = QLabel(self.GeneralTab)
			self.BorderFrame2.setGeometry(QRect(20, 175, 450, 1))
			self.BorderFrame2.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
			self.FilePathLabel = QLabel('場所:', self.GeneralTab)
			self.FilePathLabel.setGeometry(QRect(20, 205, 50, 30)) # label only x 30, y50ずつ
			self.FilePathLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
			self.FilePath = QLabel(self.GeneralTab)
			self.FilePath.setGeometry(QRect(160, 205, 350, 30))
			self.FilePath.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
			self.FileSizeLabel = QLabel('サイズ:', self.GeneralTab)
			self.FileSizeLabel.setGeometry(QRect(20, 260, 60, 30))
			self.FileSizeLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
			self.FileSize = QLabel(self.GeneralTab)
			self.FileSize.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
			self.FileSize.setGeometry(QRect(160, 260, 350, 30))
			self.BorderFrame3 = QLabel(self.GeneralTab)
			self.BorderFrame3.setGeometry(QRect(20, 325, 450, 1))
			self.BorderFrame3.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
			self.FileCreateDaylabel = QLabel('作成日時:', self.GeneralTab)
			self.FileCreateDaylabel.setGeometry(QRect(20, 360, 70, 30))
			self.FileCreateDaylabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
			self.FileCreateDay = QLabel(self.GeneralTab)
			self.FileCreateDay.setGeometry(QRect(160, 360, 350, 30))
			self.FileCreateDay.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
			self.FileModifiedLabel = QLabel('更新日時:', self.GeneralTab)
			self.FileModifiedLabel.setGeometry(QRect(20, 425, 70, 30))
			self.FileModifiedLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
			self.FileModifiedTime = QLabel(self.GeneralTab)
			self.FileModifiedTime.setGeometry(QRect(160, 425, 350, 30))
			self.FileModifiedTime.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
			self.LastAccessLabel = QLabel('アクセス日時:', self.GeneralTab)
			self.LastAccessLabel.setGeometry(QRect(20, 490, 100, 30))
			self.LastAccessLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
			self.LastAccessTime = QLabel(self.GeneralTab)
			self.LastAccessTime.setGeometry(QRect(160, 490, 350, 30))
			self.LastAccessTime.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
			self.BorderFrame4 = QLabel(self.GeneralTab)
			self.BorderFrame4.setGeometry(QRect(20, 560, 450, 1))
			self.BorderFrame4.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
			self.FilePropertyTab.addTab(self.GeneralTab, '')
			if self.FilePathList[0].lower().endswith(('.flac', '.m4a', '.mp3')):
				self.OhterMultipleFileCheck = False
				self.MultipleFileCheck = True
				self.DetailInfoTab = QWidget()
				self.TrackNameLabel = QLabel('タイトル', self.DetailInfoTab)
				self.TrackNameLabel.setGeometry(QRect(20, 10, 80, 30))
				self.TrackNameLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.TrackName = QLineEdit(self.DetailInfoTab)
				self.TrackName.setGeometry(QRect(190, 10, 280, 30))
				self.TrackName.setStyleSheet('QLineEdit{background: #2d2d2d;color: #ededed;border 0px;}')
				self.TrackArtistLabel = QLabel('アーティスト', self.DetailInfoTab)
				self.TrackArtistLabel.setGeometry(QRect(20, 65, 110, 30))
				self.TrackArtistLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.TrackArtist = QLineEdit(self.DetailInfoTab)
				self.TrackArtist.setGeometry(QRect(190, 65, 280, 30))
				self.TrackArtist.setStyleSheet('QLineEdit{background: #2d2d2d;color: #ededed;}')
				self.TrackAlbumArtistLabel = QLabel('アルバムアーティスト', self.DetailInfoTab)
				self.TrackAlbumArtistLabel.setGeometry(QRect(20, 125, 150, 30))
				self.TrackAlbumArtistLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border 0px;}')
				self.TrackAlbumArtist = QLineEdit(self.DetailInfoTab)
				self.TrackAlbumArtist.setGeometry(QRect(190, 125, 280, 30))
				self.TrackAlbumArtist.setStyleSheet('QLineEdit{background: #2d2d2d;color: #ededed;}')
				self.TrackAlbumLabel = QLabel('アルバム名', self.DetailInfoTab)
				self.TrackAlbumLabel.setGeometry(QRect(20, 185, 150, 30))
				self.TrackAlbumLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.TrackAlbum = QLineEdit(self.DetailInfoTab)
				self.TrackAlbum.setGeometry(QRect(190, 185, 280, 30))
				self.TrackAlbum.setStyleSheet('QLineEdit{background: #2d2d2d;color: #ededed;border 0px;}')
				self.TrackGenreLabel = QLabel('ジャンル', self.DetailInfoTab)
				self.TrackGenreLabel.setGeometry(QRect(20, 245, 150, 30))
				self.TrackGenreLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.TrackGenre = QLineEdit(self.DetailInfoTab)
				self.TrackGenre.setGeometry(QRect(190, 245, 280, 30))
				self.TrackGenre.setStyleSheet('QLineEdit{background: #2d2d2d;color: #ededed;border 0px;}')
				self.TrackYearLabel = QLabel('リリース日時', self.DetailInfoTab)
				self.TrackYearLabel.setGeometry(QRect(20, 305, 150, 30))
				self.TrackYearLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.TrackYear = QLineEdit(self.DetailInfoTab)
				self.TrackYear.setGeometry(QRect(190, 305, 280, 30))
				self.TrackYear.setStyleSheet('QLineEdit{background: #2d2d2d;color: #ededed;}')
				self.TrackNumlabel = QLabel('トラック番号', self.DetailInfoTab)
				self.TrackNumlabel.setGeometry(QRect(20, 365, 150, 30))
				self.TrackNumlabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.TrackNum = QLineEdit(self.DetailInfoTab)
				self.TrackNum.setGeometry(QRect(190, 365, 280, 30))
				self.TrackNum.setStyleSheet('QLineEdit{background: #2d2d2d;color: #ededed;border 0px;}')
				self.TrackDiscNumLabel = QLabel('ディスク番号', self.DetailInfoTab)
				self.TrackDiscNumLabel.setGeometry(QRect(20, 425, 150, 30))
				self.TrackDiscNumLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.TrackDiscNum = QLineEdit(self.DetailInfoTab)
				self.TrackDiscNum.setGeometry(QRect(190, 425, 280, 30))
				self.TrackDiscNum.setStyleSheet('QLineEdit{background: #2d2d2d;color: #ededed;border 0px;}')
				self.TrackArtLabel = QLabel('アルバムカバー', self.DetailInfoTab)
				self.TrackArtLabel.setGeometry(QRect(70, 515, 110, 30))
				self.TrackArtLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.TrackArt = EditCoverArtLabel(self.DetailInfoTab)
				self.TrackArt.setGeometry(QRect(280, 480, 100, 100))
				self.TrackArt.setAcceptDrops(True)
				self.FilePropertyTab.addTab(self.DetailInfoTab, '')
				self.FilePropertyTab.setTabText(self.FilePropertyTab.indexOf(self.DetailInfoTab), '詳細')
		elif 2 <= len(self.FilePathList):
			for MediaOnly in self.FilePathList:
				if MediaOnly.lower().endswith('.flac'):
					EditMediaPath_FLAC.append(MediaOnly)
				if MediaOnly.lower().endswith('.m4a'):
					EditMediaPath_M4A.append(MediaOnly)
				if MediaOnly.lower().endswith('.mp3'):
					EditMediaPath_MP3.append(MediaOnly)
				if QFileInfo(MediaOnly).isFile():
					self.Files.append(MediaOnly)
				if QFileInfo(MediaOnly).isDir():
					self.Folders.append(MediaOnly)
				if not MediaOnly.lower().endswith(('.flac', '.m4a', '.mp3')):
					self.OtherFiles.append(MediaOnly)
			self.FilesCount = len(self.Files)
			self.FoldersCount = len(self.Folders)
			if not len(EditMediaPath_FLAC) == 0 and not len(EditMediaPath_M4A) == 0 and not len(EditMediaPath_MP3) == 0 and not len(self.OtherFiles) == 0: # 複数の種類
				self.OhterMultipleFileCheck = True
				self.MultipleFileCheck = False
				self.GeneralTab = QWidget()
				self.PreviewIcon = QLabel(self.GeneralTab)
				self.PreviewIcon.setGeometry(QRect(35, 0, 57, 57))
				self.PreviewIcon.setPixmap(QFileIconProvider().icon(QFileIconProvider.File).pixmap(QSize(57, 57)))
				self.PreviewIcon.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.PreviewIcon2 = QLabel(self.GeneralTab)
				self.PreviewIcon2.setGeometry(QRect(28, 7, 55, 55))
				self.PreviewIcon2.setPixmap(QFileIconProvider().icon(QFileIconProvider.File).pixmap(QSize(55, 55)))
				self.PreviewIcon2.setStyleSheet('QLabel{background: rba(45, 45, 45, 45);color: #ededed;}')
				self.FileName = QLabel(self.GeneralTab)
				self.FileName.setGeometry(QRect(160, 20, 310, 30))
				self.FileName.setText('ファイル数: {}、フォルダー数: {}'.format(self.FilesCount, self.FoldersCount))
				self.FileName.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.BorderFrame1 = QLabel(self.GeneralTab)
				self.BorderFrame1.setGeometry(QRect(20, 85, 450, 1))
				self.BorderFrame1.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
				self.FileTypeLabel = QLabel('種類:', self.GeneralTab)
				self.FileTypeLabel.setGeometry(QRect(20, 115, 80, 30))
				self.FileTypeLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileType = QLabel(self.GeneralTab)
				self.FileType.setText('複数の種類')
				self.FileType.setGeometry(QRect(160, 115, 310, 30))
				self.FileType.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FilePathLabel = QLabel('場所:', self.GeneralTab)
				self.FilePathLabel.setGeometry(QRect(20, 175, 50, 30))  # label only x 30, y50ずつ
				self.FilePathLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FilePath = QLabel(self.GeneralTab)
				self.FilePath.setGeometry(QRect(160, 175, 350, 30))
				self.FilePath.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSizeLabel = QLabel('サイズ:', self.GeneralTab)
				self.FileSizeLabel.setGeometry(QRect(20, 245, 60, 30))
				self.FileSizeLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSize = QLabel(self.GeneralTab)
				self.FileSize.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSize.setGeometry(QRect(160, 245, 350, 30))
				self.BorderFrame3 = QLabel(self.GeneralTab)
				self.BorderFrame3.setGeometry(QRect(20, 325, 450, 1))
				self.BorderFrame3.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
				self.FilePropertyTab.addTab(self.GeneralTab, '')
			elif not len(EditMediaPath_FLAC) == 0 and not len(EditMediaPath_M4A) == 0 and not len(EditMediaPath_MP3) == 0 and not self.FoldersCount == 0 and not len(self.OtherFiles) == 0: # 複数の種類
				self.OhterMultipleFileCheck = True
				self.MultipleFileCheck = False
				self.GeneralTab = QWidget()
				self.PreviewIcon = QLabel(self.GeneralTab)
				self.PreviewIcon.setGeometry(QRect(35, 0, 57, 57))
				self.PreviewIcon.setPixmap(QFileIconProvider().icon(QFileIconProvider.File).pixmap(QSize(57, 57)))
				self.PreviewIcon.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.PreviewIcon2 = QLabel(self.GeneralTab)
				self.PreviewIcon2.setGeometry(QRect(28, 7, 55, 55))
				self.PreviewIcon2.setPixmap(QFileIconProvider().icon(QFileIconProvider.File).pixmap(QSize(55, 55)))
				self.PreviewIcon2.setStyleSheet('QLabel{background: rba(45, 45, 45, 45);color: #ededed;}')
				self.FileName = QLabel(self.GeneralTab)
				self.FileName.setGeometry(QRect(160, 20, 310, 30))
				self.FileName.setText('ファイル数: {}、フォルダー数: {}'.format(self.FilesCount, self.FoldersCount))
				self.FileName.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.BorderFrame1 = QLabel(self.GeneralTab)
				self.BorderFrame1.setGeometry(QRect(20, 85, 450, 1))
				self.BorderFrame1.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
				self.FileTypeLabel = QLabel('種類:', self.GeneralTab)
				self.FileTypeLabel.setGeometry(QRect(20, 115, 80, 30))
				self.FileTypeLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileType = QLabel(self.GeneralTab)
				self.FileType.setText('複数の種類')
				self.FileType.setGeometry(QRect(160, 115, 310, 30))
				self.FileType.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FilePathLabel = QLabel('場所:', self.GeneralTab)
				self.FilePathLabel.setGeometry(QRect(20, 175, 50, 30))  # label only x 30, y50ずつ
				self.FilePathLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FilePath = QLabel(self.GeneralTab)
				self.FilePath.setGeometry(QRect(160, 175, 350, 30))
				self.FilePath.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSizeLabel = QLabel('サイズ:', self.GeneralTab)
				self.FileSizeLabel.setGeometry(QRect(20, 245, 60, 30))
				self.FileSizeLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSize = QLabel(self.GeneralTab)
				self.FileSize.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSize.setGeometry(QRect(160, 245, 350, 30))
				self.BorderFrame3 = QLabel(self.GeneralTab)
				self.BorderFrame3.setGeometry(QRect(20, 325, 450, 1))
				self.BorderFrame3.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
				self.FilePropertyTab.addTab(self.GeneralTab, '')
			elif not len(EditMediaPath_FLAC) == 0 and not len(self.OtherFiles) == 0: # 複数の種類
				self.OhterMultipleFileCheck = True
				self.MultipleFileCheck = False
				self.GeneralTab = QWidget()
				self.PreviewIcon = QLabel(self.GeneralTab)
				self.PreviewIcon.setGeometry(QRect(35, 0, 57, 57))
				self.PreviewIcon.setPixmap(QFileIconProvider().icon(QFileIconProvider.File).pixmap(QSize(57, 57)))
				self.PreviewIcon.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.PreviewIcon2 = QLabel(self.GeneralTab)
				self.PreviewIcon2.setGeometry(QRect(28, 7, 55, 55))
				self.PreviewIcon2.setPixmap(QFileIconProvider().icon(QFileIconProvider.File).pixmap(QSize(55, 55)))
				self.PreviewIcon2.setStyleSheet('QLabel{background: rba(45, 45, 45, 45);color: #ededed;}')
				self.FileName = QLabel(self.GeneralTab)
				self.FileName.setGeometry(QRect(160, 20, 310, 30))
				self.FileName.setText('ファイル数: {}、フォルダー数: {}'.format(self.FilesCount, self.FoldersCount))
				self.FileName.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.BorderFrame1 = QLabel(self.GeneralTab)
				self.BorderFrame1.setGeometry(QRect(20, 85, 450, 1))
				self.BorderFrame1.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
				self.FileTypeLabel = QLabel('種類:', self.GeneralTab)
				self.FileTypeLabel.setGeometry(QRect(20, 115, 80, 30))
				self.FileTypeLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileType = QLabel(self.GeneralTab)
				self.FileType.setText('複数の種類')
				self.FileType.setGeometry(QRect(160, 115, 310, 30))
				self.FileType.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FilePathLabel = QLabel('場所:', self.GeneralTab)
				self.FilePathLabel.setGeometry(QRect(20, 175, 50, 30))  # label only x 30, y50ずつ
				self.FilePathLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FilePath = QLabel(self.GeneralTab)
				self.FilePath.setGeometry(QRect(160, 175, 350, 30))
				self.FilePath.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSizeLabel = QLabel('サイズ:', self.GeneralTab)
				self.FileSizeLabel.setGeometry(QRect(20, 245, 60, 30))
				self.FileSizeLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSize = QLabel(self.GeneralTab)
				self.FileSize.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSize.setGeometry(QRect(160, 245, 350, 30))
				self.BorderFrame3 = QLabel(self.GeneralTab)
				self.BorderFrame3.setGeometry(QRect(20, 325, 450, 1))
				self.BorderFrame3.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
				self.FilePropertyTab.addTab(self.GeneralTab, '')
			elif not len(EditMediaPath_M4A) == 0 and not len(self.OtherFiles) == 0: # 複数の種類
				self.OhterMultipleFileCheck = True
				self.MultipleFileCheck = False
				self.GeneralTab = QWidget()
				self.PreviewIcon = QLabel(self.GeneralTab)
				self.PreviewIcon.setGeometry(QRect(35, 0, 57, 57))
				self.PreviewIcon.setPixmap(QFileIconProvider().icon(QFileIconProvider.File).pixmap(QSize(57, 57)))
				self.PreviewIcon.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.PreviewIcon2 = QLabel(self.GeneralTab)
				self.PreviewIcon2.setGeometry(QRect(28, 7, 55, 55))
				self.PreviewIcon2.setPixmap(QFileIconProvider().icon(QFileIconProvider.File).pixmap(QSize(55, 55)))
				self.PreviewIcon2.setStyleSheet('QLabel{background: rba(45, 45, 45, 45);color: #ededed;}')
				self.FileName = QLabel(self.GeneralTab)
				self.FileName.setGeometry(QRect(160, 20, 310, 30))
				self.FileName.setText('ファイル数: {}、フォルダー数: {}'.format(self.FilesCount, self.FoldersCount))
				self.FileName.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.BorderFrame1 = QLabel(self.GeneralTab)
				self.BorderFrame1.setGeometry(QRect(20, 85, 450, 1))
				self.BorderFrame1.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
				self.FileTypeLabel = QLabel('種類:', self.GeneralTab)
				self.FileTypeLabel.setGeometry(QRect(20, 115, 80, 30))
				self.FileTypeLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileType = QLabel(self.GeneralTab)
				self.FileType.setText('複数の種類')
				self.FileType.setGeometry(QRect(160, 115, 310, 30))
				self.FileType.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FilePathLabel = QLabel('場所:', self.GeneralTab)
				self.FilePathLabel.setGeometry(QRect(20, 175, 50, 30))  # label only x 30, y50ずつ
				self.FilePathLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FilePath = QLabel(self.GeneralTab)
				self.FilePath.setGeometry(QRect(160, 175, 350, 30))
				self.FilePath.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSizeLabel = QLabel('サイズ:', self.GeneralTab)
				self.FileSizeLabel.setGeometry(QRect(20, 245, 60, 30))
				self.FileSizeLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSize = QLabel(self.GeneralTab)
				self.FileSize.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSize.setGeometry(QRect(160, 245, 350, 30))
				self.BorderFrame3 = QLabel(self.GeneralTab)
				self.BorderFrame3.setGeometry(QRect(20, 325, 450, 1))
				self.BorderFrame3.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
				self.FilePropertyTab.addTab(self.GeneralTab, '')
			elif not len(EditMediaPath_MP3) == 0 and not len(self.OtherFiles) == 0: # 複数の種類
				self.OhterMultipleFileCheck = True
				self.MultipleFileCheck = False
				self.GeneralTab = QWidget()
				self.PreviewIcon = QLabel(self.GeneralTab)
				self.PreviewIcon.setGeometry(QRect(35, 0, 57, 57))
				self.PreviewIcon.setPixmap(QFileIconProvider().icon(QFileIconProvider.File).pixmap(QSize(57, 57)))
				self.PreviewIcon.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.PreviewIcon2 = QLabel(self.GeneralTab)
				self.PreviewIcon2.setGeometry(QRect(28, 7, 55, 55))
				self.PreviewIcon2.setPixmap(QFileIconProvider().icon(QFileIconProvider.File).pixmap(QSize(55, 55)))
				self.PreviewIcon2.setStyleSheet('QLabel{background: rba(45, 45, 45, 45);color: #ededed;}')
				self.FileName = QLabel(self.GeneralTab)
				self.FileName.setGeometry(QRect(160, 20, 310, 30))
				self.FileName.setText('ファイル数: {}、フォルダー数: {}'.format(self.FilesCount, self.FoldersCount))
				self.FileName.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.BorderFrame1 = QLabel(self.GeneralTab)
				self.BorderFrame1.setGeometry(QRect(20, 85, 450, 1))
				self.BorderFrame1.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
				self.FileTypeLabel = QLabel('種類:', self.GeneralTab)
				self.FileTypeLabel.setGeometry(QRect(20, 115, 80, 30))
				self.FileTypeLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileType = QLabel(self.GeneralTab)
				self.FileType.setText('複数の種類')
				self.FileType.setGeometry(QRect(160, 115, 310, 30))
				self.FileType.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FilePathLabel = QLabel('場所:', self.GeneralTab)
				self.FilePathLabel.setGeometry(QRect(20, 175, 50, 30))  # label only x 30, y50ずつ
				self.FilePathLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FilePath = QLabel(self.GeneralTab)
				self.FilePath.setGeometry(QRect(160, 175, 350, 30))
				self.FilePath.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSizeLabel = QLabel('サイズ:', self.GeneralTab)
				self.FileSizeLabel.setGeometry(QRect(20, 245, 60, 30))
				self.FileSizeLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSize = QLabel(self.GeneralTab)
				self.FileSize.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSize.setGeometry(QRect(160, 245, 350, 30))
				self.BorderFrame3 = QLabel(self.GeneralTab)
				self.BorderFrame3.setGeometry(QRect(20, 325, 450, 1))
				self.BorderFrame3.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
				self.FilePropertyTab.addTab(self.GeneralTab, '')
			elif not len(EditMediaPath_FLAC) == 0 and not self.FoldersCount == 0: # 複数の種類
				self.OhterMultipleFileCheck = True
				self.MultipleFileCheck = False
				self.GeneralTab = QWidget()
				self.PreviewIcon = QLabel(self.GeneralTab)
				self.PreviewIcon.setGeometry(QRect(35, 0, 57, 57))
				self.PreviewIcon.setPixmap(QFileIconProvider().icon(QFileIconProvider.File).pixmap(QSize(57, 57)))
				self.PreviewIcon.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.PreviewIcon2 = QLabel(self.GeneralTab)
				self.PreviewIcon2.setGeometry(QRect(28, 7, 55, 55))
				self.PreviewIcon2.setPixmap(QFileIconProvider().icon(QFileIconProvider.File).pixmap(QSize(55, 55)))
				self.PreviewIcon2.setStyleSheet('QLabel{background: rba(45, 45, 45, 45);color: #ededed;}')
				self.FileName = QLabel(self.GeneralTab)
				self.FileName.setGeometry(QRect(160, 20, 310, 30))
				self.FileName.setText('ファイル数: {}、フォルダー数: {}'.format(self.FilesCount, self.FoldersCount))
				self.FileName.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.BorderFrame1 = QLabel(self.GeneralTab)
				self.BorderFrame1.setGeometry(QRect(20, 85, 450, 1))
				self.BorderFrame1.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
				self.FileTypeLabel = QLabel('種類:', self.GeneralTab)
				self.FileTypeLabel.setGeometry(QRect(20, 115, 80, 30))
				self.FileTypeLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileType = QLabel(self.GeneralTab)
				self.FileType.setText('複数の種類')
				self.FileType.setGeometry(QRect(160, 115, 310, 30))
				self.FileType.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FilePathLabel = QLabel('場所:', self.GeneralTab)
				self.FilePathLabel.setGeometry(QRect(20, 175, 50, 30))  # label only x 30, y50ずつ
				self.FilePathLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FilePath = QLabel(self.GeneralTab)
				self.FilePath.setGeometry(QRect(160, 175, 350, 30))
				self.FilePath.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSizeLabel = QLabel('サイズ:', self.GeneralTab)
				self.FileSizeLabel.setGeometry(QRect(20, 245, 60, 30))
				self.FileSizeLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSize = QLabel(self.GeneralTab)
				self.FileSize.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSize.setGeometry(QRect(160, 245, 350, 30))
				self.BorderFrame3 = QLabel(self.GeneralTab)
				self.BorderFrame3.setGeometry(QRect(20, 325, 450, 1))
				self.BorderFrame3.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
				self.FilePropertyTab.addTab(self.GeneralTab, '')
			elif not len(EditMediaPath_M4A) == 0 and not self.FoldersCount == 0: # 複数の種類
				self.OhterMultipleFileCheck = True
				self.MultipleFileCheck = False
				self.GeneralTab = QWidget()
				self.PreviewIcon = QLabel(self.GeneralTab)
				self.PreviewIcon.setGeometry(QRect(35, 0, 57, 57))
				self.PreviewIcon.setPixmap(QFileIconProvider().icon(QFileIconProvider.File).pixmap(QSize(57, 57)))
				self.PreviewIcon.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.PreviewIcon2 = QLabel(self.GeneralTab)
				self.PreviewIcon2.setGeometry(QRect(28, 7, 55, 55))
				self.PreviewIcon2.setPixmap(QFileIconProvider().icon(QFileIconProvider.File).pixmap(QSize(55, 55)))
				self.PreviewIcon2.setStyleSheet('QLabel{background: rba(45, 45, 45, 45);color: #ededed;}')
				self.FileName = QLabel(self.GeneralTab)
				self.FileName.setGeometry(QRect(160, 20, 310, 30))
				self.FileName.setText('ファイル数: {}、フォルダー数: {}'.format(self.FilesCount, self.FoldersCount))
				self.FileName.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.BorderFrame1 = QLabel(self.GeneralTab)
				self.BorderFrame1.setGeometry(QRect(20, 85, 450, 1))
				self.BorderFrame1.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
				self.FileTypeLabel = QLabel('種類:', self.GeneralTab)
				self.FileTypeLabel.setGeometry(QRect(20, 115, 80, 30))
				self.FileTypeLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileType = QLabel(self.GeneralTab)
				self.FileType.setText('複数の種類')
				self.FileType.setGeometry(QRect(160, 115, 310, 30))
				self.FileType.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FilePathLabel = QLabel('場所:', self.GeneralTab)
				self.FilePathLabel.setGeometry(QRect(20, 175, 50, 30))  # label only x 30, y50ずつ
				self.FilePathLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FilePath = QLabel(self.GeneralTab)
				self.FilePath.setGeometry(QRect(160, 175, 350, 30))
				self.FilePath.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSizeLabel = QLabel('サイズ:', self.GeneralTab)
				self.FileSizeLabel.setGeometry(QRect(20, 245, 60, 30))
				self.FileSizeLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSize = QLabel(self.GeneralTab)
				self.FileSize.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSize.setGeometry(QRect(160, 245, 350, 30))
				self.BorderFrame3 = QLabel(self.GeneralTab)
				self.BorderFrame3.setGeometry(QRect(20, 325, 450, 1))
				self.BorderFrame3.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
				self.FilePropertyTab.addTab(self.GeneralTab, '')
			elif not len(EditMediaPath_MP3) == 0 and not self.FoldersCount == 0: # 複数の種類
				self.OhterMultipleFileCheck = True
				self.MultipleFileCheck = False
				self.GeneralTab = QWidget()
				self.PreviewIcon = QLabel(self.GeneralTab)
				self.PreviewIcon.setGeometry(QRect(35, 0, 57, 57))
				self.PreviewIcon.setPixmap(QFileIconProvider().icon(QFileIconProvider.File).pixmap(QSize(57, 57)))
				self.PreviewIcon.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.PreviewIcon2 = QLabel(self.GeneralTab)
				self.PreviewIcon2.setGeometry(QRect(28, 7, 55, 55))
				self.PreviewIcon2.setPixmap(QFileIconProvider().icon(QFileIconProvider.File).pixmap(QSize(55, 55)))
				self.PreviewIcon2.setStyleSheet('QLabel{background: rba(45, 45, 45, 45);color: #ededed;}')
				self.FileName = QLabel(self.GeneralTab)
				self.FileName.setGeometry(QRect(160, 20, 310, 30))
				self.FileName.setText('ファイル数: {}、フォルダー数: {}'.format(self.FilesCount, self.FoldersCount))
				self.FileName.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.BorderFrame1 = QLabel(self.GeneralTab)
				self.BorderFrame1.setGeometry(QRect(20, 85, 450, 1))
				self.BorderFrame1.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
				self.FileTypeLabel = QLabel('種類:', self.GeneralTab)
				self.FileTypeLabel.setGeometry(QRect(20, 115, 80, 30))
				self.FileTypeLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileType = QLabel(self.GeneralTab)
				self.FileType.setText('複数の種類')
				self.FileType.setGeometry(QRect(160, 115, 310, 30))
				self.FileType.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FilePathLabel = QLabel('場所:', self.GeneralTab)
				self.FilePathLabel.setGeometry(QRect(20, 175, 50, 30))  # label only x 30, y50ずつ
				self.FilePathLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FilePath = QLabel(self.GeneralTab)
				self.FilePath.setGeometry(QRect(160, 175, 350, 30))
				self.FilePath.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSizeLabel = QLabel('サイズ:', self.GeneralTab)
				self.FileSizeLabel.setGeometry(QRect(20, 245, 60, 30))
				self.FileSizeLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSize = QLabel(self.GeneralTab)
				self.FileSize.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSize.setGeometry(QRect(160, 245, 350, 30))
				self.BorderFrame3 = QLabel(self.GeneralTab)
				self.BorderFrame3.setGeometry(QRect(20, 325, 450, 1))
				self.BorderFrame3.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
				self.FilePropertyTab.addTab(self.GeneralTab, '')
			elif not len(self.OtherFiles) == 0 and not self.FoldersCount == 0: # 複数の種類
				self.OhterMultipleFileCheck = True
				self.MultipleFileCheck = False
				self.GeneralTab = QWidget()
				self.PreviewIcon = QLabel(self.GeneralTab)
				self.PreviewIcon.setGeometry(QRect(35, 0, 57, 57))
				self.PreviewIcon.setPixmap(QFileIconProvider().icon(QFileIconProvider.File).pixmap(QSize(57, 57)))
				self.PreviewIcon.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.PreviewIcon2 = QLabel(self.GeneralTab)
				self.PreviewIcon2.setGeometry(QRect(28, 7, 55, 55))
				self.PreviewIcon2.setPixmap(QFileIconProvider().icon(QFileIconProvider.File).pixmap(QSize(55, 55)))
				self.PreviewIcon2.setStyleSheet('QLabel{background: rba(45, 45, 45, 45);color: #ededed;}')
				self.FileName = QLabel(self.GeneralTab)
				self.FileName.setGeometry(QRect(160, 20, 310, 30))
				self.FileName.setText('ファイル数: {}、フォルダー数: {}'.format(self.FilesCount, self.FoldersCount))
				self.FileName.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.BorderFrame1 = QLabel(self.GeneralTab)
				self.BorderFrame1.setGeometry(QRect(20, 85, 450, 1))
				self.BorderFrame1.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
				self.FileTypeLabel = QLabel('種類:', self.GeneralTab)
				self.FileTypeLabel.setGeometry(QRect(20, 115, 80, 30))
				self.FileTypeLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileType = QLabel(self.GeneralTab)
				self.FileType.setText('複数の種類')
				self.FileType.setGeometry(QRect(160, 115, 310, 30))
				self.FileType.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FilePathLabel = QLabel('場所:', self.GeneralTab)
				self.FilePathLabel.setGeometry(QRect(20, 175, 50, 30))  # label only x 30, y50ずつ
				self.FilePathLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FilePath = QLabel(self.GeneralTab)
				self.FilePath.setGeometry(QRect(160, 175, 350, 30))
				self.FilePath.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSizeLabel = QLabel('サイズ:', self.GeneralTab)
				self.FileSizeLabel.setGeometry(QRect(20, 245, 60, 30))
				self.FileSizeLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSize = QLabel(self.GeneralTab)
				self.FileSize.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSize.setGeometry(QRect(160, 245, 350, 30))
				self.BorderFrame3 = QLabel(self.GeneralTab)
				self.BorderFrame3.setGeometry(QRect(20, 325, 450, 1))
				self.BorderFrame3.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
				self.FilePropertyTab.addTab(self.GeneralTab, '')
			elif not len(EditMediaPath_FLAC) == 0 and not len(EditMediaPath_M4A) == 0: # 複数の種類
				self.OhterMultipleFileCheck = True
				self.MultipleFileCheck = False
				self.GeneralTab = QWidget()
				self.PreviewIcon = QLabel(self.GeneralTab)
				self.PreviewIcon.setGeometry(QRect(35, 0, 57, 57))
				self.PreviewIcon.setPixmap(QFileIconProvider().icon(QFileIconProvider.File).pixmap(QSize(57, 57)))
				self.PreviewIcon.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.PreviewIcon2 = QLabel(self.GeneralTab)
				self.PreviewIcon2.setGeometry(QRect(28, 7, 55, 55))
				self.PreviewIcon2.setPixmap(QFileIconProvider().icon(QFileIconProvider.File).pixmap(QSize(55, 55)))
				self.PreviewIcon2.setStyleSheet('QLabel{background: rba(45, 45, 45, 45);color: #ededed;}')
				self.FileName = QLabel(self.GeneralTab)
				self.FileName.setGeometry(QRect(160, 20, 310, 30))
				self.FileName.setText('ファイル数: {}、フォルダー数: {}'.format(self.FilesCount, self.FoldersCount))
				self.FileName.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.BorderFrame1 = QLabel(self.GeneralTab)
				self.BorderFrame1.setGeometry(QRect(20, 85, 450, 1))
				self.BorderFrame1.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
				self.FileTypeLabel = QLabel('種類:', self.GeneralTab)
				self.FileTypeLabel.setGeometry(QRect(20, 115, 80, 30))
				self.FileTypeLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileType = QLabel(self.GeneralTab)
				self.FileType.setText('複数の種類')
				self.FileType.setGeometry(QRect(160, 115, 310, 30))
				self.FileType.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FilePathLabel = QLabel('場所:', self.GeneralTab)
				self.FilePathLabel.setGeometry(QRect(20, 175, 50, 30))  # label only x 30, y50ずつ
				self.FilePathLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FilePath = QLabel(self.GeneralTab)
				self.FilePath.setGeometry(QRect(160, 175, 350, 30))
				self.FilePath.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSizeLabel = QLabel('サイズ:', self.GeneralTab)
				self.FileSizeLabel.setGeometry(QRect(20, 245, 60, 30))
				self.FileSizeLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSize = QLabel(self.GeneralTab)
				self.FileSize.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSize.setGeometry(QRect(160, 245, 350, 30))
				self.BorderFrame3 = QLabel(self.GeneralTab)
				self.BorderFrame3.setGeometry(QRect(20, 325, 450, 1))
				self.BorderFrame3.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
				self.FilePropertyTab.addTab(self.GeneralTab, '')
			elif not len(EditMediaPath_FLAC) == 0 and not len(EditMediaPath_MP3) == 0: # 複数の種類
				self.OhterMultipleFileCheck = True
				self.MultipleFileCheck = False
				self.GeneralTab = QWidget()
				self.PreviewIcon = QLabel(self.GeneralTab)
				self.PreviewIcon.setGeometry(QRect(35, 0, 57, 57))
				self.PreviewIcon.setPixmap(QFileIconProvider().icon(QFileIconProvider.File).pixmap(QSize(57, 57)))
				self.PreviewIcon.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.PreviewIcon2 = QLabel(self.GeneralTab)
				self.PreviewIcon2.setGeometry(QRect(28, 7, 55, 55))
				self.PreviewIcon2.setPixmap(QFileIconProvider().icon(QFileIconProvider.File).pixmap(QSize(55, 55)))
				self.PreviewIcon2.setStyleSheet('QLabel{background: rba(45, 45, 45, 45);color: #ededed;}')
				self.FileName = QLabel(self.GeneralTab)
				self.FileName.setGeometry(QRect(160, 20, 310, 30))
				self.FileName.setText('ファイル数: {}、フォルダー数: {}'.format(self.FilesCount, self.FoldersCount))
				self.FileName.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.BorderFrame1 = QLabel(self.GeneralTab)
				self.BorderFrame1.setGeometry(QRect(20, 85, 450, 1))
				self.BorderFrame1.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
				self.FileTypeLabel = QLabel('種類:', self.GeneralTab)
				self.FileTypeLabel.setGeometry(QRect(20, 115, 80, 30))
				self.FileTypeLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileType = QLabel(self.GeneralTab)
				self.FileType.setText('複数の種類')
				self.FileType.setGeometry(QRect(160, 115, 310, 30))
				self.FileType.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FilePathLabel = QLabel('場所:', self.GeneralTab)
				self.FilePathLabel.setGeometry(QRect(20, 175, 50, 30))  # label only x 30, y50ずつ
				self.FilePathLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FilePath = QLabel(self.GeneralTab)
				self.FilePath.setGeometry(QRect(160, 175, 350, 30))
				self.FilePath.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSizeLabel = QLabel('サイズ:', self.GeneralTab)
				self.FileSizeLabel.setGeometry(QRect(20, 245, 60, 30))
				self.FileSizeLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSize = QLabel(self.GeneralTab)
				self.FileSize.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSize.setGeometry(QRect(160, 245, 350, 30))
				self.BorderFrame3 = QLabel(self.GeneralTab)
				self.BorderFrame3.setGeometry(QRect(20, 325, 450, 1))
				self.BorderFrame3.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
				self.FilePropertyTab.addTab(self.GeneralTab, '')
			elif not len(EditMediaPath_M4A) == 0 and not len(EditMediaPath_MP3) == 0: # 複数の種類
				self.OhterMultipleFileCheck = True
				self.MultipleFileCheck = False
				self.GeneralTab = QWidget()
				self.PreviewIcon = QLabel(self.GeneralTab)
				self.PreviewIcon.setGeometry(QRect(35, 0, 57, 57))
				self.PreviewIcon.setPixmap(QFileIconProvider().icon(QFileIconProvider.File).pixmap(QSize(57, 57)))
				self.PreviewIcon.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.PreviewIcon2 = QLabel(self.GeneralTab)
				self.PreviewIcon2.setGeometry(QRect(28, 7, 55, 55))
				self.PreviewIcon2.setPixmap(QFileIconProvider().icon(QFileIconProvider.File).pixmap(QSize(55, 55)))
				self.PreviewIcon2.setStyleSheet('QLabel{background: rba(45, 45, 45, 45);color: #ededed;}')
				self.FileName = QLabel(self.GeneralTab)
				self.FileName.setGeometry(QRect(160, 20, 310, 30))
				self.FileName.setText('ファイル数: {}、フォルダー数: {}'.format(self.FilesCount, self.FoldersCount))
				self.FileName.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.BorderFrame1 = QLabel(self.GeneralTab)
				self.BorderFrame1.setGeometry(QRect(20, 85, 450, 1))
				self.BorderFrame1.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
				self.FileTypeLabel = QLabel('種類:', self.GeneralTab)
				self.FileTypeLabel.setGeometry(QRect(20, 115, 80, 30))
				self.FileTypeLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileType = QLabel(self.GeneralTab)
				self.FileType.setText('複数の種類')
				self.FileType.setGeometry(QRect(160, 115, 310, 30))
				self.FileType.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FilePathLabel = QLabel('場所:', self.GeneralTab)
				self.FilePathLabel.setGeometry(QRect(20, 175, 50, 30))  # label only x 30, y50ずつ
				self.FilePathLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FilePath = QLabel(self.GeneralTab)
				self.FilePath.setGeometry(QRect(160, 175, 350, 30))
				self.FilePath.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSizeLabel = QLabel('サイズ:', self.GeneralTab)
				self.FileSizeLabel.setGeometry(QRect(20, 245, 60, 30))
				self.FileSizeLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSize = QLabel(self.GeneralTab)
				self.FileSize.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSize.setGeometry(QRect(160, 245, 350, 30))
				self.BorderFrame3 = QLabel(self.GeneralTab)
				self.BorderFrame3.setGeometry(QRect(20, 325, 450, 1))
				self.BorderFrame3.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
				self.FilePropertyTab.addTab(self.GeneralTab, '')
			elif 2 <= len(self.OtherFiles):
				self.OhterMultipleFileCheck = True
				self.MultipleFileCheck = False
				self.GeneralTab = QWidget()
				self.PreviewIcon = QLabel(self.GeneralTab)
				self.PreviewIcon.setGeometry(QRect(35, 0, 57, 57))
				self.PreviewIcon.setPixmap(QFileIconProvider().icon(QFileIconProvider.File).pixmap(QSize(57, 57)))
				self.PreviewIcon.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.PreviewIcon2 = QLabel(self.GeneralTab)
				self.PreviewIcon2.setGeometry(QRect(28, 7, 55, 55))
				self.PreviewIcon2.setPixmap(QFileIconProvider().icon(QFileIconProvider.File).pixmap(QSize(55, 55)))
				self.PreviewIcon2.setStyleSheet('QLabel{background: rba(45, 45, 45, 45);color: #ededed;}')
				self.FileName = QLabel(self.GeneralTab)
				self.FileName.setGeometry(QRect(160, 20, 310, 30))
				self.FileName.setText('ファイル数: {}、フォルダー数: {}'.format(self.FilesCount, self.FoldersCount))
				self.FileName.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.BorderFrame1 = QLabel(self.GeneralTab)
				self.BorderFrame1.setGeometry(QRect(20, 85, 450, 1))
				self.BorderFrame1.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
				self.FileTypeLabel = QLabel('種類:', self.GeneralTab)
				self.FileTypeLabel.setGeometry(QRect(20, 115, 80, 30))
				self.FileTypeLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileType = QLabel(self.GeneralTab)
				self.FileType.setText('複数の種類')
				self.FileType.setGeometry(QRect(160, 115, 310, 30))
				self.FileType.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FilePathLabel = QLabel('場所:', self.GeneralTab)
				self.FilePathLabel.setGeometry(QRect(20, 175, 50, 30))  # label only x 30, y50ずつ
				self.FilePathLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FilePath = QLabel(self.GeneralTab)
				self.FilePath.setGeometry(QRect(160, 175, 350, 30))
				self.FilePath.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSizeLabel = QLabel('サイズ:', self.GeneralTab)
				self.FileSizeLabel.setGeometry(QRect(20, 245, 60, 30))
				self.FileSizeLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSize = QLabel(self.GeneralTab)
				self.FileSize.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSize.setGeometry(QRect(160, 245, 350, 30))
				self.BorderFrame3 = QLabel(self.GeneralTab)
				self.BorderFrame3.setGeometry(QRect(20, 325, 450, 1))
				self.BorderFrame3.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
				self.FilePropertyTab.addTab(self.GeneralTab, '')
			if not len(EditMediaPath_FLAC) == 0 and len(EditMediaPath_M4A) == 0 and len(EditMediaPath_MP3) == 0 and self.FoldersCount == 0 and len(self.OtherFiles) == 0: # 複数のFLACファイル
				self.OhterMultipleFileCheck = False
				self.MultipleFileCheck = True
				self.OhterMultipleFileCheck = True
				self.MultipleFileCheck = False
				self.GeneralTab = QWidget()
				self.PreviewIcon = QLabel(self.GeneralTab)
				self.PreviewIcon.setGeometry(QRect(35, 0, 57, 57))
				self.PreviewIcon.setPixmap(QFileIconProvider().icon(QFileIconProvider.File).pixmap(QSize(57, 57)))
				self.PreviewIcon.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.PreviewIcon2 = QLabel(self.GeneralTab)
				self.PreviewIcon2.setGeometry(QRect(28, 7, 55, 55))
				self.PreviewIcon2.setPixmap(QFileIconProvider().icon(QFileIconProvider.File).pixmap(QSize(55, 55)))
				self.PreviewIcon2.setStyleSheet('QLabel{background: rba(45, 45, 45, 45);color: #ededed;}')
				self.FileName = QLabel(self.GeneralTab)
				self.FileName.setGeometry(QRect(160, 20, 310, 30))
				self.FileName.setText('ファイル数: {}、フォルダー数: {}'.format(self.FilesCount, self.FoldersCount))
				self.FileName.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.BorderFrame1 = QLabel(self.GeneralTab)
				self.BorderFrame1.setGeometry(QRect(20, 85, 450, 1))
				self.BorderFrame1.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
				self.FileTypeLabel = QLabel('種類:', self.GeneralTab)
				self.FileTypeLabel.setGeometry(QRect(20, 115, 80, 30))
				self.FileTypeLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileType = QLabel(self.GeneralTab)
				self.FileType.setText('複数のFLACファイルのすべて')
				self.FileType.setGeometry(QRect(160, 115, 310, 30))
				self.FileType.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FilePathLabel = QLabel('場所:', self.GeneralTab)
				self.FilePathLabel.setGeometry(QRect(20, 175, 50, 30))  # label only x 30, y50ずつ
				self.FilePathLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FilePath = QLabel(self.GeneralTab)
				self.FilePath.setGeometry(QRect(160, 175, 350, 30))
				self.FilePath.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSizeLabel = QLabel('サイズ:', self.GeneralTab)
				self.FileSizeLabel.setGeometry(QRect(20, 245, 60, 30))
				self.FileSizeLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSize = QLabel(self.GeneralTab)
				self.FileSize.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSize.setGeometry(QRect(160, 245, 350, 30))
				self.BorderFrame3 = QLabel(self.GeneralTab)
				self.BorderFrame3.setGeometry(QRect(20, 325, 450, 1))
				self.BorderFrame3.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
				self.FilePropertyTab.addTab(self.GeneralTab, '')
				self.DetailInfoTab = QWidget()
				self.TrackNameLabel = QLabel('タイトル', self.DetailInfoTab)
				self.TrackNameLabel.setGeometry(QRect(20, 10, 80, 30))
				self.TrackNameLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.TrackName = QLineEdit(self.DetailInfoTab)
				self.TrackName.setText('(複数の値)')
				self.TrackName.setGeometry(QRect(190, 10, 280, 30))
				self.TrackName.setStyleSheet('QLineEdit{background: #2d2d2d;color: #ededed;border 0px;}')
				self.TrackArtistLabel = QLabel('アーティスト', self.DetailInfoTab)
				self.TrackArtistLabel.setGeometry(QRect(20, 65, 110, 30))
				self.TrackArtistLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.TrackArtist = QLineEdit(self.DetailInfoTab)
				self.TrackArtist.setText('(複数の値)')
				self.TrackArtist.setGeometry(QRect(190, 65, 280, 30))
				self.TrackArtist.setStyleSheet('QLineEdit{background: #2d2d2d;color: #ededed;border 0px;}')
				self.TrackAlbumArtistLabel = QLabel('アルバムアーティスト', self.DetailInfoTab)
				self.TrackAlbumArtistLabel.setGeometry(QRect(20, 125, 150, 30))
				self.TrackAlbumArtistLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.TrackAlbumArtist = QLineEdit(self.DetailInfoTab)
				self.TrackAlbumArtist.setText('(複数の値)')
				self.TrackAlbumArtist.setGeometry(QRect(190, 125, 280, 30))
				self.TrackAlbumArtist.setStyleSheet('QLineEdit{background: #2d2d2d;color: #ededed;border 0px;}')
				self.TrackAlbumLabel = QLabel('アルバム名', self.DetailInfoTab)
				self.TrackAlbumLabel.setGeometry(QRect(20, 185, 150, 30))
				self.TrackAlbumLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.TrackAlbum = QLineEdit(self.DetailInfoTab)
				self.TrackAlbum.setText('(複数の値)')
				self.TrackAlbum.setGeometry(QRect(190, 185, 280, 30))
				self.TrackAlbum.setStyleSheet('QLineEdit{background: #2d2d2d;color: #ededed;border 0px;}')
				self.TrackGenreLabel = QLabel('ジャンル', self.DetailInfoTab)
				self.TrackGenreLabel.setGeometry(QRect(20, 245, 150, 30))
				self.TrackGenreLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.TrackGenre = QLineEdit(self.DetailInfoTab)
				self.TrackGenre.setText('(複数の値)')
				self.TrackGenre.setGeometry(QRect(190, 245, 280, 30))
				self.TrackGenre.setStyleSheet('QLineEdit{background: #2d2d2d;color: #ededed;border 0px;}')
				self.TrackYearLabel = QLabel('リリース日時', self.DetailInfoTab)
				self.TrackYearLabel.setGeometry(QRect(20, 305, 150, 30))
				self.TrackYearLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.TrackYear = QLineEdit(self.DetailInfoTab)
				self.TrackYear.setText('(複数の値)')
				self.TrackYear.setGeometry(QRect(190, 305, 280, 30))
				self.TrackYear.setStyleSheet('QLineEdit{background: #2d2d2d;color: #ededed;}')
				self.TrackNumlabel = QLabel('トラック番号', self.DetailInfoTab)
				self.TrackNumlabel.setGeometry(QRect(20, 365, 150, 30))
				self.TrackNumlabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.TrackNum = QLineEdit(self.DetailInfoTab)
				self.TrackNum.setText('(複数の値)')
				self.TrackNum.setGeometry(QRect(190, 365, 280, 30))
				self.TrackNum.setStyleSheet('QLineEdit{background: #2d2d2d;color: #ededed;border 0px;}')
				self.TrackDiscNumLabel = QLabel('ディスク番号', self.DetailInfoTab)
				self.TrackDiscNumLabel.setGeometry(QRect(20, 425, 150, 30))
				self.TrackDiscNumLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.TrackDiscNum = QLineEdit(self.DetailInfoTab)
				self.TrackDiscNum.setText('(複数の値)')
				self.TrackDiscNum.setGeometry(QRect(190, 425, 280, 30))
				self.TrackDiscNum.setStyleSheet('QLineEdit{background: #2d2d2d;color: #ededed;border 0px;}')
				self.TrackArtLabel = QLabel('アルバムカバー', self.DetailInfoTab)
				self.TrackArtLabel.setGeometry(QRect(70, 515, 110, 30))
				self.TrackArtLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.TrackArt = EditCoverArtLabel(self.DetailInfoTab)
				self.TrackArt.setGeometry(QRect(280, 480, 100, 100))
				self.TrackArt.setAcceptDrops(True)
				self.FilePropertyTab.addTab(self.DetailInfoTab, '')
				self.FilePropertyTab.setTabText(self.FilePropertyTab.indexOf(self.DetailInfoTab), '詳細')
			elif len(EditMediaPath_FLAC) == 0 and not len(EditMediaPath_M4A) == 0 and len(EditMediaPath_MP3) == 0 and self.FoldersCount == 0 and len(self.OtherFiles) == 0: # 複数のM4Aファイル
				self.OhterMultipleFileCheck = False
				self.MultipleFileCheck = True
				self.OhterMultipleFileCheck = True
				self.MultipleFileCheck = False
				self.GeneralTab = QWidget()
				self.PreviewIcon = QLabel(self.GeneralTab)
				self.PreviewIcon.setGeometry(QRect(35, 0, 57, 57))
				self.PreviewIcon.setPixmap(QFileIconProvider().icon(QFileIconProvider.File).pixmap(QSize(57, 57)))
				self.PreviewIcon.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.PreviewIcon2 = QLabel(self.GeneralTab)
				self.PreviewIcon2.setGeometry(QRect(28, 7, 55, 55))
				self.PreviewIcon2.setPixmap(QFileIconProvider().icon(QFileIconProvider.File).pixmap(QSize(55, 55)))
				self.PreviewIcon2.setStyleSheet('QLabel{background: rba(45, 45, 45, 45);color: #ededed;}')
				self.FileName = QLabel(self.GeneralTab)
				self.FileName.setGeometry(QRect(160, 20, 310, 30))
				self.FileName.setText('ファイル数: {}、フォルダー数: {}'.format(self.FilesCount, self.FoldersCount))
				self.FileName.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.BorderFrame1 = QLabel(self.GeneralTab)
				self.BorderFrame1.setGeometry(QRect(20, 85, 450, 1))
				self.BorderFrame1.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
				self.FileTypeLabel = QLabel('種類:', self.GeneralTab)
				self.FileTypeLabel.setGeometry(QRect(20, 115, 80, 30))
				self.FileTypeLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileType = QLabel(self.GeneralTab)
				self.FileType.setText('複数のM4Aファイルのすべて')
				self.FileType.setGeometry(QRect(160, 115, 310, 30))
				self.FileType.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FilePathLabel = QLabel('場所:', self.GeneralTab)
				self.FilePathLabel.setGeometry(QRect(20, 175, 50, 30))  # label only x 30, y50ずつ
				self.FilePathLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FilePath = QLabel(self.GeneralTab)
				self.FilePath.setGeometry(QRect(160, 175, 350, 30))
				self.FilePath.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSizeLabel = QLabel('サイズ:', self.GeneralTab)
				self.FileSizeLabel.setGeometry(QRect(20, 245, 60, 30))
				self.FileSizeLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSize = QLabel(self.GeneralTab)
				self.FileSize.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSize.setGeometry(QRect(160, 245, 350, 30))
				self.BorderFrame3 = QLabel(self.GeneralTab)
				self.BorderFrame3.setGeometry(QRect(20, 325, 450, 1))
				self.BorderFrame3.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
				self.FilePropertyTab.addTab(self.GeneralTab, '')
				self.DetailInfoTab = QWidget()
				self.TrackNameLabel = QLabel('タイトル', self.DetailInfoTab)
				self.TrackNameLabel.setGeometry(QRect(20, 10, 80, 30))
				self.TrackNameLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.TrackName = QLineEdit(self.DetailInfoTab)
				self.TrackName.setText('(複数の値)')
				self.TrackName.setGeometry(QRect(190, 10, 280, 30))
				self.TrackName.setStyleSheet('QLineEdit{background: #2d2d2d;color: #ededed;border 0px;}')
				self.TrackArtistLabel = QLabel('アーティスト', self.DetailInfoTab)
				self.TrackArtistLabel.setGeometry(QRect(20, 65, 110, 30))
				self.TrackArtistLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.TrackArtist = QLineEdit(self.DetailInfoTab)
				self.TrackArtist.setText('(複数の値)')
				self.TrackArtist.setGeometry(QRect(190, 65, 280, 30))
				self.TrackArtist.setStyleSheet('QLineEdit{background: #2d2d2d;color: #ededed;border 0px;}')
				self.TrackAlbumArtistLabel = QLabel('アルバムアーティスト', self.DetailInfoTab)
				self.TrackAlbumArtistLabel.setGeometry(QRect(20, 125, 150, 30))
				self.TrackAlbumArtistLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.TrackAlbumArtist = QLineEdit(self.DetailInfoTab)
				self.TrackAlbumArtist.setText('(複数の値)')
				self.TrackAlbumArtist.setGeometry(QRect(190, 125, 280, 30))
				self.TrackAlbumArtist.setStyleSheet('QLineEdit{background: #2d2d2d;color: #ededed;border 0px;}')
				self.TrackAlbumLabel = QLabel('アルバム名', self.DetailInfoTab)
				self.TrackAlbumLabel.setGeometry(QRect(20, 185, 150, 30))
				self.TrackAlbumLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.TrackAlbum = QLineEdit(self.DetailInfoTab)
				self.TrackAlbum.setText('(複数の値)')
				self.TrackAlbum.setGeometry(QRect(190, 185, 280, 30))
				self.TrackAlbum.setStyleSheet('QLineEdit{background: #2d2d2d;color: #ededed;}')
				self.TrackGenreLabel = QLabel('ジャンル', self.DetailInfoTab)
				self.TrackGenreLabel.setGeometry(QRect(20, 245, 150, 30))
				self.TrackGenreLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.TrackGenre = QLineEdit(self.DetailInfoTab)
				self.TrackGenre.setText('(複数の値)')
				self.TrackGenre.setGeometry(QRect(190, 245, 280, 30))
				self.TrackGenre.setStyleSheet('QLineEdit{background: #2d2d2d;color: #ededed;border 0px;}')
				self.TrackYearLabel = QLabel('リリース日時', self.DetailInfoTab)
				self.TrackYearLabel.setGeometry(QRect(20, 305, 150, 30))
				self.TrackYearLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.TrackYear = QLineEdit(self.DetailInfoTab)
				self.TrackYear.setText('(複数の値)')
				self.TrackYear.setGeometry(QRect(190, 305, 280, 30))
				self.TrackYear.setStyleSheet('QLineEdit{background: #2d2d2d;color: #ededed;border 0px;}')
				self.TrackNumlabel = QLabel('トラック番号', self.DetailInfoTab)
				self.TrackNumlabel.setGeometry(QRect(20, 365, 150, 30))
				self.TrackNumlabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.TrackNum = QLineEdit(self.DetailInfoTab)
				self.TrackNum.setText('(複数の値)')
				self.TrackNum.setGeometry(QRect(190, 365, 280, 30))
				self.TrackNum.setStyleSheet('QLineEdit{background: #2d2d2d;color: #ededed;border 0px;}')
				self.TrackDiscNumLabel = QLabel('ディスク番号', self.DetailInfoTab)
				self.TrackDiscNumLabel.setGeometry(QRect(20, 425, 150, 30))
				self.TrackDiscNumLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.TrackDiscNum = QLineEdit(self.DetailInfoTab)
				self.TrackDiscNum.setText('(複数の値)')
				self.TrackDiscNum.setGeometry(QRect(190, 425, 280, 30))
				self.TrackDiscNum.setStyleSheet('QLineEdit{background: #2d2d2d;color: #ededed;border 0px;}')
				self.TrackArtLabel = QLabel('アルバムカバー', self.DetailInfoTab)
				self.TrackArtLabel.setGeometry(QRect(70, 515, 110, 30))
				self.TrackArtLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.TrackArt = EditCoverArtLabel(self.DetailInfoTab)
				self.TrackArt.setGeometry(QRect(280, 480, 100, 100))
				self.TrackArt.setAcceptDrops(True)
				self.FilePropertyTab.addTab(self.DetailInfoTab, '')
				self.FilePropertyTab.setTabText(self.FilePropertyTab.indexOf(self.DetailInfoTab), '詳細')
			elif len(EditMediaPath_FLAC) == 0 and len(EditMediaPath_M4A) == 0 and not len(EditMediaPath_MP3) == 0 and self.FoldersCount == 0 and len(self.OtherFiles) == 0: # 複数のMP3ファイル
				self.OhterMultipleFileCheck = False
				self.MultipleFileCheck = True
				self.OhterMultipleFileCheck = True
				self.MultipleFileCheck = False
				self.GeneralTab = QWidget()
				self.PreviewIcon = QLabel(self.GeneralTab)
				self.PreviewIcon.setGeometry(QRect(35, 0, 57, 57))
				self.PreviewIcon.setPixmap(QFileIconProvider().icon(QFileIconProvider.File).pixmap(QSize(57, 57)))
				self.PreviewIcon.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.PreviewIcon2 = QLabel(self.GeneralTab)
				self.PreviewIcon2.setGeometry(QRect(28, 7, 55, 55))
				self.PreviewIcon2.setPixmap(QFileIconProvider().icon(QFileIconProvider.File).pixmap(QSize(55, 55)))
				self.PreviewIcon2.setStyleSheet('QLabel{background: rba(45, 45, 45, 45);color: #ededed;}')
				self.FileName = QLabel(self.GeneralTab)
				self.FileName.setGeometry(QRect(160, 20, 310, 30))
				self.FileName.setText('ファイル数: {}、フォルダー数: {}'.format(self.FilesCount, self.FoldersCount))
				self.FileName.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.BorderFrame1 = QLabel(self.GeneralTab)
				self.BorderFrame1.setGeometry(QRect(20, 85, 450, 1))
				self.BorderFrame1.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
				self.FileTypeLabel = QLabel('種類:', self.GeneralTab)
				self.FileTypeLabel.setGeometry(QRect(20, 115, 80, 30))
				self.FileTypeLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileType = QLabel(self.GeneralTab)
				self.FileType.setText('複数のMP3ファイルのすべて')
				self.FileType.setGeometry(QRect(160, 115, 310, 30))
				self.FileType.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FilePathLabel = QLabel('場所:', self.GeneralTab)
				self.FilePathLabel.setGeometry(QRect(20, 175, 50, 30))  # label only x 30, y50ずつ
				self.FilePathLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FilePath = QLabel(self.GeneralTab)
				self.FilePath.setGeometry(QRect(160, 175, 350, 30))
				self.FilePath.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSizeLabel = QLabel('サイズ:', self.GeneralTab)
				self.FileSizeLabel.setGeometry(QRect(20, 245, 60, 30))
				self.FileSizeLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSize = QLabel(self.GeneralTab)
				self.FileSize.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.FileSize.setGeometry(QRect(160, 245, 350, 30))
				self.BorderFrame3 = QLabel(self.GeneralTab)
				self.BorderFrame3.setGeometry(QRect(20, 325, 450, 1))
				self.BorderFrame3.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
				self.FilePropertyTab.addTab(self.GeneralTab, '')
				self.DetailInfoTab = QWidget()
				self.TrackNameLabel = QLabel('タイトル', self.DetailInfoTab)
				self.TrackNameLabel.setGeometry(QRect(20, 10, 80, 30))
				self.TrackNameLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.TrackName = QLineEdit(self.DetailInfoTab)
				self.TrackName.setText('(複数の値)')
				self.TrackName.setGeometry(QRect(190, 10, 280, 30))
				self.TrackName.setStyleSheet('QLineEdit{background: #2d2d2d;color: #ededed;border 0px;}')
				self.TrackArtistLabel = QLabel('アーティスト', self.DetailInfoTab)
				self.TrackArtistLabel.setGeometry(QRect(20, 65, 110, 30))
				self.TrackArtistLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.TrackArtist = QLineEdit(self.DetailInfoTab)
				self.TrackArtist.setText('(複数の値)')
				self.TrackArtist.setGeometry(QRect(190, 65, 280, 30))
				self.TrackArtist.setStyleSheet('QLineEdit{background: #2d2d2d;color: #ededed;border 0px;}')
				self.TrackAlbumArtistLabel = QLabel('アルバムアーティスト', self.DetailInfoTab)
				self.TrackAlbumArtistLabel.setGeometry(QRect(20, 125, 150, 30))
				self.TrackAlbumArtistLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.TrackAlbumArtist = QLineEdit(self.DetailInfoTab)
				self.TrackAlbumArtist.setText('(複数の値)')
				self.TrackAlbumArtist.setGeometry(QRect(190, 125, 280, 30))
				self.TrackAlbumArtist.setStyleSheet('QLineEdit{background: #2d2d2d;color: #ededed;border 0px;}')
				self.TrackAlbumLabel = QLabel('アルバム名', self.DetailInfoTab)
				self.TrackAlbumLabel.setGeometry(QRect(20, 185, 150, 30))
				self.TrackAlbumLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.TrackAlbum = QLineEdit(self.DetailInfoTab)
				self.TrackAlbum.setText('(複数の値)')
				self.TrackAlbum.setGeometry(QRect(190, 185, 280, 30))
				self.TrackAlbum.setStyleSheet('QLineEdit{background: #2d2d2d;color: #ededed;border 0px;}')
				self.TrackGenreLabel = QLabel('ジャンル', self.DetailInfoTab)
				self.TrackGenreLabel.setGeometry(QRect(20, 245, 150, 30))
				self.TrackGenreLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.TrackGenre = QLineEdit(self.DetailInfoTab)
				self.TrackGenre.setText('(複数の値)')
				self.TrackGenre.setGeometry(QRect(190, 245, 280, 30))
				self.TrackGenre.setStyleSheet('QLineEdit{background: #2d2d2d;color: #ededed;border 0px;}')
				self.TrackYearLabel = QLabel('リリース日時', self.DetailInfoTab)
				self.TrackYearLabel.setGeometry(QRect(20, 305, 150, 30))
				self.TrackYearLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.TrackYear = QLineEdit(self.DetailInfoTab)
				self.TrackYear.setText('(複数の値)')
				self.TrackYear.setGeometry(QRect(190, 305, 280, 30))
				self.TrackYear.setStyleSheet('QLineEdit{background: #2d2d2d;color: #ededed;border 0px;}')
				self.TrackNumlabel = QLabel('トラック番号', self.DetailInfoTab)
				self.TrackNumlabel.setGeometry(QRect(20, 365, 150, 30))
				self.TrackNumlabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.TrackNum = QLineEdit(self.DetailInfoTab)
				self.TrackNum.setText('(複数の値)')
				self.TrackNum.setGeometry(QRect(190, 365, 280, 30))
				self.TrackNum.setStyleSheet('QLineEdit{background: #2d2d2d;color: #ededed;border 0px;}')
				self.TrackDiscNumLabel = QLabel('ディスク番号', self.DetailInfoTab)
				self.TrackDiscNumLabel.setGeometry(QRect(20, 425, 150, 30))
				self.TrackDiscNumLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.TrackDiscNum = QLineEdit(self.DetailInfoTab)
				self.TrackDiscNum.setText('(複数の値)')
				self.TrackDiscNum.setGeometry(QRect(190, 425, 280, 30))
				self.TrackDiscNum.setStyleSheet('QLineEdit{background: #2d2d2d;color: #ededed;border 0px;}')
				self.TrackArtLabel = QLabel('アルバムカバー', self.DetailInfoTab)
				self.TrackArtLabel.setGeometry(QRect(70, 515, 110, 30))
				self.TrackArtLabel.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
				self.TrackArt = EditCoverArtLabel(self.DetailInfoTab)
				self.TrackArt.setGeometry(QRect(280, 480, 100, 100))
				self.TrackArt.setAcceptDrops(True)
				self.FilePropertyTab.addTab(self.DetailInfoTab, '')
				self.FilePropertyTab.setTabText(self.FilePropertyTab.indexOf(self.DetailInfoTab), '詳細')
		self.FilePropertyTab.setTabText(self.FilePropertyTab.indexOf(self.GeneralTab), '全般')
		self.CheckOkButton = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel, Qt.Horizontal, self)
		self.CheckOkButton.rejected.connect(self.reject)
		self.CheckOkButton.accepted.connect(self.accept)
		self.CheckOkButton.setStyleSheet('QDialogButtonBox{background: #2d2d2d;color: #ededed;} QPushButton{background: #2d2d2d;color: #ededed;}')
		self.FilePropertyTab.setCurrentIndex(0)
		self.PropertyLayouts = QGridLayout()
		self.PropertyLayouts.addWidget(self.FilePropertyTab)
		self.PropertyLayouts.addWidget(self.CheckOkButton)
		self.setLayout(self.PropertyLayouts)
		self.LoadMetadata()

	def LoadMetadata(self):
		if len(self.FilePathList) == 1:
			self.setWindowTitle('{}のプロパティ'.format(self.FilePathList[0].split('/')[-1]))
			FolderFilePath = QFileInfo(self.FilePathList[0])
			self.setWindowIcon(QFileIconProvider().icon(FolderFilePath).pixmap(QSize(16, 16)))
			if platform.system() == 'Windows':
				self.PreviewIcon.setPixmap(QFileIconProvider().icon(FolderFilePath).pixmap(QSize(64, 64)).scaled(64, 64, Qt.KeepAspectRatio, Qt.SmoothTransformation))
			else:
				self.PreviewIcon.setPixmap(QFileIconProvider().icon(FolderFilePath).pixmap(QSize(57, 57)))
			self.FileName.setText(FolderFilePath.fileName())
			if FolderFilePath.isFile():
				self.FileType.setText('{}ファイル (.{})'.format(FolderFilePath.suffix().upper(), FolderFilePath.suffix().lower()))
				if self.FileType.text() == 'ファイル (.)':
					self.FileType.setText('ファイル')
			else:
				self.FileType.setText('ファイルフォルダ')
			self.FilePath.setText(FolderFilePath.path())
			FileFolderSize = '{}GB'.format(str(round(FolderFilePath.size() / 1073741824, 2)))
			if FileFolderSize[0:2] == '0.':
				FileFolderSize = '{}MB'.format(str(round(FolderFilePath.size() / 1048576, 2)))
				if FileFolderSize[0:2] == '0.':
					FileFolderSize = '{}KB'.format(str(round(FolderFilePath.size() / 1024, 2)))
					if FileFolderSize[0:2] == '0.':
						FileFolderSize = '{}B'.format(str(round(FolderFilePath.size(), 2)))
						if FileFolderSize[0:2] == '0.':
							FileFolderSize = '不明なサイズ'
			self.FileSize.setText(FileFolderSize)
			try:
				if platform.system() == 'Windows':
					if not datetime.datetime.fromtimestamp(os.stat(self.FilePathList[0]).st_ctime).strftime('%Y年%m月%d日 %I:%M:%S') == '':
						self.FileCreateDay.setText(datetime.datetime.fromtimestamp(os.stat(self.FilePathList[0]).st_ctime).strftime('%Y年%m月%d日 %I:%M:%S'))
					else:
						self.FileCreateDay.setText('不明')
				else:
					if not datetime.datetime.fromtimestamp(os.stat(self.FilePathList[0]).st_birthtime).strftime('%Y年%m月%d日 %I:%M:%S') == '':
						self.FileCreateDay.setText(datetime.datetime.fromtimestamp(os.stat(self.FilePathList[0]).st_birthtime).strftime('%Y年%m月%d日 %I:%M:%S'))
					else:
						self.FileCreateDay.setText('不明')
			except:
				pass
			try:
				if not datetime.datetime.fromtimestamp(os.stat(self.FilePathList[0]).st_mtime).strftime('%Y年%m月%d日 %I:%M:%S') == '':
					self.FileModifiedTime.setText(datetime.datetime.fromtimestamp(os.stat(self.FilePathList[0]).st_mtime).strftime('%Y年%m月%d日 %I:%M:%S'))
				else:
					self.FileModifiedTime.setText('不明')
			except:
				pass
			try:
				if not datetime.datetime.fromtimestamp(os.stat(self.FilePathList[0]).st_atime).strftime('%Y年%m月%d日 %I:%M:%S') == '':
					self.LastAccessTime.setText(datetime.datetime.fromtimestamp(os.stat(self.FilePathList[0]).st_atime).strftime('%Y年%m月%d日 %I:%M:%S'))
				else:
					self.LastAccessTime.setText('不明')
			except:
				pass
			if self.FilePathList[0].lower().endswith('.flac'):
				try:
					self.TrackName.setText(mutagen.flac.FLAC(self.FilePathList[0])['title'][0])
				except:
					pass
				try:
					self.TrackArtist.setText(mutagen.flac.FLAC(self.FilePathList[0])['artist'][0])
				except:
					pass
				try:
					self.TrackAlbumArtist.setText(mutagen.flac.FLAC(self.FilePathList[0])['albumartist'][0])
				except:
					pass
				try:
					self.TrackAlbum.setText(mutagen.flac.FLAC(self.FilePathList[0])['album'][0])
				except:
					pass
				try:
					self.TrackGenre.setText(mutagen.flac.FLAC(self.FilePathList[0])['genre'][0])
				except:
					pass
				try:
					self.TrackYear.setText(mutagen.flac.FLAC(self.FilePathList[0])['date'][0])
				except:
					pass
				try:
					self.TrackNum.setText(mutagen.flac.FLAC(self.FilePathList[0])['tracknumber'][0])
				except:
					pass
				try:
					self.TrackDiscNum.setText('{} / {}'.format(mutagen.flac.FLAC(self.FilePathList[0])['discnumber'][0], mutagen.flac.FLAC(self.FilePathList[0])['disctotal'][0]))
				except:
					pass
				try:
					self.TrackArt.setPixmap(QPixmap().fromImage(QImage.fromData(mutagen.flac.FLAC(self.FilePathList[0]).pictures[0].data)).scaled(100, 100, Qt.KeepAspectRatio))
				except:
					pass
			if self.FilePathList[0].lower().endswith('.m4a'):
				try:
					self.TrackName.setText(mutagen.mp4.MP4(self.FilePathList[0])['\xa9nam'][0])
				except:
					pass
				try:
					self.TrackArtist.setText(mutagen.mp4.MP4(self.FilePathList[0])['\xa9ART'][0])
				except:
					pass
				try:
					self.TrackAlbumArtist.setText(mutagen.mp4.MP4(self.FilePathList[0])['aART'][0])
				except:
					pass
				try:
					self.TrackAlbum.setText(mutagen.mp4.MP4(self.FilePathList[0])['\xa9alb'][0])
				except:
					pass
				try:
					self.TrackGenre.setText(mutagen.mp4.MP4(self.FilePathList[0])['\xa9gen'][0])
				except:
					pass
				try:
					self.TrackYear.setText(mutagen.mp4.MP4(self.FilePathList[0])['\xa9day'][0])
				except:
					pass
				try:
					TrackNum, TotalTrackNum = mutagen.mp4.MP4(self.FilePathList[0])['trkn'][0]
					self.TrackNum.setText('{} / {}'.format(str(TrackNum), str(TotalTrackNum)))
				except:
					pass
				try:
					DiscNum, TotalDisc = mutagen.mp4.MP4(self.FilePathList[0])['disk'][0]
					self.TrackDiscNum.setText('{} / {}'.format(DiscNum, TotalDisc))
				except:
					pass
				try:
					self.TrackArt.setPixmap(QPixmap().fromImage(QImage.fromData(mutagen.mp4.MP4(self.FilePathList[0])['covr'][0])).scaled(100, 100, Qt.KeepAspectRatio))
				except:
					pass
			if self.FilePathList[0].lower().endswith('.mp3'):
				try:
					self.TrackName.setText(EasyID3(self.FilePathList[0])['title'][0])
				except:
					pass
				try:
					self.TrackArtist.setText(EasyID3(self.FilePathList[0])['artist'][0])
				except:
					pass
				try:
					self.TrackAlbumArtist.setText(EasyID3(self.FilePathList[0])['albumartist'][0])
				except:
					pass
				try:
					self.TrackAlbum.setText(EasyID3(self.FilePathList[0])['album'][0])
				except:
					pass
				try:
					self.TrackGenre.setText(EasyID3(self.FilePathList[0])['genre'][0])
				except:
					pass
				try:
					self.TrackYear.setText(EasyID3(self.FilePathList[0])['date'][0])
				except:
					pass
				try:
					TrackNum, TotalTrackNum = EasyID3(self.FilePathList[0])['tracknumber'][0]
					self.TrackNum.setText('{} / {}'.format(str(TrackNum), str(TotalTrackNum)))
				except:
					pass
				try:
					DiscNum, TotalDisc = EasyID3(self.FilePathList[0])['discnumber'][0]
					self.TrackDiscNum.setText('{} / {}'.format(DiscNum, TotalDisc))
				except:
					pass
				try:
					self.TrackArt.setPixmap(QPixmap().fromImage(QImage.fromData(mutagen.mp3.MP3(self.FilePathList[0])['APIC:'].data).scaled(100, 100, Qt.KeepAspectRatio)))
				except:
					pass
		elif 2 <= len(self.FilePathList):
			self.setWindowTitle('{}, ...のプロパティ'.format(self.FilePathList[0].split('/')[-1]))
			self.FilePath.setText(list(set([QFileInfo(FilesPath).path() for FilesPath in self.FilePathList]))[0])
			FileFolderSize = '{}GB'.format(str(round(sum(QFileInfo(FilesSize).size() for FilesSize in self.FilePathList) / 1073741824, 2)))
			if FileFolderSize[0:2] == '0.':
				FileFolderSize = '{}MB'.format(str(round(sum(QFileInfo(FilesSize).size() for FilesSize in self.FilePathList) / 1048576, 2)))
				if FileFolderSize[0:2] == '0.':
					FileFolderSize = '{}KB'.format(str(round(sum(QFileInfo(FilesSize).size() for FilesSize in self.FilePathList) / 1024, 2)))
					if FileFolderSize[0:2] == '0.':
						FileFolderSize = '{}B'.format(str(round(sum(QFileInfo(FilesSize).size() for FilesSize in self.FilePathList), 2)))
						if FileFolderSize[0:2] == '0.':
							FileFolderSize = '不明なサイズ'
			self.FileSize.setText(FileFolderSize)
		self.FilesCount = 0
		self.FoldersCount = 0
		self.Files[0:] = []
		self.Folders[0:] = []

class EditCoverArtLabel(QLabel):
	def __init__(self, parent):
		super(EditCoverArtLabel, self).__init__(parent)
		self.setFixedSize(100, 100)
		self.setToolTip('<html><head/><body><p>アルバムカバー</p></body></html>')
		self.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
		self.setContextMenuPolicy(Qt.CustomContextMenu)

	def CopyImage(self):
		with open('{}.jpg'.format('.'.join(EditFilePath[0].split('.')[0:-1])), 'wb') as CoverImage:
			if EditFilePath[0].lower().endswith('.flac'):
				CoverImage.write(mutagen.flac.FLAC(EditFilePath[0]).pictures[0].data)
			if EditFilePath[0].lower().endswith('.m4a'):
				CoverImage.write(mutagen.mp4.MP4(EditFilePath[0])['covr'][0])
			if EditFilePath[0].lower().endswith('.mp3'):
				CoverImage.write(mutagen.mp3.MP3(EditFilePath[0])['APIC:'].data)

	def mousePressEvent(self, event):
		self.CopyMenu = QMenu()
		self.CopyMenu.setStyleSheet('QMenu{background: #2d2d2d;color: #ededed;}'
									'QMenu::item:selected{background: #af0c00;color: #ededed;}')
		if event.type() == QEvent.MouseButtonPress and event.button() == Qt.RightButton:
			self.CopyMenu.addAction('カバーイメージを保存する', self.CopyImage)
			self.CopyMenu.exec(self.mapToGlobal(event.position().toPoint()))
		else:
			super(EditCoverArtLabel, self).mousePressEvent(event)

	def dragEnterEvent(self, event): # output
		if event.mimeData().hasUrls():
			event.accept()

	def dragMoveEvent(self, event):
		if event.mimeData().hasUrls():
			event.setDropAction(Qt.MoveAction)
			event.accept()
		else:
			event.ignore()

	def dropEvent(self, event):
		if event.mimeData().hasUrls():
			event.setDropAction(Qt.CopyAction)
			event.setAccepted(True)
			event.accept()
			DropedCheck[0] = '1'
			for setCover in event.mimeData().urls():
				if os.path.isfile(str(setCover.toLocalFile())):
					DropedCoverImage[0] = open(str(setCover.toLocalFile()), 'rb').read()
					try:
						self.setPixmap(QPixmap(str(setCover.toLocalFile())).scaled(self.width(), self.height(), Qt.KeepAspectRatio, Qt.SmoothTransformation))
					except:
						pass

class iconprovide(QFileIconProvider):
	def __init__(self):
		super(iconprovide, self).__init__()
		self.loader = QPixmapCache()

	def icon(self, fileInfo):
		AcceptFileType = ('.svg', '.jpg', '.jpeg', '.png', '.bmp', '.gif', '.rgb', '.tiff', '.xbm', '.pbm', '.pgm', '.ppm')
		try:
			if fileInfo.isFile():
				if fileInfo.filePath().lower().endswith(AcceptFileType):
					return LoadThread.submit(self.LoadImage, fileInfo.filePath()).result()
				if fileInfo.filePath().lower().endswith('.flac'):
					return QIcon(self.LoadFLAC(fileInfo.filePath()))
				if fileInfo.filePath().lower().endswith('.m4a'):
					return QIcon(self.LoadM4A(fileInfo.filePath()))
				if fileInfo.filePath().lower().endswith('.mp3'):
					return QIcon(self.LoadMP3(fileInfo.filePath()))
			return QFileIconProvider.icon(self, fileInfo)
		except:
			return QFileIconProvider.icon(self, fileInfo)

	def LoadImage(self, path):
		try:
			img = QPixmap(QSize(64, 64))
			img.load(path)
			self.loader.insert('image:{}'.format(path), img)
			self.loader.setCacheLimit(100)
			return QIcon(img.scaled(64, 64))
		except Exception as E:
			print(E)
			pass

	def LoadFLAC(self, path):
		return QPixmap(QSize(64, 64)).fromImage(QImage.fromData(mutagen.flac.FLAC(path).pictures[0].data))

	def LoadMP3(self, path):
		return QPixmap(QSize(64, 64)).fromImage(QImage.fromData(mutagen.mp3.MP3(path)['APIC:'].data))

	def LoadM4A(self, path):
		return QPixmap(QSize(64, 64)).fromImage(QImage.fromData(mutagen.mp4.MP4(path)['covr'][0]))

class FileSystemListView(QListView):
	def __init__(self, parent, model=QFileSystemModel()):
		super().__init__(parent)
		self.Model = model
		self.setModel(self.Model)
		self.Model.setIconProvider(iconprovide())
		self.Model.setRootPath(os.path.expanduser("~"))
		try:
			self.setRootIndex(self.Model.index(os.path.expanduser("~")))
		except:
			self.setRootIndex(self.Model.index(os.path.expanduser("~")))
		self.setGeometry(QRect(276, 80, 545, 526))
		font1 = QFont()
		font1.setPointSize(50)
		self.setAutoScroll(False)
		self.setSelectionMode(QAbstractItemView.ExtendedSelection)
		self.setViewMode(QListView.ListMode)
		self.setIconSize(QSize(45, 45))
		self.setEditTriggers(QAbstractItemView.SelectedClicked)
		self.setContextMenuPolicy(Qt.CustomContextMenu)

	def index(self, path, column=0):
		return self.Model.index(path, column)

	def sort(self, column, order):
		self.Model.sort(column, order)

	def filePath(self, index):
		return self.Model.filePath(index)

	def rootPath(self):
		return self.Model.rootPath()

	def setRootPath(self, path):
		self.Model.setRootPath(path)

	def mousePressEvent(self, event):
		if not NowRootDirectoryPath[0] == '':
			self.RootPath = NowRootDirectoryPath[0]
		else:
			self.RootPath = os.path.expanduser('~')
		self.OutSideMenu = QMenu()
		self.OutSideMenu.setStyleSheet('QMenu{background: #2d2d2d;color: #ededed;} QMenu::item:selected{background: #af0c00;color: #ededed;}')
		self.OutSideMenu.setMaximumHeight(480)
		if event.type() == QEvent.MouseButtonPress:
			if event.button() == Qt.RightButton:
				try:
					for LoopIndex, FileFolderIndex in enumerate(self.selectedIndexes()):
						if os.path.isfile(self.filePath(FileFolderIndex)) and not os.path.islink(self.filePath(FileFolderIndex)) and LoopIndex == 0:
							self.OutSideMenu.addAction('ファイルを開く', self.OutSideOpenFile)
							self.OutSideMenu.addAction('名前の変更', self.OutSideRenames)
						if not os.path.isfile(self.filePath(FileFolderIndex)) and not os.path.islink(self.filePath(FileFolderIndex)) and LoopIndex == 0:
							self.OutSideMenu.addAction('名前の変更', self.OutSideRenames)
							self.OutSideMenu.addAction('フォルダを開く', self.OutSideOpenFile)
						if os.path.isfile(self.filePath(FileFolderIndex)) and not os.path.islink(self.filePath(FileFolderIndex)) and LoopIndex == 0:
							if event.modifiers() == Qt.ShiftModifier:
								self.OutSideMenu.addAction('完全削除', self.OutSideForceDeleting)
							else:
								self.OutSideMenu.addAction('削除', self.OutSideDeleting)
							self.OutSideMenu.addAction('コピー', self.OutSideCopyFile)
							self.OutSideMenu.addAction('移動', self.OutSideCopyFile)
						if os.path.isfile(self.filePath(FileFolderIndex)) and LoopIndex == 0 and self.filePath(FileFolderIndex).endswith('.zip') or self.filePath(FileFolderIndex).endswith('.tar.gz') or self.filePath(FileFolderIndex).endswith('.7z'):
							self.OutSideMenu.addAction('解凍', self.OutSideUnArchive)
						if not os.path.isfile(self.filePath(FileFolderIndex)) and not os.path.islink(self.filePath(FileFolderIndex)) and LoopIndex == 0:
							if event.modifiers() == Qt.ShiftModifier:
								self.OutSideMenu.addAction('完全削除', self.OutSideForceDeleting)
							else:
								self.OutSideMenu.addAction('削除', self.OutSideDeleting)
							self.OutSideMenu.addAction('フォルダのコピー', self.OutSideCopyFile)
							self.OutSideMenu.addAction('フォルダの移動', self.OutSideCopyFile)
					try:
						if os.path.isfile(self.filePath(self.selectedIndexes()[0])) or os.path.isdir(self.filePath(self.selectedIndexes()[0])):
							self.SendMenu = self.OutSideMenu.addMenu('送る')
							self.SendMenu.setStyleSheet('QMenu{background: #2d2d2d;color: #ededed;} QMenu::item:selected{background: #af0c00;color: #ededed;}')
							self.SendMenu.addAction('圧縮', self.OutSideArchiveCreate)
					except:
						pass
					self.OutSideMenu.addAction('現在の場所を開く', self.OutSideNowOpenFolder)
					self.OutSideMenu.addAction('現在のフォルダパスをコピー', self.OutSideCopiedPath)
					self.OutSideMenu.addAction('フォルダの新規作成', self.OutSideCreateFolder)
					self.OutSideMenu.addAction('新しいファイルを作成', self.OutSideCreateNewFile)
					if not CopiedItems[0] == '':
						self.OutSideMenu.addAction('ここにファイルをコピー', self.OutSideCopiedFiles)
						self.OutSideMenu.addAction('ここにファイルを移動', self.OutSideMovedFile)
					self.OutSideMenu.addAction('プロパティを見る', self.OutSidePropaty)
					self.OutSideMenu.exec(self.mapToGlobal(event.position().toPoint()))
				except:
					pass
				super(FileSystemListView, self).mousePressEvent(event)
			else:
				super(FileSystemListView, self).mousePressEvent(event)
		else:
			SelectedItem[0] = '0'
			super(FileSystemListView, self).mousePressEvent(event)

	def OutSidePropaty(self):
		for p in self.selectedIndexes():
			EditFilePath.append(self.filePath(p))
		if len(self.selectedIndexes()) == 0:
			EditFilePath.append(self.rootPath())
		PropertyDiaLog = EditMusicTagDailog(EditFilePath)
		PropertyDiaLog.exec()
		if PropertyDiaLog.result() == QDialog.Accepted:
			if len(EditFilePath) == 1:
				if EditFilePath[0].lower().endswith('.flac'):
					FlacData = mutagen.flac.FLAC(EditFilePath[0])
					try:
						FlacData.tags['title'] = PropertyDiaLog.TrackName.text()
					except:
						pass
					try:
						FlacData.tags['artist'] = PropertyDiaLog.TrackArtist.text()
					except:
						pass
					try:
						FlacData.tags['albumartist'] = PropertyDiaLog.TrackAlbumArtist.text()
					except:
						pass
					try:
						FlacData.tags['album'] = PropertyDiaLog.TrackAlbum.text()
					except:
						pass
					try:
						FlacData.tags['genre'] = PropertyDiaLog.TrackGenre.text()
					except:
						pass
					try:
						FlacData.tags['date'] = PropertyDiaLog.TrackYear.text()
					except:
						pass
					try:
						FlacData.tags['tracknumber'] = PropertyDiaLog.TrackNum.text()
					except:
						pass
					try:
						if PropertyDiaLog.TrackDiscNum.text() == '':
							FlacData.tags['discnumber'] = '0'
						elif not ' / ' in PropertyDiaLog.TrackDiscNum.text():
							if not '/' in PropertyDiaLog.TrackDiscNum.text():
								FlacData.tags['discnumber'] = [('0', PropertyDiaLog.TrackDiscNum.text())]
							else:
								FlacData.tags['discnumber'] = [(PropertyDiaLog.TrackDiscNum.text().split('/')[0], PropertyDiaLog.TrackDiscNum.text().split()[1])]
						else:
							FlacData.tags['discnumber'] = [(PropertyDiaLog.TrackDiscNum.text().split(' / ')[0], PropertyDiaLog.TrackDiscNum.text().split(' / ')[1])]
					except:
						pass
					try:
						cover_picture = mutagen.flac.Picture()
						cover_picture.data = bytes(DropedCoverImage[0])
						FlacData.clear_pictures()
						FlacData.add_picture(cover_picture)
					except:
						pass
					FlacData.save()
				if EditFilePath[0].lower().endswith('.m4a'):
					M4AData = mutagen.mp4.MP4(EditFilePath[0])
					try:
						M4AData.tags['\xa9nam'] = PropertyDiaLog.TrackName.text()
					except:
						pass
					try:
						M4AData.tags['\xa9ART'] = PropertyDiaLog.TrackArtist.text()
					except:
						pass
					try:
						M4AData.tags['aART'] = PropertyDiaLog.TrackAlbumArtist.text()
					except:
						pass
					try:
						M4AData.tags['\xa9alb'] = PropertyDiaLog.TrackAlbum.text()
					except:
						pass
					try:
						M4AData.tags['\xa9gen'] = PropertyDiaLog.TrackGenre.text()
					except:
						pass
					try:
						M4AData.tags['\xa9day'] = PropertyDiaLog.TrackYear.text()
					except:
						pass
					try:
						if PropertyDiaLog.TrackNum.text() == '':
							M4AData.tags['trkn'] = [(0, 0)]
						elif not ' / ' in PropertyDiaLog.TrackNum.text():
							if not '/' in PropertyDiaLog.TrackNum.text():
								M4AData.tags['trkn'] = [(0, int(PropertyDiaLog.TrackNum.text()))]
							else:
								M4AData.tags['trkn'] = [(int(PropertyDiaLog.TrackNum.text().split('/')[0]), int(PropertyDiaLog.TrackNum.text().split()[1]))]
						else:
							M4AData.tags['trkn'] = [(int(PropertyDiaLog.TrackNum.text().split(' / ')[0]), int(PropertyDiaLog.TrackNum.text().split(' / ')[1]))]
					except:
						pass
					try:
						if PropertyDiaLog.TrackDiscNum.text() == '':
							M4AData.tags['disk'] = [(0, 0)]
						elif not ' / ' in PropertyDiaLog.TrackDiscNum.text():
							if not '/' in PropertyDiaLog.TrackDiscNum.text():
								M4AData.tags['disk'] = [(0, PropertyDiaLog.TrackDiscNum.text())]
							else:
								M4AData.tags['disk'] = [(int(PropertyDiaLog.TrackDiscNum.text().split('/')[0]), int(PropertyDiaLog.TrackDiscNum.text().split()[1]))]
						else:
							M4AData.tags['disk'] = [(int(PropertyDiaLog.TrackDiscNum.text().split(' / ')[0]), int(PropertyDiaLog.TrackDiscNum.text().split(' / ')[1]))]
					except:
						pass
					try:
						M4AData.tags['covr'] = [bytes(DropedCoverImage[0])]
					except:
						pass
					M4AData.save()
				if EditFilePath[0].lower().endswith('.mp3'):
					MP3Data = EasyID3(EditFilePath[0])
					setCoverMP3 = mutagen.id3.ID3(EditFilePath[0])
					try:
						MP3Data['title'] = PropertyDiaLog.TrackName.text()
					except:
						pass
					try:
						MP3Data['artist'] = PropertyDiaLog.TrackArtist.text()
					except:
						pass
					try:
						MP3Data['albumartist'] = PropertyDiaLog.TrackAlbumArtist.text()
					except:
						pass
					try:
						MP3Data['album'] = PropertyDiaLog.TrackAlbum.text()
					except:
						pass
					try:
						MP3Data['genre'] = PropertyDiaLog.TrackGenre.text()
					except:
						pass
					try:
						MP3Data['data'] = PropertyDiaLog.TrackYear.text()
					except:
						pass
					try:
						if PropertyDiaLog.TrackNum.text() == '':
							MP3Data['tracknumber'] = [(0, 0)]
						elif not ' / ' in PropertyDiaLog.TrackNum.text():
							if not '/' in PropertyDiaLog.TrackNum.text():
								MP3Data['tracknumber'] = [(0, int(PropertyDiaLog.TrackNum.text()))]
							else:
								MP3Data['tracknumber'] = [(int(PropertyDiaLog.TrackNum.text().split('/')[0]), int(PropertyDiaLog.TrackNum.text().split()[1]))]
						else:
							MP3Data['tracknumber'] = [(int(PropertyDiaLog.TrackNum.text().split(' / ')[0]), int(PropertyDiaLog.TrackNum.text().split(' / ')[1]))]
					except:
						pass
					try:
						if PropertyDiaLog.TrackDiscNum.text() == '':
							MP3Data['discnumber'] = [(0, 0)]
						elif not ' / ' in PropertyDiaLog.TrackDiscNum.text():
							if not '/' in PropertyDiaLog.TrackDiscNum.text():
								MP3Data['discnumber'] = [(0, int(PropertyDiaLog.TrackDiscNum.text()))]
							else:
								MP3Data['discnumber'] = [(int(PropertyDiaLog.TrackDiscNum.text().split('/')[0]), int(PropertyDiaLog.TrackDiscNum.text().split()[1]))]
						else:
							MP3Data['discnumber'] = [(int(PropertyDiaLog.TrackDiscNum.text().split(' / ')[0]), int(PropertyDiaLog.TrackDiscNum.text().split(' / ')[1]))]
					except:
						pass
					try:
						setCoverMP3['APIC:'].data = bytes(DropedCoverImage[0])
					except:
						pass
					MP3Data.save()
					setCoverMP3.save()
			elif 2 <= len(EditFilePath):
				if not len(EditMediaPath_FLAC) == 0:
					for FlacFilePath in EditMediaPath_FLAC:
						FLACData = mutagen.flac.FLAC(FlacFilePath)
						if not PropertyDiaLog.TrackName.text() == '(複数の値)':
							try:
								FLACData.tags['title'] = PropertyDiaLog.TrackName.text()
							except:
								pass
						if not PropertyDiaLog.TrackArtist.text() == '(複数の値)':
							try:
								FLACData.tags['artist'] = PropertyDiaLog.TrackArtist.text()
							except:
								pass
						if not PropertyDiaLog.TrackAlbumArtist.text() == '(複数の値)':
							try:
								FLACData.tags['albumartist'] = PropertyDiaLog.TrackAlbumArtist.text()
							except:
								pass
						if not PropertyDiaLog.TrackAlbum.text() == '(複数の値)':
							try:
								FLACData.tags['album'] = PropertyDiaLog.TrackAlbum.text()
							except:
								pass
						if not PropertyDiaLog.TrackGenre.text() == '(複数の値)':
							try:
								FLACData.tags['genre'] = PropertyDiaLog.TrackGenre.text()
							except:
								pass
						if not PropertyDiaLog.TrackYear.text() == '(複数の値)':
							try:
								FLACData.tags['date'] = PropertyDiaLog.TrackYear.text()
							except:
								pass
						if not PropertyDiaLog.TrackNum.text() == '(複数の値)':
							try:
								FLACData.tags['tracknumber'] = PropertyDiaLog.TrackNum.text()
							except:
								pass
						if DropedCheck[0] == '1':
							try:
								cover_picture = mutagen.flac.Picture()
								cover_picture.data = bytes(DropedCoverImage[0])
								FLACData.clear_pictures()
								FLACData.add_picture(cover_picture)
							except:
								pass
							pass
						FLACData.save()
				if not len(EditMediaPath_M4A) == 0:
					for M4AFilePath in EditMediaPath_M4A:
						M4AData = mutagen.mp4.MP4(M4AFilePath)
						if not PropertyDiaLog.TrackName.text() == '(複数の値)':
							try:
								M4AData.tags['\xa9nam'] = PropertyDiaLog.TrackName.text()
							except:
								pass
						if not PropertyDiaLog.TrackArtist.text() == '(複数の値)':
							try:
								M4AData.tags['\xa9ART'] = PropertyDiaLog.TrackArtist.text()
							except:
								pass
						if not PropertyDiaLog.TrackAlbumArtist.text() == '(複数の値)':
							try:
								M4AData.tags['aART'] = PropertyDiaLog.TrackAlbumArtist.text()
							except:
								pass
						if not PropertyDiaLog.TrackAlbum.text() == '(複数の値)':
							try:
								M4AData.tags['\xa9alb'] = PropertyDiaLog.TrackAlbum.text()
							except:
								pass
						if not PropertyDiaLog.TrackGenre.text() == '(複数の値)':
							try:
								M4AData.tags['\xa9gen'] = PropertyDiaLog.TrackGenre.text()
							except:
								pass
						if not PropertyDiaLog.TrackYear.text() == '(複数の値)':
							try:
								M4AData.tags['\xa9day'] = PropertyDiaLog.TrackYear.text()
							except:
								pass
						if not PropertyDiaLog.TrackNum.text() == '(複数の値)':
							try:
								if PropertyDiaLog.TrackNum.text() == '':
									M4AData.tags['trkn'] = [(0, 0)]
								elif not ' / ' in PropertyDiaLog.TrackNum.text():
									if not '/' in PropertyDiaLog.TrackNum.text():
										M4AData.tags['trkn'] = [(0, int(PropertyDiaLog.TrackNum.text()))]
									else:
										M4AData.tags['trkn'] = [(int(PropertyDiaLog.TrackNum.text().split('/')[0]),
																 int(PropertyDiaLog.TrackNum.text().split()[1]))]
								else:
									M4AData.tags['trkn'] = [(int(PropertyDiaLog.TrackNum.text().split(' / ')[0]),
															 int(PropertyDiaLog.TrackNum.text().split(' / ')[1]))]
							except:
								pass
						if not PropertyDiaLog.TrackDiscNum.text() == '(複数の値)':
							try:
								if PropertyDiaLog.TrackDiscNum.text() == '':
									M4AData.tags['disk'] = [(0, 0)]
								elif not ' / ' in PropertyDiaLog.TrackDiscNum.text():
									if not '/' in PropertyDiaLog.TrackDiscNum.text():
										M4AData.tags['disk'] = [(0, PropertyDiaLog.TrackDiscNum.text())]
									else:
										M4AData.tags['disk'] = [(int(PropertyDiaLog.TrackDiscNum.text().split('/')[0]),
																 int(PropertyDiaLog.TrackDiscNum.text().split()[1]))]
								else:
									M4AData.tags['disk'] = [(int(PropertyDiaLog.TrackDiscNum.text().split(' / ')[0]),
															 int(PropertyDiaLog.TrackDiscNum.text().split(' / ')[1]))]
							except:
								pass
						if DropedCheck[0] == '1':
							try:
								M4AData.tags['covr'] = [bytes(DropedCoverImage[0])]
							except:
								pass
						M4AData.save()
				if not len(EditMediaPath_MP3) == 0:
					for MP3FilePath in EditMediaPath_MP3:
						MP3Data = EasyID3(MP3FilePath)
						setCoverMP3 = mutagen.id3.ID3(MP3FilePath)
						if not PropertyDiaLog.TrackName.text() == '(複数の値)':
							try:
								MP3Data['title'] = PropertyDiaLog.TrackName.text()
							except:
								pass
						if not PropertyDiaLog.TrackArtist.text() == '(複数の値)':
							try:
								MP3Data['artist'] = PropertyDiaLog.TrackArtist.text()
							except:
								pass
						if not PropertyDiaLog.TrackAlbumArtist.text() == '(複数の値)':
							try:
								MP3Data['albumartist'] = PropertyDiaLog.TrackAlbumArtist.text()
							except:
								pass
						if not PropertyDiaLog.TrackAlbum.text()  == '(複数の値)':
							try:
								MP3Data['album'] = PropertyDiaLog.TrackAlbum.text()
							except:
								pass
						if not PropertyDiaLog.TrackGenre.text() == '(複数の値)':
							try:
								MP3Data['genre'] = PropertyDiaLog.TrackGenre.text()
							except:
								pass
						if not PropertyDiaLog.TrackYear.text() == '(複数の値)':
							try:
								MP3Data['data'] = PropertyDiaLog.TrackYear.text()
							except:
								pass
						if not PropertyDiaLog.TrackNum.text() == '(複数の値)':
							try:
								if PropertyDiaLog.TrackNum.text() == '':
									MP3Data['tracknumber'] = [(0, 0)]
								elif not ' / ' in PropertyDiaLog.TrackNum.text():
									if not '/' in PropertyDiaLog.TrackNum.text():
										MP3Data['tracknumber'] = [(0, int(PropertyDiaLog.TrackNum.text()))]
									else:
										MP3Data['tracknumber'] = [(int(PropertyDiaLog.TrackNum.text().split('/')[0]),
																   int(PropertyDiaLog.TrackNum.text().split()[1]))]
								else:
									MP3Data['tracknumber'] = [(int(PropertyDiaLog.TrackNum.text().split(' / ')[0]),
															   int(PropertyDiaLog.TrackNum.text().split(' / ')[1]))]
							except:
								pass
						if not PropertyDiaLog.TrackDiscNum.text() == '(複数の値)':
							try:
								if PropertyDiaLog.TrackDiscNum.text() == '':
									MP3Data['discnumber'] = [(0, 0)]
								elif not ' / ' in PropertyDiaLog.TrackDiscNum.text():
									if not '/' in PropertyDiaLog.TrackDiscNum.text():
										MP3Data['discnumber'] = [(0, int(PropertyDiaLog.TrackDiscNum.text()))]
									else:
										MP3Data['discnumber'] = [(int(PropertyDiaLog.TrackDiscNum.text().split('/')[0]),
																  int(PropertyDiaLog.TrackDiscNum.text().split()[1]))]
								else:
									MP3Data['discnumber'] = [(int(PropertyDiaLog.TrackDiscNum.text().split(' / ')[0]),
															  int(PropertyDiaLog.TrackDiscNum.text().split(' / ')[1]))]
							except:
								pass
						if DropedCheck[0] == '1':
							try:
								setCoverMP3['APIC:'].data = bytes(DropedCoverImage[0])
							except:
								pass
						MP3Data.save()
						setCoverMP3.save()
		DropedCheck[0] = '0'
		EditFilePath[0:] = []

	def OutSideCopiedPath(self):
		QApplication.clipboard().setText(self.rootPath())

	def OutSideForceDeleting(self):
		Result = ForceDeletingOKDialog.OutPutResult()
		try:
			if Result == '0':
				for ForceRemove in self.selectedIndexes():
					if os.path.isfile(self.filePath(ForceRemove)):
						os.remove(self.filePath(ForceRemove))
					else:
						shutil.rmtree(self.filePath(ForceRemove))
		except:
			pass

	def OutSideDeleting(self):
		Result = DeletingOKDialog.OutPutResult()
		try:
			if Result == '0':
				for RemoveItem in self.selectedIndexes():
					send2trash.send2trash(self.filePath(RemoveItem))
		except:
			pass

	def OutSideRenames(self):
		SelectedItemPath[0] = self.filePath(self.selectedIndexes()[0]).split('/')[-1]
		Result = InputDiaLog.OutputResult()
		if Result[1] == '0':
			if not Result[0] == '':
				if not Result[0] == ' ':
					text = Result[0]
					oldname = self.filePath(self.selectedIndexes()[0])
					newName = '{}{}'.format(oldname.split(oldname.split('/')[-1])[0], text)
					try:
						os.rename(oldname, newName)
					except:
						pass

	def OutSideOpenFile(self):
		for SelectedIndex in self.selectedIndexes():
			QDesktopServices.openUrl('file:///{}'.format(self.filePath(SelectedIndex)))

	def OutSideNowOpenFolder(self):
		if not NowRootDirectoryPath[0] == '':
			self.RootPath = NowRootDirectoryPath[0]
		else:
			self.RootPath = os.path.expanduser('~')
		QDesktopServices.openUrl('file:///{}'.format(self.RootPath))

	def OutSideCreateFolder(self):
		if not NowRootDirectoryPath[0] == '':
			self.RootPath = NowRootDirectoryPath[0]
		else:
			self.RootPath = os.path.expanduser('~')
		Result = NewCreateFolderDialog.OutputResult()
		if Result[1] == '0':
			if not Result[0] == '':
				if not Result[0] == ' ':
					try:
						os.mkdir('{}{}{}'.format(self.RootPath, '/', Result[0]))
					except:
						for c in range(9999):
							try:
								os.mkdir('{}{}{} ({})'.format(self.RootPath, '/', Result[0], c))
								break
							except:
								pass

	def OutSideCreateNewFile(self):
		if not NowRootDirectoryPath[0] == '':
			self.RootPath = NowRootDirectoryPath[0]
		else:
			self.RootPath = os.path.expanduser('~')
		Results = NewFileCreateDialog.OutputResults()
		if Results[1] == '0':
			if not Results[0] == '':
				if not Results[0] == ' ':
					with open('{}{}{}'.format(self.RootPath, '/', Results[0]), 'w', encoding='utf-8') as NewFile:
						NewFile.write('')

	def OutSideMovedFile(self):
		if not NowRootDirectoryPath[0] == '':
			self.RootPath = NowRootDirectoryPath[0]
		else:
			self.RootPath = os.path.expanduser('~')
		if CopiedItemCount[0] == len(CopiedItems[0]):
			for MoveItem in CopiedItems[0]:
				try:
					shutil.move(MoveItem, self.RootPath)
				except:
					pass

	def OutSideCopyFile(self):
		CopiedItems[0] = [self.filePath(countItem) for countItem in self.selectedIndexes()]
		CopiedItemCount[0] = len(self.selectedIndexes())

	def OutSideCopiedFiles(self):
		if not NowRootDirectoryPath[0] == '':
			self.RootPath = NowRootDirectoryPath[0]
		else:
			self.RootPath = os.path.expanduser('~')
		if CopiedItemCount[0] == len(CopiedItems[0]):
			for CopiedItem in CopiedItems[0]:
				newPath = '{}{}{}'.format(self.RootPath, '/', CopiedItem.split('/')[-1])
				if not QFile.exists(newPath):
					if os.path.isfile(CopiedItem):
						shutil.copyfile(CopiedItem, newPath)
					elif os.path.isdir(CopiedItem) and not os.path.islink(CopiedItem):
						shutil.copytree(CopiedItem, newPath)
				else:
					for cc in range(9999):
						if not QFile.exists('{} ({}).{}'.format('.'.join(newPath.split('.')[0:-1]), cc+1, newPath.split('.')[-1])):
							if os.path.isfile(CopiedItem):
								shutil.copyfile(CopiedItem, '{} ({}).{}'.format('.'.join(newPath.split('.')[0:-1]), cc+1, newPath.split('.')[-1]))
							elif os.path.isdir(CopiedItem) and not os.path.islink(CopiedItem):
								shutil.copytree(CopiedItem, '{} ({}).{}'.format('.'.join(newPath.split('.')[0:-1]), cc+1, newPath.split('.')[-1]))
							break
						else:
							pass

	def OutSideArchiveCreate(self):
		BackupNowPath[0] = os.getcwd()
		Result = ArchiveDialog.OutPutResult()
		FileName = Result[0]
		mode = Result[1]
		CheckOK = Result[2]
		if not CheckOK == '':
			if mode == 'ZipArchive':
				os.chdir(self.rootPath())
				with zipfile.ZipFile(FileName, 'w') as ZF:
					for ArchiveDFile in self.selectedIndexes():
						if os.path.isfile(self.filePath(ArchiveDFile)):
							ZF.write(self.filePath(ArchiveDFile).split('/')[-1])
						elif os.path.isdir(self.filePath(ArchiveDFile)):
							for TargetFolder, __, TargetFile in os.walk(self.filePath(ArchiveDFile)):
								for TFile in TargetFile:
									if not TFile.startswith('.'):
										FilePaths = os.path.join(TargetFolder, TFile).replace(os.getcwd().replace(os.sep, '/'), os.curdir)
										ZF.write(FilePaths)
				os.chdir(BackupNowPath[0])
			if mode == 'TarArchive':
				os.chdir(self.rootPath())
				with tarfile.open(FileName, 'w:gz') as Tgz:
					for TarAddFiles in self.selectedIndexes():
						Tgz.add(self.filePath(TarAddFiles).replace(os.getcwd().replace(os.sep, '/'), os.curdir))
				os.chdir(BackupNowPath[0])
			if mode == '7ZipArchive':
				os.chdir(self.rootPath())
				with py7zr.SevenZipFile(FileName, 'w') as SevenZipper:
					for SevenFilesIndex in self.selectedIndexes():
						SevenZipper.writeall(self.filePath(SevenFilesIndex).replace(os.getcwd().replace(os.sep, '/'), os.curdir))
				os.chdir(BackupNowPath[0])

	def is_within_directory(self, directory, target):
		abs_directory = os.path.abspath(directory)
		abs_target = os.path.abspath(target)
		prefix = os.path.commonprefix([abs_directory, abs_target])
		return prefix == abs_directory

	def safe_extract(self, tars, path='.', members=None, numeric_owner=False):
		for member in tars.getmembers():
			member_path = os.path.join(path, member.name)
			if not self.is_within_directory(path, member_path):
				raise Exception("Attempted Path Traversal in Tar File")
		tars.extractall(path=path, members=members, numeric_owner=numeric_owner)

	def OutSideUnArchive(self):
		BackupNowPath[0] = os.getcwd()
		os.chdir(self.rootPath())
		for DetectFile in self.selectedIndexes():
			if self.filePath(DetectFile).endswith('.zip'):
				os.makedirs(self.filePath(DetectFile).replace(os.getcwd(), os.curdir).split('.zip')[0], exist_ok=True)
				with zipfile.ZipFile(self.filePath(DetectFile), 'r') as ExtractZip:
					ExtractZip.extractall(path='{}{}{}'.format(os.getcwd(), '/', self.filePath(DetectFile).split(os.getcwd().replace(os.sep, '/'))[-1].split('.zip')[0]))
			if self.filePath(DetectFile).endswith('.tar.gz'):
				os.makedirs(self.filePath(DetectFile).replace(os.getcwd(), os.curdir).split('.tar.gz')[0], exist_ok=True)
				with tarfile.open(self.filePath(DetectFile), 'r') as ExtractTgz:
					self.safe_extract(ExtractTgz, path='{}{}{}'.format(os.getcwd(), '/', self.filePath(DetectFile).split(os.getcwd().replace(os.sep, '/'))[-1].split('.tar.gz')[0]))
			if self.filePath(DetectFile).endswith('.7z'):
				os.makedirs(self.filePath(DetectFile).replace(os.getcwd(), os.curdir).split('.7z')[0], exist_ok=True)
				with py7zr.SevenZipFile(self.filePath(DetectFile), 'r') as ExtractSevenZip:
					ExtractSevenZip.extractall(path='{}{}{}'.format(os.getcwd(), '/', self.filePath(DetectFile).split(os.getcwd().replace(os.sep, '/'))[-1].split('.7z')[0]))
		os.chdir(BackupNowPath[0])

	def dragEnterEvent(self, event):
		if event.mimeData().hasUrls():
			event.accept()
			for ff in event.mimeData().urls():
				newpath = '{}{}{}'.format(self.rootPath(), '/', str(ff.toLocalFile()).split('/')[-1])
				try:
					if os.path.isfile(str(ff.toLocalFile())):
							shutil.move(str(ff.toLocalFile()), newpath)
					else:
						shutil.move(str(ff.toLocalFile()), newpath)
				except:
					pass
		else:
			event.ignore()

	def dragMoveEvent(self, event):
		if event.mimeData().hasUrls():
			event.setDropAction(Qt.CopyAction)
			event.accept()
		else:
			event.ignore()

	def dropEvent(self, event):
		if event.mimeData().hasUrls():
			event.setDropAction(Qt.CopyAction)
			event.setAccepted(True)
			event.accept()
			for c in event.mimeData().urls():
				newpath = '{}{}{}'.format(self.rootPath(), '/', str(c.toLocalFile()).split('/')[-1])
				try:
					if os.path.isfile(str(c.toLocalFile())):
							shutil.move(str(c.toLocalFile()), newpath)
					else:
						shutil.move(str(c.toLocalFile()), newpath)
				except:
					pass
		else:
			event.ignore()

class ArchiveDialog(QDialog):
	def __init__(self):
		super(ArchiveDialog, self).__init__()
		self.setStyleSheet('QDialog{background: #2d2d2d;color: #ededed;}')
		self.setWindowTitle('圧縮ファイルの作成')
		self.setFixedSize(500, 130)
		self.NoneLabel = QLabel('\t', self)
		self.NoneLabel2 = QLabel('\t\t\t\t\t\t', self)
		self.NoneLabel3 = QLabel('\t', self)
		self.ArchiveLabel1 = QLabel('圧縮ファイル名: ', self)
		self.ArchiveLabel1.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
		self.ArchiveInput = QLineEdit()
		self.ArchiveInput.setText('Archive.zip')
		self.ArchiveInput.setStyleSheet('QLineEdit{background: #2d2d2d;color: #ededed;border 0px;}')
		self.ArchiveInput.setClearButtonEnabled(True)
		self.ArchiveType1 = QCheckBox()
		self.ArchiveType1.setStyleSheet('QCheckBox{background: #2d2d2d;color: #ededed;}')
		self.ArchiveType1.setChecked(True)
		self.ArchiveType1.setText('.zip')
		self.ArchiveType1.setStyleSheet('QCheckBox{background: #2d2d2d;color: #ededed;}')
		self.ArchiveType2 = QCheckBox()
		self.ArchiveType2.setChecked(False)
		self.ArchiveType2.setText('.tar.gz')
		self.ArchiveType2.setStyleSheet('QCheckBox{background: #2d2d2d;color: #ededed;}')
		self.ArchiveType3 = QCheckBox()
		self.ArchiveType3.setChecked(False)
		self.ArchiveType3.setText('.7z')
		self.ArchiveType3.setStyleSheet('QCheckBox{background: #2d2d2d;color: #ededed;}')
		self.selectorButton = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel, Qt.Horizontal, self)
		self.selectorButton.rejected.connect(self.reject)
		self.selectorButton.accepted.connect(self.accept)
		self.selectorButton.setStyleSheet('QDialogButtonBox{background: #2d2d2d;color: #ededed;} QPushButton{background: #2d2d2d;color: #ededed;}')
		self.Popup = QGridLayout() # row = 縦, column = 横
		self.Popup.addWidget(self.ArchiveLabel1, 0, 0)
		self.Popup.addWidget(self.ArchiveInput, 0, 1)
		self.Popup.addWidget(self.ArchiveType1, 1, 0)
		self.Popup.addWidget(self.ArchiveType2, 1, 1)
		self.Popup.addWidget(self.ArchiveType3, 1, 2)
		self.Popup.addWidget(self.selectorButton, 1, 4)
		self.Popup.addWidget(self.NoneLabel, 2, 0)
		self.Popup.addWidget(self.NoneLabel2, 2, 1)
		self.Popup.addWidget(self.NoneLabel3, 2, 2)
		self.setLayout(self.Popup)
		self.ArchiveType1.stateChanged.connect(self.CheckModes)
		self.ArchiveType2.stateChanged.connect(self.CheckModes)
		self.ArchiveType3.stateChanged.connect(self.CheckModes)

	def CheckModes(self):
		try:
			if self.ArchiveType1.checkState() == Qt.Unchecked and OneChecked[0] == '1':
				self.ArchiveType1.setCheckState(Qt.Checked)
			if self.ArchiveType2.checkState() == Qt.Unchecked and OneChecked2[0] == '1':
				self.ArchiveType2.setCheckState(Qt.Checked)
			if self.ArchiveType3.checkState() == Qt.Unchecked and OneChecked3[0] == '1':
				self.ArchiveType3.setCheckState(Qt.Checked)
			if self.ArchiveType1.checkState() == Qt.Checked and OneChecked2[0] == '1':
				self.ArchiveType2.setCheckState(Qt.Unchecked)
				OneChecked2[0] = '0'
				OneChecked[0] = '1'
			if self.ArchiveType1.checkState() == Qt.Checked and OneChecked3[0] == '1':
				self.ArchiveType3.setCheckState(Qt.Unchecked)
				OneChecked3[0] = '0'
				OneChecked[0] = '1'
			if self.ArchiveType2.checkState() == Qt.Checked and OneChecked[0] == '1':
				self.ArchiveType1.setCheckState(Qt.Unchecked)
				OneChecked[0] = '0'
				OneChecked2[0] = '1'
			if self.ArchiveType3.checkState() == Qt.Checked and OneChecked[0] == '1':
				self.ArchiveType1.setCheckState(Qt.Unchecked)
				OneChecked[0] = '0'
				OneChecked3[0] = '1'
			if self.ArchiveType1.checkState() == Qt.Checked and OneChecked2[0] == '1':
				self.ArchiveType2.setCheckState(Qt.Unchecked)
				OneChecked2[0] = '0'
				OneChecked[0] = '1'
			if self.ArchiveType3.checkState() == Qt.Checked and OneChecked2[0] == '1':
				self.ArchiveType2.setCheckState(Qt.Unchecked)
				OneChecked2[0] = '0'
				OneChecked3[0] = '1'
			if self.ArchiveType1.checkState() == Qt.Checked and OneChecked3[0] == '1':
				self.ArchiveType3.setCheckState(Qt.Unchecked)
				OneChecked3[0] = '0'
				OneChecked[0] = '1'
			if self.ArchiveType2.checkState() == Qt.Checked and OneChecked3[0] == '1':
				self.ArchiveType3.setCheckState(Qt.Unchecked)
				OneChecked3[0] = '0'
				OneChecked[0] = '1'
			if self.ArchiveType3.checkState() == Qt.Checked:
				if not self.ArchiveInput.text() == '':
					self.ArchiveInput.setText(self.ArchiveInput.text().replace(self.ArchiveInput.text().split('.')[-1], '7z').replace('.tar', ''))
				else:
					self.ArchiveInput.setText('Archive.7z')
				OneChecked3[0] = '1'
			if self.ArchiveType2.checkState() == Qt.Checked:
				if not self.ArchiveInput.text() == '':
					if self.ArchiveInput.text().split('.')[-1] == 'zip' or self.ArchiveInput.text().split('.')[-1] == '7z':
						self.ArchiveInput.setText(self.ArchiveInput.text().replace(self.ArchiveInput.text().split('.')[-1], 'tar.gz').replace('.tar.tar', ''))
				else:
					self.ArchiveInput.setText('Archive.tar.gz')
				OneChecked2[0] = '1'
			if self.ArchiveType1.checkState() == Qt.Checked:
				if not self.ArchiveInput.text() == '':
					self.ArchiveInput.setText(self.ArchiveInput.text().replace(self.ArchiveInput.text().split('.')[-1], 'zip').replace('.tar', ''))
				else:
					self.ArchiveInput.setText('Archive.zip')
				OneChecked[0] = '1'
		except:
			pass

	def InputResult(self):
		return self.ArchiveInput.text()

	def ModeCheck(self):
		if self.ArchiveType1.checkState() == Qt.Checked:
			return 'ZipArchive'
		elif self.ArchiveType2.checkState() == Qt.Checked:
			return 'TarArchive'
		elif self.ArchiveType3.checkState() == Qt.Checked:
			return '7ZipArchive'

	@staticmethod
	def OutPutResult():
		Ac = ArchiveDialog()
		Ac.exec()
		inputFileName = Ac.InputResult()
		mode = Ac.ModeCheck()
		if Ac.result() == QDialog.Accepted:
			return inputFileName, mode, '0'
		elif Ac.result() == QDialog.Rejected:
			return '', '', ''

class SearchWindow(QWidget):
	def __init__(self, parent=None, model=None):
		super(SearchWindow, self).__init__(parent)
		self.w = QDialog(parent)
		self.w.resize(QSize(1000, 700))
		self.w.setFixedSize(QSize(1000, 700))
		self.w.setWindowTitle('検索結果')
		self.w.setStyleSheet('QDialog{background: #2d2d2d;color: #ededed;}')
		self.ListView = QListView()
		self.ListView.setStyleSheet('QListView{background: #2d2d2d;color: #ededed;}')
		self.ListView.setGeometry(QRect(-1, -1, 800, 638))
		self.ListView.setEditTriggers(QAbstractItemView.NoEditTriggers)
		self.ListView.setContextMenuPolicy(Qt.CustomContextMenu)
		self.ListView.customContextMenuRequested.connect(self.CopyOnlyMenu)
		self.Model = model
		self.ListView.setModel(self.Model)
		self.ListView.doubleClicked.connect(self.mouseDoubleClicked)
		self.LayOut = QGridLayout()
		self.LayOut.addWidget(self.ListView, 0, 0)
		self.w.setLayout(self.LayOut)

	def CopyOnlyMenu(self, Point):
		self.CopyMenu = QMenu()
		self.CopyMenu.setStyleSheet('QMenu{background: #2d2d2d;color: #ededed;} QMenu::item:selected{background: #af0c00;color: #ededed;}')
		self.CopyMenu.addAction('場所のコピー', self.CopyPath)
		self.CopyMenu.addAction('プロパティ', self.PropertyMenu)
		self.CopyMenu.exec(self.ListView.mapToGlobal(Point))

	def PropertyMenu(self):
		for p in self.ListView.selectedIndexes():
			EditFilePath.append(p.data())
		if len(self.ListView.selectedIndexes()) == 0:
			EditFilePath.append(NowRootDirectoryPath[0])
		PropertyDiaLog = EditMusicTagDailog(EditFilePath)
		PropertyDiaLog.exec()
		if PropertyDiaLog.result() == QDialog.Accepted:
			if len(EditFilePath) == 1:
				if EditFilePath[0].lower().endswith('.flac'):
					FlacData = mutagen.flac.FLAC(EditFilePath[0])
					try:
						FlacData.tags['title'] = PropertyDiaLog.TrackName.text()
					except:
						pass
					try:
						FlacData.tags['artist'] = PropertyDiaLog.TrackArtist.text()
					except:
						pass
					try:
						FlacData.tags['albumartist'] = PropertyDiaLog.TrackAlbumArtist.text()
					except:
						pass
					try:
						FlacData.tags['album'] = PropertyDiaLog.TrackAlbum.text()
					except:
						pass
					try:
						FlacData.tags['genre'] = PropertyDiaLog.TrackGenre.text()
					except:
						pass
					try:
						FlacData.tags['date'] = PropertyDiaLog.TrackYear.text()
					except:
						pass
					try:
						FlacData.tags['tracknumber'] = PropertyDiaLog.TrackNum.text()
					except:
						pass
					try:
						if PropertyDiaLog.TrackDiscNum.text() == '':
							FlacData.tags['discnumber'] = '0'
						elif not ' / ' in PropertyDiaLog.TrackDiscNum.text():
							if not '/' in PropertyDiaLog.TrackDiscNum.text():
								FlacData.tags['discnumber'] = [('0', PropertyDiaLog.TrackDiscNum.text())]
							else:
								FlacData.tags['discnumber'] = [(PropertyDiaLog.TrackDiscNum.text().split('/')[0], PropertyDiaLog.TrackDiscNum.text().split()[1])]
						else:
							FlacData.tags['discnumber'] = [(PropertyDiaLog.TrackDiscNum.text().split(' / ')[0], PropertyDiaLog.TrackDiscNum.text().split(' / ')[1])]
					except:
						pass
					try:
						cover_picture = mutagen.flac.Picture()
						cover_picture.data = bytes(DropedCoverImage[0])
						FlacData.clear_pictures()
						FlacData.add_picture(cover_picture)
					except:
						pass
					FlacData.save()
				if EditFilePath[0].lower().endswith('.m4a'):
					M4AData = mutagen.mp4.MP4(EditFilePath[0])
					try:
						M4AData.tags['\xa9nam'] = PropertyDiaLog.TrackName.text()
					except:
						pass
					try:
						M4AData.tags['\xa9ART'] = PropertyDiaLog.TrackArtist.text()
					except:
						pass
					try:
						M4AData.tags['aART'] = PropertyDiaLog.TrackAlbumArtist.text()
					except:
						pass
					try:
						M4AData.tags['\xa9alb'] = PropertyDiaLog.TrackAlbum.text()
					except:
						pass
					try:
						M4AData.tags['\xa9gen'] = PropertyDiaLog.TrackGenre.text()
					except:
						pass
					try:
						M4AData.tags['\xa9day'] = PropertyDiaLog.TrackYear.text()
					except:
						pass
					try:
						if PropertyDiaLog.TrackNum.text() == '':
							M4AData.tags['trkn'] = [(0, 0)]
						elif not ' / ' in PropertyDiaLog.TrackNum.text():
							if not '/' in PropertyDiaLog.TrackNum.text():
								M4AData.tags['trkn'] = [(0, int(PropertyDiaLog.TrackNum.text()))]
							else:
								M4AData.tags['trkn'] = [(int(PropertyDiaLog.TrackNum.text().split('/')[0]), int(PropertyDiaLog.TrackNum.text().split()[1]))]
						else:
							M4AData.tags['trkn'] = [(int(PropertyDiaLog.TrackNum.text().split(' / ')[0]), int(PropertyDiaLog.TrackNum.text().split(' / ')[1]))]
					except:
						pass
					try:
						if PropertyDiaLog.TrackDiscNum.text() == '':
							M4AData.tags['disk'] = [(0, 0)]
						elif not ' / ' in PropertyDiaLog.TrackDiscNum.text():
							if not '/' in PropertyDiaLog.TrackDiscNum.text():
								M4AData.tags['disk'] = [(0, PropertyDiaLog.TrackDiscNum.text())]
							else:
								M4AData.tags['disk'] = [(int(PropertyDiaLog.TrackDiscNum.text().split('/')[0]), int(PropertyDiaLog.TrackDiscNum.text().split()[1]))]
						else:
							M4AData.tags['disk'] = [(int(PropertyDiaLog.TrackDiscNum.text().split(' / ')[0]), int(PropertyDiaLog.TrackDiscNum.text().split(' / ')[1]))]
					except:
						pass
					try:
						M4AData.tags['covr'] = [bytes(DropedCoverImage[0])]
					except:
						pass
					M4AData.save()
				if EditFilePath[0].lower().endswith('.mp3'):
					MP3Data = EasyID3(EditFilePath[0])
					setCoverMP3 = mutagen.id3.ID3(EditFilePath[0])
					try:
						MP3Data['title'] = PropertyDiaLog.TrackName.text()
					except:
						pass
					try:
						MP3Data['artist'] = PropertyDiaLog.TrackArtist.text()
					except:
						pass
					try:
						MP3Data['albumartist'] = PropertyDiaLog.TrackAlbumArtist.text()
					except:
						pass
					try:
						MP3Data['album'] = PropertyDiaLog.TrackAlbum.text()
					except:
						pass
					try:
						MP3Data['genre'] = PropertyDiaLog.TrackGenre.text()
					except:
						pass
					try:
						MP3Data['data'] = PropertyDiaLog.TrackYear.text()
					except:
						pass
					try:
						if PropertyDiaLog.TrackNum.text() == '':
							MP3Data['tracknumber'] = [(0, 0)]
						elif not ' / ' in PropertyDiaLog.TrackNum.text():
							if not '/' in PropertyDiaLog.TrackNum.text():
								MP3Data['tracknumber'] = [(0, int(PropertyDiaLog.TrackNum.text()))]
							else:
								MP3Data['tracknumber'] = [(int(PropertyDiaLog.TrackNum.text().split('/')[0]), int(PropertyDiaLog.TrackNum.text().split()[1]))]
						else:
							MP3Data['tracknumber'] = [(int(PropertyDiaLog.TrackNum.text().split(' / ')[0]), int(PropertyDiaLog.TrackNum.text().split(' / ')[1]))]
					except:
						pass
					try:
						if PropertyDiaLog.TrackDiscNum.text() == '':
							MP3Data['discnumber'] = [(0, 0)]
						elif not ' / ' in PropertyDiaLog.TrackDiscNum.text():
							if not '/' in PropertyDiaLog.TrackDiscNum.text():
								MP3Data['discnumber'] = [(0, int(PropertyDiaLog.TrackDiscNum.text()))]
							else:
								MP3Data['discnumber'] = [(int(PropertyDiaLog.TrackDiscNum.text().split('/')[0]), int(PropertyDiaLog.TrackDiscNum.text().split()[1]))]
						else:
							MP3Data['discnumber'] = [(int(PropertyDiaLog.TrackDiscNum.text().split(' / ')[0]), int(PropertyDiaLog.TrackDiscNum.text().split(' / ')[1]))]
					except:
						pass
					try:
						setCoverMP3['APIC:'].data = bytes(DropedCoverImage[0])
					except:
						pass
					MP3Data.save()
					setCoverMP3.save()
			elif 2 <= len(EditFilePath):
				if not len(EditMediaPath_FLAC) == 0:
					for FlacFilePath in EditMediaPath_FLAC:
						FLACData = mutagen.flac.FLAC(FlacFilePath)
						if not PropertyDiaLog.TrackName.text() == '(複数の値)':
							try:
								FLACData.tags['title'] = PropertyDiaLog.TrackName.text()
							except:
								pass
						if not PropertyDiaLog.TrackArtist.text() == '(複数の値)':
							try:
								FLACData.tags['artist'] = PropertyDiaLog.TrackArtist.text()
							except:
								pass
						if not PropertyDiaLog.TrackAlbumArtist.text() == '(複数の値)':
							try:
								FLACData.tags['albumartist'] = PropertyDiaLog.TrackAlbumArtist.text()
							except:
								pass
						if not PropertyDiaLog.TrackAlbum.text() == '(複数の値)':
							try:
								FLACData.tags['album'] = PropertyDiaLog.TrackAlbum.text()
							except:
								pass
						if not PropertyDiaLog.TrackGenre.text() == '(複数の値)':
							try:
								FLACData.tags['genre'] = PropertyDiaLog.TrackGenre.text()
							except:
								pass
						if not PropertyDiaLog.TrackYear.text() == '(複数の値)':
							try:
								FLACData.tags['date'] = PropertyDiaLog.TrackYear.text()
							except:
								pass
						if not PropertyDiaLog.TrackNum.text() == '(複数の値)':
							try:
								FLACData.tags['tracknumber'] = PropertyDiaLog.TrackNum.text()
							except:
								pass
						if DropedCheck[0] == '1':
							try:
								cover_picture = mutagen.flac.Picture()
								cover_picture.data = bytes(DropedCoverImage[0])
								FLACData.clear_pictures()
								FLACData.add_picture(cover_picture)
							except:
								pass
							pass
						FLACData.save()
				if not len(EditMediaPath_M4A) == 0:
					for M4AFilePath in EditMediaPath_M4A:
						M4AData = mutagen.mp4.MP4(M4AFilePath)
						if not PropertyDiaLog.TrackName.text() == '(複数の値)':
							try:
								M4AData.tags['\xa9nam'] = PropertyDiaLog.TrackName.text()
							except:
								pass
						if not PropertyDiaLog.TrackArtist.text() == '(複数の値)':
							try:
								M4AData.tags['\xa9ART'] = PropertyDiaLog.TrackArtist.text()
							except:
								pass
						if not PropertyDiaLog.TrackAlbumArtist.text() == '(複数の値)':
							try:
								M4AData.tags['aART'] = PropertyDiaLog.TrackAlbumArtist.text()
							except:
								pass
						if not PropertyDiaLog.TrackAlbum.text() == '(複数の値)':
							try:
								M4AData.tags['\xa9alb'] = PropertyDiaLog.TrackAlbum.text()
							except:
								pass
						if not PropertyDiaLog.TrackGenre.text() == '(複数の値)':
							try:
								M4AData.tags['\xa9gen'] = PropertyDiaLog.TrackGenre.text()
							except:
								pass
						if not PropertyDiaLog.TrackYear.text() == '(複数の値)':
							try:
								M4AData.tags['\xa9day'] = PropertyDiaLog.TrackYear.text()
							except:
								pass
						if not PropertyDiaLog.TrackNum.text() == '(複数の値)':
							try:
								if PropertyDiaLog.TrackNum.text() == '':
									M4AData.tags['trkn'] = [(0, 0)]
								elif not ' / ' in PropertyDiaLog.TrackNum.text():
									if not '/' in PropertyDiaLog.TrackNum.text():
										M4AData.tags['trkn'] = [(0, int(PropertyDiaLog.TrackNum.text()))]
									else:
										M4AData.tags['trkn'] = [(int(PropertyDiaLog.TrackNum.text().split('/')[0]), int(PropertyDiaLog.TrackNum.text().split()[1]))]
								else:
									M4AData.tags['trkn'] = [(int(PropertyDiaLog.TrackNum.text().split(' / ')[0]), int(PropertyDiaLog.TrackNum.text().split(' / ')[1]))]
							except:
								pass
						if not PropertyDiaLog.TrackDiscNum.text() == '(複数の値)':
							try:
								if PropertyDiaLog.TrackDiscNum.text() == '':
									M4AData.tags['disk'] = [(0, 0)]
								elif not ' / ' in PropertyDiaLog.TrackDiscNum.text():
									if not '/' in PropertyDiaLog.TrackDiscNum.text():
										M4AData.tags['disk'] = [(0, PropertyDiaLog.TrackDiscNum.text())]
									else:
										M4AData.tags['disk'] = [(int(PropertyDiaLog.TrackDiscNum.text().split('/')[0]), int(PropertyDiaLog.TrackDiscNum.text().split()[1]))]
								else:
									M4AData.tags['disk'] = [(int(PropertyDiaLog.TrackDiscNum.text().split(' / ')[0]), int(PropertyDiaLog.TrackDiscNum.text().split(' / ')[1]))]
							except:
								pass
						if DropedCheck[0] == '1':
							try:
								M4AData.tags['covr'] = [bytes(DropedCoverImage[0])]
							except:
								pass
						M4AData.save()
				if not len(EditMediaPath_MP3) == 0:
					for MP3FilePath in EditMediaPath_MP3:
						MP3Data = EasyID3(MP3FilePath)
						setCoverMP3 = mutagen.id3.ID3(MP3FilePath)
						if not PropertyDiaLog.TrackName.text() == '(複数の値)':
							try:
								MP3Data['title'] = PropertyDiaLog.TrackName.text()
							except:
								pass
						if not PropertyDiaLog.TrackArtist.text() == '(複数の値)':
							try:
								MP3Data['artist'] = PropertyDiaLog.TrackArtist.text()
							except:
								pass
						if not PropertyDiaLog.TrackAlbumArtist.text() == '(複数の値)':
							try:
								MP3Data['albumartist'] = PropertyDiaLog.TrackAlbumArtist.text()
							except:
								pass
						if not PropertyDiaLog.TrackAlbum.text()  == '(複数の値)':
							try:
								MP3Data['album'] = PropertyDiaLog.TrackAlbum.text()
							except:
								pass
						if not PropertyDiaLog.TrackGenre.text() == '(複数の値)':
							try:
								MP3Data['genre'] = PropertyDiaLog.TrackGenre.text()
							except:
								pass
						if not PropertyDiaLog.TrackYear.text() == '(複数の値)':
							try:
								MP3Data['data'] = PropertyDiaLog.TrackYear.text()
							except:
								pass
						if not PropertyDiaLog.TrackNum.text() == '(複数の値)':
							try:
								if PropertyDiaLog.TrackNum.text() == '':
									MP3Data['tracknumber'] = [(0, 0)]
								elif not ' / ' in PropertyDiaLog.TrackNum.text():
									if not '/' in PropertyDiaLog.TrackNum.text():
										MP3Data['tracknumber'] = [(0, int(PropertyDiaLog.TrackNum.text()))]
									else:
										MP3Data['tracknumber'] = [(int(PropertyDiaLog.TrackNum.text().split('/')[0]), int(PropertyDiaLog.TrackNum.text().split()[1]))]
								else:
									MP3Data['tracknumber'] = [(int(PropertyDiaLog.TrackNum.text().split(' / ')[0]), int(PropertyDiaLog.TrackNum.text().split(' / ')[1]))]
							except:
								pass
						if not PropertyDiaLog.TrackDiscNum.text() == '(複数の値)':
							try:
								if PropertyDiaLog.TrackDiscNum.text() == '':
									MP3Data['discnumber'] = [(0, 0)]
								elif not ' / ' in PropertyDiaLog.TrackDiscNum.text():
									if not '/' in PropertyDiaLog.TrackDiscNum.text():
										MP3Data['discnumber'] = [(0, int(PropertyDiaLog.TrackDiscNum.text()))]
									else:
										MP3Data['discnumber'] = [(int(PropertyDiaLog.TrackDiscNum.text().split('/')[0]), int(PropertyDiaLog.TrackDiscNum.text().split()[1]))]
								else:
									MP3Data['discnumber'] = [(int(PropertyDiaLog.TrackDiscNum.text().split(' / ')[0]), int(PropertyDiaLog.TrackDiscNum.text().split(' / ')[1]))]
							except:
								pass
						if DropedCheck[0] == '1':
							try:
								setCoverMP3['APIC:'].data = bytes(DropedCoverImage[0])
							except:
								pass
						MP3Data.save()
						setCoverMP3.save()
		DropedCheck[0] = '0'
		EditFilePath[0:] = []

	def CopyPath(self):
		QApplication.clipboard().setText(self.ListView.selectedIndexes()[0].data())

	def mouseDoubleClicked(self):
		QDesktopServices.openUrl('file:///{}'.format(self.ListView.selectedIndexes()[0].data()))

	def show(self):
		self.w.exec()

class MainWindowwView(QMainWindow):
	fileDropped = Signal(list)
	def __init__(self, parent=None):
		super(MainWindowwView, self).__init__(parent)
		self.setAcceptDrops(True)
		self.setWindowIcon(QIcon(QPixmap(QSize(512, 512)).fromImage(QImage.fromData(QByteArray.fromBase64(b'')))))

	def closeEvent(self, event):
		OutOfThread0.exit(0)
		super(MainWindowwView, self).closeEvent(event)

	def dragEnterEvent(self, event):
		if event.mimeData().hasUrls():
			event.accept()
			for ff in event.mimeData().urls():
				newpath = '{}{}{}'.format(PathListory[0], '/', str(ff.toLocalFile()).split('/')[-1])
				try:
					if os.path.isfile(str(ff.toLocalFile())):
							shutil.move(str(ff.toLocalFile()), newpath)
					else:
						shutil.move(str(ff.toLocalFile()), newpath)
				except:
					pass
		else:
			event.ignore()

	def dragMoveEvent(self, event):
		if event.mimeData().hasUrls():
			event.setDropAction(Qt.CopyAction)
			event.accept()
		else:
			event.ignore()

	def dropEvent(self, event):
		if event.mimeData().hasUrls():
			event.setDropAction(Qt.CopyAction)
			event.setAccepted(True)
			event.accept()
			for c in event.mimeData().urls():
				newpath = '{}{}{}'.format(PathListory[0], '/', str(c.toLocalFile()).split('/')[-1])
				try:
					if os.path.isfile(str(c.toLocalFile())):
							shutil.move(str(c.toLocalFile()), newpath)
					else:
						shutil.move(str(c.toLocalFile()), newpath)
				except:
					pass
		else:
			event.ignore()

	def setLocation(self): # 右下に配置
		AvailableWindow = QGuiApplication.primaryScreen().availableGeometry()
		ScreenGeometoryWindow = QGuiApplication.primaryScreen().geometry()
		widget = self.geometry()
		x = AvailableWindow.width() - widget.width()
		y = 2 * AvailableWindow.height() - ScreenGeometoryWindow.height() - widget.height()
		self.move(x, y)

	def setLocation2(self): # 左上に配置
		AvailableWindow = QGuiApplication.primaryScreen().availableGeometry()
		ScreenGeometoryWindow = QGuiApplication.primaryScreen().geometry()
		widget = self.geometry()
		x = AvailableWindow.width() - ScreenGeometoryWindow.width()
		y = 2 * AvailableWindow.height() - ScreenGeometoryWindow.height() - 2 * widget.height()
		self.move(x, y)

class DeletingOKDialog(QDialog):
	def __init__(self):
		super(DeletingOKDialog, self).__init__()
		self.setStyleSheet('QDialog{background: #2d2d2d;color: #ededed;}')
		self.setWindowTitle('削除の確認')
		self.setFixedSize(200, 100)
		self.Label1 = QLabel('本当に削除しますか？', self)
		self.Label1.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
		self.selectorButton = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel, Qt.Horizontal, self)
		self.selectorButton.accepted.connect(self.accept)
		self.selectorButton.rejected.connect(self.reject)
		self.selectorButton.setStyleSheet('QDialogButtonBox{background: #2d2d2d;color: #ededed;} QPushButton{background: #2d2d2d;color: #ededed;}')
		self.Popup = QGridLayout()
		self.Popup.addWidget(self.Label1, 0, 0, Qt.AlignCenter)
		self.Popup.addWidget(self.selectorButton, 1, 0, Qt.AlignCenter)
		self.setLayout(self.Popup)

	@staticmethod
	def OutPutResult():
		d = DeletingOKDialog()
		d.exec()
		if d.result() == QDialog.Accepted:
			return '0'
		elif d.result() == QDialog.Rejected:
			return '1'

class ForceDeletingOKDialog(QDialog):
	def __init__(self):
		super(ForceDeletingOKDialog, self).__init__()
		self.setStyleSheet('QDialog{background: #2d2d2d;color: #ededed;}')
		self.setWindowTitle('削除の確認')
		self.setFixedSize(210, 100)
		self.Label1 = QLabel('本当に完全削除しますか？', self)
		self.Label1.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
		self.selectorButton = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel, Qt.Horizontal, self)
		self.selectorButton.accepted.connect(self.accept)
		self.selectorButton.rejected.connect(self.reject)
		self.selectorButton.setStyleSheet('QDialogButtonBox{background: #2d2d2d;color: #ededed;} QPushButton{background: #2d2d2d;color: #ededed;}')
		self.Popup = QGridLayout()
		self.Popup.addWidget(self.Label1, 0, 0, Qt.AlignCenter)
		self.Popup.addWidget(self.selectorButton, 1, 0, Qt.AlignCenter)
		self.setLayout(self.Popup)

	@staticmethod
	def OutPutResult():
		d = ForceDeletingOKDialog()
		d.exec()
		if d.result() == QDialog.Accepted:
			return '0'
		elif d.result() == QDialog.Rejected:
			return '1'

class NewFileCreateDialog(QDialog):
	def __init__(self):
		super(NewFileCreateDialog, self).__init__()
		self.setStyleSheet('QDialog{background: #2d2d2d;color: #ededed;}')
		self.setWindowTitle('新しいファイルの作成')
		self.setFixedSize(300, 100)
		self.Label1 = QLabel('新しいファイルの名前を入れてください', self)
		self.Label1.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
		self.CreateInput1 = QLineEdit()
		self.CreateInput1.setClearButtonEnabled(True)
		self.CreateInput1.setPlaceholderText('ここに新しいファイルの名前を入れてください')
		self.CreateInput1.setStyleSheet('QLineEdit{background: #2d2d2d;color: #ededed;border 0px;}')
		self.selectorButton1 = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel, Qt.Horizontal, self)
		self.selectorButton1.accepted.connect(self.accept)
		self.selectorButton1.rejected.connect(self.reject)
		self.selectorButton1.setStyleSheet('QDialogButtonBox{background: #2d2d2d;color: #ededed;} QPushButton{background: #2d2d2d;color: #ededed;}')
		self.Popup = QGridLayout()
		self.Popup.addWidget(self.Label1, 0, 0)
		self.Popup.addWidget(self.CreateInput1, 1, 0)
		self.Popup.addWidget(self.selectorButton1, 2, 0, Qt.AlignCenter)
		self.setLayout(self.Popup)

	def InputResult(self):
		return self.CreateInput1.text()

	@staticmethod
	def OutputResults():
		r = NewFileCreateDialog()
		r.exec()
		input_result = r.InputResult()
		if r.result() == QDialog.Accepted and r.result() != QDialog.Rejected:
			return input_result, '0'
		else:
			return '', '1'

class NewCreateFolderDialog(QDialog):
	def __init__(self):
		super(NewCreateFolderDialog, self).__init__()
		self.setStyleSheet('QDialog{background: #2d2d2d;color: #ededed;}')
		self.setWindowTitle('新しいフォルダの作成')
		self.setFixedSize(300, 100)
		self.Label = QLabel('新しい名前を入れてください', self)
		self.Label.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
		self.CreateInput = QLineEdit()
		self.CreateInput.setText('新規フォルダ')
		self.CreateInput.setStyleSheet('QLineEdit{background: #2d2d2d;color: #ededed;border 0px;}')
		self.CreateInput.setClearButtonEnabled(True)
		self.CreateInput.setPlaceholderText('ここに新しい名前を入れてください')
		self.selectorButton = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel, Qt.Horizontal, self)
		self.selectorButton.accepted.connect(self.accept)
		self.selectorButton.rejected.connect(self.reject)
		self.selectorButton.setStyleSheet('QDialogButtonBox{background: #2d2d2d;color: #ededed;} QPushButton{background: #2d2d2d;color: #ededed;}')
		self.Popup = QGridLayout()
		self.Popup.addWidget(self.Label, 0, 0)
		self.Popup.addWidget(self.CreateInput, 1, 0)
		self.Popup.addWidget(self.selectorButton, 2, 0, Qt.AlignCenter)
		self.setLayout(self.Popup)

	def InputResult(self):
		return self.CreateInput.text()

	@staticmethod
	def OutputResult():
		r = NewCreateFolderDialog()
		r.exec()
		input_result = r.InputResult()
		if r.result() == QDialog.Accepted and r.result() != QDialog.Rejected:
			return input_result, '0'
		else:
			return '', '1'

class InputDiaLog(QDialog):
	def __init__(self):
		super(InputDiaLog, self).__init__()
		self.setStyleSheet('QDialog{background: #2d2d2d;color: #ededed;}')
		self.setWindowTitle('名前の変更')
		self.setFixedSize(300, 100)
		self.Label = QLabel('新しい名前を入れてください', self)
		self.Label.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
		self.renameInput = QLineEdit()
		self.renameInput.setStyleSheet('QLineEdit{background: #2d2d2d;color: #ededed;border 0px;}')
		self.renameInput.setText(SelectedItemPath[0])
		self.renameInput.setClearButtonEnabled(True)
		self.renameInput.setPlaceholderText('ここに新しい名前を入れてください')
		self.selectorButton = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel, Qt.Horizontal, self)
		self.selectorButton.accepted.connect(self.accept)
		self.selectorButton.rejected.connect(self.reject)
		self.selectorButton.setStyleSheet('QDialogButtonBox{background: #2d2d2d;color: #ededed;} QPushButton{background: #2d2d2d;color: #ededed;}')
		self.Popup = QGridLayout()
		self.Popup.addWidget(self.Label, 0, 0)
		self.Popup.addWidget(self.renameInput, 1, 0)
		self.Popup.addWidget(self.selectorButton, 2, 0, Qt.AlignCenter)
		self.setLayout(self.Popup)

	def InputResult(self):
		return self.renameInput.text()

	@staticmethod
	def OutputResult():
		r = InputDiaLog()
		r.exec()
		input_result = r.InputResult()
		if r.result() == QDialog.Accepted and r.result() != QDialog.Rejected:
			return input_result, '0'
		else:
			return '', '1'

class Ui_FullTools2(object):
	def setupUi(self, FullTools2):
		if not FullTools2.objectName():
			FullTools2.setObjectName("FullTools2")
		FullTools2.resize(1145, 638)
		FullTools2.setStyleSheet('QWidget{background: #292828;color: White;}')
		self.FullTools2 = FullTools2
		self.Tab3 = QTabWidget(FullTools2)
		self.Tab3.setObjectName("Tab3")
		self.Tab3.setGeometry(QRect(0, 10, 1141, 631))
		self.Tab3.setStyleSheet('QWidget{background: #2d2d2d;color: #2d2d2d;} QTabBar::tab{background: #2d2d2d;color: White;border: 2px solid #1a1a1a;}')
		self.tab = QWidget()
		self.tab.setObjectName("tab")
		self.FileFinput = QLineEdit(self.tab)
		self.FileFinput.setObjectName("FileFinput")
		self.FileFinput.setGeometry(QRect(92, 20, 269, 31))
		self.FileFinput.setPlaceholderText('ここにファイル名を入力してください')
		self.FileFinput.setStyleSheet('QLineEdit#FileFinput{color: White;background: #131519;border 0px;}')
		self.FileOption = QCheckBox(self.tab)
		self.FileOption.setObjectName("FileOption")
		self.FileOption.setGeometry(QRect(612, 20, 199, 31))
		self.FileOption.setStyleSheet('QCheckBox#FileOption{color: White;}')
		self.FileTypeOption = QCheckBox(self.tab)
		self.FileTypeOption.setObjectName("FileTypeOption")
		self.FileTypeOption.setGeometry(QRect(392, 20, 219, 31))
		self.FileTypeOption.setStyleSheet('QCheckBox#FileTypeOption{color: White;}')
		self.FileName = QLabel(self.tab)
		self.FileName.setObjectName("FileName")
		self.FileName.setGeometry(QRect(12, 26, 79, 21))
		self.FileName.setStyleSheet('QLabel#FileName{color: White;}')
		self.FileFinput_2 = QLineEdit(self.tab)
		self.FileFinput_2.setObjectName("FileFinput_2")
		self.FileFinput_2.setGeometry(QRect(92, 70, 269, 31))
		self.FileFinput_2.setPlaceholderText('ここに場所を入力します(例: /)')
		self.FileFinput_2.setStyleSheet('QLineEdit#FileFinput_2{color: White;background: #131519;border 0px;}')
		self.FileSystemModel = QFileSystemModel()
		self.FileSystemModel.setRootPath(os.path.expanduser("~"))
		self.FileSystemModel.setNameFilters(['*.app'])
		self.FileSystemModel.setNameFilterDisables(False)
		self.FileSearchInput = QLineEdit(self.tab)
		self.FileSearchInput.textChanged.connect(self.on_TextSearch)
		self.FileSearchInput.setObjectName("FileSearchInput")
		self.FileSearchInput.setGeometry(QRect(0, 130, 331, 35))
		self.FileSearchInput.setPlaceholderText('ここにフォルダ名を入力して検索できます')
		self.FileSearchInput.setStyleSheet('QLineEdit#FileSearchInput {background: #2d2d2d;color: #ededed;border 0px;}')
		self.FolderTree = QTreeView(self.tab)
		self.FolderTree.setEditTriggers(QAbstractItemView.NoEditTriggers)
		self.FolderTree.header().setVisible(False)
		self.FolderTree.setObjectName("FolderTree")
		self.FolderTree.setGeometry(QRect(0, 160, 359, 441))
		self.FolderTree.setModel(self.FileSystemModel)
		try:
			self.FolderTree.setRootIndex(self.FileSystemModel.index(os.path.splitdrive(os.environ['windir'])[0] + '/'))
		except:
			self.FolderTree.setRootIndex(self.FileSystemModel.index('/'))
		self.FolderTree.setStyleSheet('QTreeView#FolderTree{color: White;background: #131519;}')
		self.FolderTree.setColumnWidth(0 ,300)
		self.FolderTree.setColumnHidden(1, True)
		self.FolderTree.setColumnHidden(2, True)
		self.FolderTree.setColumnHidden(3, True)
		self.FolderTree.clicked.connect(self.SelectedItem)
		self.FolderName = QLabel(self.tab)
		self.FolderName.setObjectName("FolderName")
		self.FolderName.setGeometry(QRect(12, 74, 79, 21))
		self.FolderName.setStyleSheet('QLabel#FolderName{color: White;}')
		self.label_2 = QLabel(self.tab)
		self.label_2.setObjectName("label_2")
		self.label_2.setGeometry(QRect(1, 110, 341, 21))
		self.label_2.setStyleSheet('QLabel#label_2{color: White;}')
		self.DebugArea = QPlainTextEdit(self.tab)
		self.DebugArea.setObjectName("DebugArea")
		self.DebugArea.setGeometry(QRect(322, 440, 809, 161))
		self.DebugArea.setReadOnly(True)
		self.DebugArea.setStyleSheet('QPlainTextEdit#DebugArea{color: White;background: #131519;}')
		self.ResultTree = QTreeView(self.tab)
		self.ResultTree.setEditTriggers(QAbstractItemView.NoEditTriggers)
		self.ResultTree.setObjectName("ResultTree")
		self.ResultTree.setGeometry(QRect(322, 130, 809, 312))
		self.ResultTree.setAutoScroll(False)
		self.ResultTree.setColumnWidth(0 ,400)
		self.ResultTree.setHeaderHidden(1)
		self.ResultTree.setStyleSheet('QTreeView#ResultTree {color: #e4e4e4;background: #131519;outline: 0;font-size: 14px;font-weight: 500;text-transform: capitarise;show-decoration-selected: 1;qproperty-indentation: 24;}')
		self.SearchButton = QPushButton(self.tab)
		self.SearchButton.setObjectName("SearchButton")
		self.SearchButton.setGeometry(QRect(402, 67, 239, 41))
		self.SearchButton.setStyleSheet('QPushButton#SearchButton{background: #2d2d2d;color: White;}')
		self.SearchButton.pressed.connect(self.SearchingFile)
		self.ResultDelButton = QPushButton(self.tab)
		self.ResultDelButton.setObjectName("ResultDelButton")
		self.ResultDelButton.setGeometry(QRect(922, 67, 209, 41))
		self.ResultDelButton.pressed.connect(self.ClearDebug)
		self.ResultDelButton.setStyleSheet('QPushButton#ResultDelButton{background: #2d2d2d;color: #FF0000;}')
		self.Tab3.addTab(self.tab, "")
		self.tab_2 = QWidget()
		self.tab_2.setObjectName("tab_2")
		self.resultMOdel = QStandardItemModel()
		self.ResultView2Model = QStandardItemModel()
		self.ResultView2 = QTreeView(self.tab_2)
		self.ResultView2.setEditTriggers(QAbstractItemView.NoEditTriggers)
		self.ResultView2.setObjectName("ResultView2")
		self.ResultView2.setHeaderHidden(1)
		self.ResultView2.setGeometry(QRect(433, 131, 703, 321))
		self.ResultView2.setStyleSheet('QTreeView#ResultView2{color: White;background: #131519;}')
		self.FolderPath = QLineEdit(self.tab_2)
		self.FolderPath.setObjectName("FolderPath")
		self.FolderPath.setGeometry(QRect(140, 60, 335, 31))
		self.FolderPath.setStyleSheet('QLineEdit#FolderPath{color: White;background: #131519;border 0px;}')
		self.FolderPath.setPlaceholderText('ここに検索したい場所を入力してください')
		self.FolderPathLabel = QLabel(self.tab_2)
		self.FolderPathLabel.setObjectName("FolderPathLabel")
		self.FolderPathLabel.setGeometry(QRect(5, 67, 122, 20))
		self.FolderPathLabel.setStyleSheet('QLabel#FolderPathLabel{color: White;}')
		font = QFont()
		font.setPointSize(13)
		self.FolderPathLabel.setFont(font)
		self.BigFileSearchButton = QPushButton(self.tab_2)
		self.BigFileSearchButton.setObjectName("BigFileSearchButton")
		self.BigFileSearchButton.setGeometry(QRect(492, 54, 239, 41))
		self.BigFileSearchButton.pressed.connect(self.BigFileSearching)
		self.BigFileSearchButton.setStyleSheet('QPushButton{background: #2d2d2d;color: #ededed;}')
		self.FileSystemModel2 = QFileSystemModel()
		self.FileSystemModel2.setRootPath(os.path.expanduser("~"))
		self.FileSystemModel2.setNameFilters(['*.app'])
		self.FileSystemModel2.setNameFilterDisables(False)
		self.InputView2 = QTreeView(self.tab_2)
		self.InputView2.setObjectName("InputView2")
		self.InputView2.setGeometry(QRect(1, 170, 440, 431))
		self.InputView2.setModel(self.FileSystemModel2)
		self.InputView2.clicked.connect(self.SelectedItem2)
		try:
			self.InputView2.setRootIndex(self.FileSystemModel2.index(os.path.splitdrive(os.environ['windir'])[0] + '/'))
		except:
			self.InputView2.setRootIndex(self.FileSystemModel2.index('/'))
		self.InputView2.setStyleSheet('QTreeView{color: White;background: #131519;}')
		self.InputView2.header().setVisible(False)
		self.InputView2.setColumnWidth(0, 300)
		self.InputView2.setColumnHidden(1, True)
		self.InputView2.setColumnHidden(2, True)
		self.InputView2.setColumnHidden(3, True)
		self.InputView2.setEditTriggers(QAbstractItemView.NoEditTriggers)
		self.DebugLog2 = QPlainTextEdit(self.tab_2)
		self.DebugLog2.setObjectName("DebugLog2")
		self.DebugLog2.setGeometry(QRect(440, 451, 696, 151))
		self.DebugLog2.setReadOnly(True)
		self.DebugLog2.setStyleSheet('QPlainTextEdit{color: White;background: #131519;}')
		self.ResultDelButton2 = QPushButton(self.tab_2)
		self.ResultDelButton2.setObjectName("ResultDelButton2")
		self.ResultDelButton2.setGeometry(QRect(922, 70, 209, 41))
		self.ResultDelButton2.setStyleSheet('QPushButton{background: #2d2d2d;color: #ededed;}')
		self.ResultDelButton2.pressed.connect(self.ClearDebug2)
		self.Tab3.addTab(self.tab_2, "")
		self.tab_3 = QWidget()
		self.tab_3.setObjectName("tab_3")
		self.SearchInputer = QLineEdit(self.tab_2)
		self.SearchInputer.setObjectName("SearchInputer")
		self.SearchInputer.textChanged.connect(self.on_TextSearch2)
		self.SearchInputer.setGeometry(QRect(1, 130, 442, 42))
		self.SearchInputer.setStyleSheet('QLineEdit{background: #2d2d2d;color: #ededed;border 0px;}')
		self.SearchInputer.setPlaceholderText('ここに検索したいフォルダを入力してください')
		self.FolderSearchLabel2 = QLabel(self.tab_2)
		self.FolderSearchLabel2.setObjectName("FolderSearchLabel2")
		self.FolderSearchLabel2.setGeometry(QRect(12, 110, 439, 21))
		self.FolderSearchLabel2.setStyleSheet("QLabel#FolderSearchLabel2{\n"
"color: White;\n"
"}")
		self.DiskScrollArea = QScrollArea(self.tab_3)
		self.DiskScrollArea.setStyleSheet('QScrollArea QAbstractScrollArea{background: #1a1a1a;color: #1a1a1a;} QScrollArea{background: #292828;color: #ededed;}')
		self.DiskScrollArea.setGeometry(QRect(620, 210, 535, 395))
		self.DiskScrollArea.setWidget(DiskPieWidget())
		self.DiskScrollArea.verticalScrollBar().setDisabled(True)
		self.SystemInfoWidget = SystemInfoWidget(self.tab_3)
		self.SystemInfoWidget.setGeometry(QRect(10, 10, 266, 588))
		self.VevrticalFrame = QLabel(self.tab_3)
		self.VevrticalFrame.setAlignment(Qt.AlignCenter)
		self.VevrticalFrame.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;border:1px solid #ededed;}')
		self.VevrticalFrame.setGeometry(QRect(590, 0, 1, 605))
		self.VevrticalFrame.setMaximumWidth(1)
		self.Clock = pyqtgraph.GraphicsLayoutWidget(self.tab_3, show=True)
		self.Clock.resize(190, 190)
		self.Clock.move(940, 10)
		self.Clock.setBackground(background=(45, 45, 45))
		self.Clock.setRange(QRect(0, 0, 800, 800))
		self.Clock.setContentsMargins(0, 0, 0, 0)
		self.ClockMain = self.Clock.addPlot()
		self.ClockMain.setMenuEnabled(False)
		self.ClockMain.showAxis('bottom', False)
		self.ClockMain.showAxis('left', False)
		self.ClockMain.setAspectLocked(lock=True)
		self.ClockMain.setMouseEnabled(x=False, y=False)
		self.XClockShaft = 1 * numpy.cos(numpy.linspace(0, 2 * numpy.pi, 1000))
		self.YClockShaft = 1 * numpy.sin(numpy.linspace(0, 2 * numpy.pi, 1000))
		self.ClockMain.plot(self.XClockShaft, self.YClockShaft, pen=pyqtgraph.mkPen(width=2, color=(182, 202, 147)))
		for sec in range(60):
			self.line_length = 0.1 if sec % 5 == 0 else 0.03
			self.line_width = 4 if sec % 5 == 0 else 1.5
			self.X1Memory = numpy.sin(numpy.radians(360 * (sec / 60))) * 1
			self.X2Memory = numpy.sin(numpy.radians(360 * (sec / 60))) * (1 - self.line_length)
			self.Y1Memory = numpy.cos(numpy.radians(360 * (sec / 60))) * 1
			self.Y2Memory = numpy.cos(numpy.radians(360 * (sec / 60))) * (1 - self.line_length)
			self.ClockPen = pyqtgraph.mkPen(width=self.line_width, color=(182, 202, 147))
			self.ClockPen.setCapStyle(Qt.RoundCap)
			self.ClockMain.plot([self.X1Memory, self.X2Memory], [self.Y1Memory, self.Y2Memory], pen=self.ClockPen)
		self.HourTexts = []
		for Hour in range(1, 13, 1):
			self.XShaft = numpy.sin(numpy.radians(360 * (Hour / 12))) * 1 * 0.8
			self.YShaft = numpy.cos(numpy.radians(360 * (Hour / 12))) * 1 * 0.8
			self.ClockHourText = pyqtgraph.TextItem(text=str(Hour), anchor=(0.5, 0.5), color=(182, 202, 147))
			self.ClockHourText.setPos(self.XShaft, self.YShaft)
			self.ClockFont = QFont()
			self.ClockFont.setPixelSize(70)
			self.ClockHourText.setFont(self.ClockFont)
			self.ClockMain.addItem(self.ClockHourText)
			self.HourTexts.append(self.ClockHourText)
		self.ClockShortTimeHandPen = pyqtgraph.mkPen(width=9, color=(162, 193, 105))
		self.ClockShortTimeHandPen.setCapStyle(Qt.RoundCap)
		self.ClockShortTimeHand = self.ClockMain.plot(pen=self.ClockShortTimeHandPen)
		self.ClockLongTimeHandPen = pyqtgraph.mkPen(width=5, color=(205, 238, 147))
		self.ClockLongTimeHandPen.setCapStyle(Qt.RoundCap)
		self.ClockLongTimeHand = self.ClockMain.plot(pen=self.ClockLongTimeHandPen)
		self.ClockSecTimehandPen = pyqtgraph.mkPen(width=2, color=(233, 88, 88))
		self.ClockSecTimehandPen.setCapStyle(Qt.RoundCap)
		self.ClockSecTimehand = self.ClockMain.plot(pen=self.ClockSecTimehandPen)
		self.ClockUpdateTime = QTimer()
		self.ClockUpdateTime.timeout.connect(self.ClockTimeSet)
		self.ClockUpdateTime.start(50)
		self.Calender = QCalendarWidget(self.tab_3)
		self.Calender.setObjectName('Calender')
		self.Calender.setStyleSheet('QCalendarWidget QTableView{background: #1a1a1a;alternate-background-color: #1a1a1a;color: #ededed;} QCalendarWidget QAbstractItemView{selection-background-color: #2d2d2d;alternate-background-color: #1a1a1a;selection-color: #ededed;} QCalendarWidget QMenu{background: #1a1a1a;color: #ededed;} QCalendarWidget QToolButton{background: #1a1a1a;color: #ededed;} QCalendarWidget QWidget{background: #1a1a1a;alternate-background-color: #1a1a1a;color: #ededed;} QCalendarWidget QWidget{background: #1a1a1a;alternate-background-color: #1a1a1a;color: #ededed;}')
		self.Calender.setGridVisible(True)
		self.Calender.setDateEditEnabled(False)
		self.Calender.clicked.connect(None)
		self.Calender.setGeometry(QRect(630, 15, 270, 175))
		self.Calender.setLocale(QLocale(QLocale.Japanese, QLocale.Japan))
		self.Calender.setSelectionMode(QCalendarWidget.NoSelection)
		self.CalenderFont = QFont()
		self.CalenderFont.setPointSize(8)
		self.Calender.setFont(self.CalenderFont)
		self.Calender.setUpdatesEnabled(True)
		self.Tab3.addTab(self.tab_3, "")
		self.tab_4 = QWidget()
		self.tab_4.setObjectName("tab_4")
		self.RootFolderFileSystemModel = QFileSystemModel()
		self.RootFolderFileSystemModel.setReadOnly(False)
		self.RootFolderFileSystemModel.setRootPath(os.path.expanduser("~"))
		self.RootFolderTree = QTreeView(self.tab_4)
		self.RootFolderTree.setDragEnabled(True)
		self.RootFolderTree.setDragDropOverwriteMode(True)
		self.RootFolderTree.setDragDropMode(QAbstractItemView.DragDrop)
		self.RootFolderTree.setDefaultDropAction(Qt.MoveAction)
		self.RootFolderTree.setObjectName("RootFolderTree")
		self.RootFolderTree.setGeometry(QRect(0, 80, 279, 541))
		self.RootFolderTree.setModel(self.RootFolderFileSystemModel)
		self.RootFolderTree.setEditTriggers(QAbstractItemView.NoEditTriggers)
		self.RootFolderTree.setStyleSheet('QTreeView{color: White;background: #131519;border 0px;}')
		try:
			self.RootFolderTree.setRootIndex(self.RootFolderFileSystemModel.index(os.path.splitdrive(os.environ['windir'])[0] + '/'))
		except:
			self.RootFolderTree.setRootIndex(self.RootFolderFileSystemModel.index('/'))
		self.RootFolderTree.setHeaderHidden(True)
		self.RootFolderTree.setColumnWidth(0, 200)
		self.RootFolderTree.setColumnHidden(1, True)
		self.RootFolderTree.setColumnHidden(2, True)
		self.RootFolderTree.setColumnHidden(3, True)
		self.RootFolderTree.setIconSize(QSize(30, 30))
		self.RootFolderTree.doubleClicked.connect(self.SelectedFolder)
		self.RootFolderTree.clicked.connect(self.SingleClickRootFolder)
		self.RootFolderTree.setContextMenuPolicy(Qt.CustomContextMenu)
		self.RootFolderTree.customContextMenuRequested.connect(self.FilerContextMenu)
		self.SubFolderTree = FileSystemListView(self.tab_4)
		self.SubFolderTree.setObjectName("SubFolderTree")
		self.SubFolderTree.setDragEnabled(True)
		self.SubFolderTree.setDragDropOverwriteMode(True)
		self.SubFolderTree.setDragDropMode(QAbstractItemView.DragDrop)
		self.SubFolderTree.setDefaultDropAction(Qt.MoveAction)
		self.SubFolderTree.doubleClicked.connect(self.AccessFolder)
		self.SubFolderTree.clicked.connect(self.SinglePreviewSubFolder)
		self.SubFolderTree.setStyleSheet('QListView{color: White;background: #131519;border 0px;}')
		self.PathBar = QLineEdit(self.tab_4)
		self.PathBar.setObjectName("PathBar")
		self.PathBar.setGeometry(QRect(143, 38, 618, 41))
		self.PathBar.editingFinished.connect(self.EndEditSearchBar)
		self.PathBar.setStyleSheet('QLineEdit{background: #2d2d2d;color: #ededed;border 0px;border 0px;}')
		self.FileTreeSearch2 = QLineEdit(self.tab_4)
		self.FileTreeSearch2.setObjectName("FileTreeSearch2")
		self.FileTreeSearch2.editingFinished.connect(self.on_TextSearch5)
		self.FileTreeSearch2.setClearButtonEnabled(True)
		self.FileTreeSearch2.setGeometry(QRect(802, 36, 335, 41))
		self.FileTreeSearch2.setStyleSheet('QLineEdit{background: #2d2d2d;color: #ededed;border 0px;border 0px;}')
		self.FileTreeSearch2.setPlaceholderText('検索')
		self.UpDirectory = QPushButton(self.tab_4)
		self.UpDirectory.setObjectName("UpDirectory")
		self.UpDirectory.setGeometry(QRect(760, 36, 42, 43))
		self.UpDirectory.setStyleSheet('QPushButton{background: #2d2d2d;color: #ededed;border 0px;}')
		font2 = QFont()
		font2.setPointSize(24)
		self.UpDirectory.setFont(font2)
		self.UpDirectory.pressed.connect(self.MoveUpDiercory)
		self.PreviewBackground = QPlainTextEdit(self.tab_4)
		self.PreviewBackground.setObjectName("PreviewBackground")
		self.PreviewBackground.setGeometry(QRect(802, 80, 358, 541))
		self.PreviewBackground.setFont(font)
		self.PreviewBackground.viewport().setProperty("cursor", QCursor(Qt.ArrowCursor))
		self.PreviewBackground.setStyleSheet('QPlainTextEdit{color: White;background: #131519;}')
		self.PreviewBackground.setReadOnly(True)
		self.Preview = QLabel(self.tab_4)
		self.Preview.setObjectName("Preview")
		self.Preview.setGeometry(QRect(804, 170, 328, 320))
		self.Preview.setTextFormat(Qt.PlainText)
		self.Preview.setAlignment(Qt.AlignCenter)
		self.Preview.setStyleSheet('QLabel{color: White;background: #131519;}')
		self.SortChangeButton = QPushButton(self.tab_4)
		self.SortChangeButton.setObjectName("SortChangeButton")
		self.SortChangeButton.setGeometry(QRect(1032, 12, 109, 21))
		self.SortChangeButton.setStyleSheet('QPushButton{background: #2d2d2d;color: #ededed;}')
		self.HomeButton = QPushButton(self.tab_4)
		self.HomeButton.setObjectName("HomeButton")
		self.HomeButton.setGeometry(QRect(99, 36, 43, 43))
		self.HomeButton.setStyleSheet('QPushButton{background: #2d2d2d;color: #ededed;}')
		self.HomeButton.setAutoDefault(False)
		self.HomeButton.pressed.connect(self.BackHome)
		self.BackButton = QPushButton(self.tab_4)
		self.BackButton.setObjectName("BackButton")
		self.BackButton.setGeometry(QRect(10, 36, 43, 43))
		font4 = QFont()
		font4.setPointSize(35)
		self.BackButton.setFont(font4)
		self.BackButton.setStyleSheet('QPushButton{background: #2d2d2d;color: #ededed;}')
		self.BackButton.pressed.connect(self.BackReturnDirectory)
		self.OnButton = QPushButton(self.tab_4)
		self.OnButton.setObjectName("OnButton")
		self.OnButton.setGeometry(QRect(58, 36, 43, 43))
		self.OnButton.setFont(font4)
		self.OnButton.setStyleSheet('QPushButton{background: #2d2d2d;color: #ededed;}')
		self.OnButton.pressed.connect(self.OnMoveDirectory)
		self.SortChangeButton.setText('昇順(A-Z)')
		SortedNumbar[0] = '0'
		self.SortChangeButton.pressed.connect(self.ItemSorting) #1
		self.AboutButton = QPushButton(FullTools2)
		self.AboutButton.setGeometry(QRect(1000, 8, 140, 20))
		self.AboutButton.setStyleSheet('QPushButton{background: #2d2d2d;color: #ededed;}')
		self.AboutButton.setText('ライセンスについて')
		self.AboutButton.clicked.connect(Credit().ShowResult)
		self.FileFolderSelector()
		self.Tab3.addTab(self.tab_4, "")
		self.retranslateUi(FullTools2)
		self.Tab3.setCurrentIndex(3)
		NowRootDirectoryPath[0] = self.SubFolderTree.rootPath()
		self.PathBar.setText(self.SubFolderTree.rootPath()+'/')
		PathHistorys.append(self.SubFolderTree.rootPath()+'/')
		OutOfThread0.start()
		self.UpdateCalendar = QTimer(FullTools2)
		self.UpdateCalendar.timeout.connect(self.UpdateCalendarCell)
		self.UpdateCalendar.start(500)
		QMetaObject.connectSlotsByName(FullTools2)

	def IconSet(self, type):
		if type == 'home':
			return QIcon(QPixmap(QSize(32, 32)).fromImage(QImage.fromData(QByteArray.fromBase64(b''))))
		if type == 'back':
			return QIcon(QPixmap(QSize(32, 32)).fromImage(QImage.fromData(QByteArray.fromBase64(b'iVBORw0KGgoAAAANSUhEUgAAAfQAAAH0EAYAAACbRgPJAAAAAXNSR0IArs4c6QAAAMJlWElmTU0AKgAAAAgABgESAAMAAAABAAEAAAEaAAUAAAABAAAAVgEbAAUAAAABAAAAXgEoAAMAAAABAAIAAAExAAIAAAARAAAAZodpAAQAAAABAAAAeAAAAAAAAABIAAAAAQAAAEgAAAABUGl4ZWxtYXRvciAyLjcuMwAAAASQBAACAAAAFAAAAK6gAQADAAAAAQABAACgAgAEAAAAAQAAAfSgAwAEAAAAAQAAAfQAAAAAMjAyMjowODoxMCAxOTozMToxMQA9b/6jAAAACXBIWXMAAAsTAAALEwEAmpwYAAADrmlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNi4wLjAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyIKICAgICAgICAgICAgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIgogICAgICAgICAgICB4bWxuczpleGlmPSJodHRwOi8vbnMuYWRvYmUuY29tL2V4aWYvMS4wLyI+CiAgICAgICAgIDx0aWZmOllSZXNvbHV0aW9uPjcyMDAwMC8xMDAwMDwvdGlmZjpZUmVzb2x1dGlvbj4KICAgICAgICAgPHRpZmY6WFJlc29sdXRpb24+NzIwMDAwLzEwMDAwPC90aWZmOlhSZXNvbHV0aW9uPgogICAgICAgICA8dGlmZjpSZXNvbHV0aW9uVW5pdD4yPC90aWZmOlJlc29sdXRpb25Vbml0PgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICAgICA8eG1wOkNyZWF0b3JUb29sPlBpeGVsbWF0b3IgMi43LjM8L3htcDpDcmVhdG9yVG9vbD4KICAgICAgICAgPHhtcDpDcmVhdGVEYXRlPjIwMjItMDgtMTBUMTk6MzE6MTErMDk6MDA8L3htcDpDcmVhdGVEYXRlPgogICAgICAgICA8eG1wOk1ldGFkYXRhRGF0ZT4yMDIyLTA4LTMxVDE2OjA0OjAyKzA5OjAwPC94bXA6TWV0YWRhdGFEYXRlPgogICAgICAgICA8ZXhpZjpQaXhlbFhEaW1lbnNpb24+NTAwPC9leGlmOlBpeGVsWERpbWVuc2lvbj4KICAgICAgICAgPGV4aWY6UGl4ZWxZRGltZW5zaW9uPjUwMDwvZXhpZjpQaXhlbFlEaW1lbnNpb24+CiAgICAgIDwvcmRmOkRlc2NyaXB0aW9uPgogICA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgrcfCqmAABAAElEQVR4AezdCXxU1aHH8XMmIewQwo7si+w7sgkoyC47BLu3r4u1vqf2dV+0i631tc/urbW7tvZVTYCAiqIoIogLoIICAgoisicQVoEkc9/5z+RmMGEJySSZ5Te/z6chc+/ce+73pjKXk5kxhhsCCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACSSlgk/KoOWgEEEAAAQQQiGmBvTeqevXqHFVNm5p1qlGjwA9U7doFk5W1KaHb2bP25+rYsYL+Ki+veaY6edKGbp4X0wfL4BBAAAEEECgW4AKdHwUEEEAAAQQQqDYBL3QLBPY2Uk2a1Dum2rUzf1Dt25sNqn1770bVpo3XTbVoYUM1bmweV7Vre48od/W9XJ05Y65Ux4/bPergweB2tXt3yj711lu1NqpNm+qNVgcOhC/cg8FqO3B2hAACCCCAQDkEuEAvBxKrIIAAAggggMDlCYQvxK09lKVatky5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'))))
		if type == 'on':
			return QIcon(QPixmap(QSize(32, 32)).fromImage(QImage.fromData(QByteArray.fromBase64(b''))))
		if type == 'up':
			return QIcon(QPixmap(QSize(32, 32)).fromImage(QImage.fromData(QByteArray.fromBase64(b''))))

	def UpdateCalendarCell(self):
		self.Calender.setSelectedDate(QDate(datetime.datetime.now().year, datetime.datetime.now().month, datetime.datetime.now().day))
		self.Calender.update()


	def ClockTimeSet(self):
		degrationSec = (datetime.datetime.now().second / 60) * 360
		degrationMin = (datetime.datetime.now().minute / 60) * 360 + (1 /60) * 360 * (datetime.datetime.now().second / 60)
		degrationHour = (datetime.datetime.now().hour / 12) * 360 + (1 / 12) * 360 * (datetime.datetime.now().minute / 60)
		XShaftOfSec = numpy.sin(numpy.radians(degrationSec)) * 1 * 0.855
		YShaftOfSec = numpy.cos(numpy.radians(degrationSec)) * 1 * 0.855
		self.ClockSecTimehand.setData([0, XShaftOfSec], [0, YShaftOfSec])
		XShaftOfMin = numpy.sin(numpy.radians(degrationMin)) * 1 * 0.82
		YShaftOfMin = numpy.cos(numpy.radians(degrationMin)) * 1 * 0.82
		self.ClockLongTimeHand.setData([0, XShaftOfMin], [0, YShaftOfMin])
		XShaftOfHour = numpy.sin(numpy.radians(degrationHour)) * 1 * 0.55
		YShaftOfHour = numpy.cos(numpy.radians(degrationHour)) * 1 * 0.55
		self.ClockShortTimeHand.setData([0, XShaftOfHour], [0, YShaftOfHour])

	def OnMoveDirectory(self):
		for path in reversed(PathHistorys):
			if not self.SubFolderTree.rootPath() == path and StopPath2[0] == '0':
				self.SubFolderTree.setRootPath(path)
				self.SubFolderTree.setRootIndex(self.SubFolderTree.index(path))
				self.PathBar.setText(path)
				StopPath2[0] = '1'
				break
		BackupRootPath.append(self.SubFolderTree.rootPath())
		NowRootDirectoryPath[0] = self.SubFolderTree.rootPath()

	def BackReturnDirectory(self):
		try:
			BackPath = self.SubFolderTree.rootPath().split([p for p in self.SubFolderTree.rootPath().split('/')][-1])[0]
		except:
			BackPath = ''
		if BackPath == '':
			try:
				BackPath = os.path.splitdrive(os.environ['windir'.lower()])[0]
			except:
				try:
					BackPath = os.path.splitdrive(os.environ['windir'.upper()])[0]
				except:
					BackPath = '/'
		if PathHistorys[0] == BackPath:
			StopPath[0] = '1'
			self.SubFolderTree.setRootPath(BackPath)
			self.SubFolderTree.setRootIndex(self.SubFolderTree.index(BackPath))
			self.PathBar.setText(BackPath)
			PathHistorys.append(self.SubFolderTree.rootPath())
			StopPath2[0] = '0'
		elif not PathHistorys[0] == BackPath and StopPath[0] == '0':
			if PathHistorys[0] == self.SubFolderTree.rootPath()+'/' and StopPath[0] == '0':
				pass
			else:
				self.SubFolderTree.setRootPath(BackPath)
				self.SubFolderTree.setRootIndex(self.SubFolderTree.index(BackPath))
				self.PathBar.setText(BackPath)
				PathHistorys.append(self.SubFolderTree.rootPath())
				StopPath2[0] = '0'
		elif StopPath[0] == '1' and PathHistorys[0] == self.SubFolderTree.rootPath()+'/':
			BackPath = os.path.expanduser('~')+'/'
			self.SubFolderTree.setRootPath(BackPath)
			self.SubFolderTree.setRootIndex(self.SubFolderTree.index(BackPath))
			self.PathBar.setText(BackPath)
			PathHistorys.append(self.SubFolderTree.rootPath())
			StopPath2[0] = '0'
		elif StopPath[0] == '0' and not str(pathlib.Path(os.path.expanduser('~')).parent) == self.SubFolderTree:
			BackPath = PathHistorys[-2]
			self.SubFolderTree.setRootPath(BackPath)
			self.SubFolderTree.setRootIndex(self.SubFolderTree.index(BackPath))
			self.PathBar.setText(BackPath)
			PathHistorys.append(self.SubFolderTree.rootPath())
			StopPath2[0] = '0'
		elif StopPath[0] == '2':
			BackPath = PathHistorys[-2]
			self.SubFolderTree.setRootPath(BackPath)
			self.SubFolderTree.setRootIndex(self.SubFolderTree.index(BackPath))
			self.PathBar.setText(BackPath)
			PathHistorys.append(self.SubFolderTree.rootPath())
			StopPath[0] = '0'
			StopPath2[0] = '0'
		BackupRootPath.append(self.SubFolderTree.rootPath())
		NowRootDirectoryPath[0] = self.SubFolderTree.rootPath()

	def BackHome(self):
		self.SubFolderTree.setRootPath(os.path.expanduser('~'))
		self.SubFolderTree.setRootIndex(self.SubFolderTree.index(os.path.expanduser('~')))
		self.PathBar.setText(self.SubFolderTree.rootPath()+'/')
		NowRootDirectoryPath[0] = self.SubFolderTree.rootPath()
		PathHistorys.append(self.SubFolderTree.rootPath()+'/')
		StopPath[0] = '0'
		StopPath2[0] = '0'
		BackupRootPath.append(self.SubFolderTree.rootPath())
		NowRootDirectoryPath[0] = self.SubFolderTree.rootPath()

	def MoveUpDiercory(self):
		try:
			DriveLatter = os.path.splitdrive(os.environ['windir'.lower()])[0]
		except:
			try:
				DriveLatter = os.path.splitdrive(os.environ['windir'.upper()])[0]
			except:
				DriveLatter = '/'

		self.SubFolderTree.setRootPath(os.path.dirname(self.SubFolderTree.rootPath()))
		self.SubFolderTree.setRootIndex(self.SubFolderTree.index(self.SubFolderTree.rootPath()))
		if not self.SubFolderTree.rootPath() == DriveLatter:
			self.PathBar.setText(self.SubFolderTree.rootPath()+'/')
		else:
			self.PathBar.setText(self.SubFolderTree.rootPath())
		PathHistorys.append(self.SubFolderTree.rootPath()+'/')
		StopPath[0] = '0'
		StopPath2[0] = '0'
		BackupRootPath.append(self.SubFolderTree.rootPath())
		NowRootDirectoryPath[0] = self.SubFolderTree.rootPath()

	def AccessFolder(self):
		if not os.path.isfile(self.SubFolderTree.filePath(self.SubFolderTree.selectedIndexes()[0])):
			self.SubFolderTree.setRootPath(self.SubFolderTree.filePath(self.SubFolderTree.selectedIndexes()[0]))
			self.SubFolderTree.setRootIndex(self.SubFolderTree.index(self.SubFolderTree.filePath(self.SubFolderTree.selectedIndexes()[0])))
			self.PathBar.setText(self.SubFolderTree.rootPath()+'/')
			StopPath[0] = '0'
			StopPath2[0] = '0'
			PathHistorys.append(self.SubFolderTree.rootPath()+'/')
			NowRootDirectoryPath[0] = self.SubFolderTree.rootPath()
			BackupRootPath.append(self.SubFolderTree.rootPath())
		else:
			QDesktopServices.openUrl('file:///{}'.format(self.SubFolderTree.filePath(self.SubFolderTree.selectedIndexes()[0])))
		NowRootDirectoryPath[0] = self.SubFolderTree.rootPath()

	def EndEditSearchBar(self):
		if self.PathBar.text() == '../':
			self.SubFolderTree.setRootPath(os.path.dirname(self.SubFolderTree.rootPath()+'/'))
			self.SubFolderTree.setRootIndex(self.SubFolderTree.index(self.SubFolderTree.rootPath()+'/'))
			self.PathBar.setText(self.SubFolderTree.rootPath()+'/')
			PathHistorys.append(self.SubFolderTree.rootPath()+'/')
			StopPath[0] = '0'
			StopPath2[0] = '0'
			BackupRootPath.append(self.SubFolderTree.rootPath())
		elif self.PathBar.text() == '.':
			self.SubFolderTree.setRootPath(self.SubFolderTree.rootPath()+'/')
			self.SubFolderTree.setRootIndex(self.SubFolderTree.index(self.SubFolderTree.rootPath()+'/'))
			self.PathBar.setText(self.SubFolderTree.rootPath()+'/')
			StopPath[0] = '0'
			StopPath2[0] = '0'
			PathHistorys.append(self.SubFolderTree.rootPath()+'/')
			BackupRootPath.append(self.SubFolderTree.rootPath())
		else:
			self.SubFolderTree.setRootPath(self.PathBar.text())
			self.SubFolderTree.setRootIndex(self.SubFolderTree.index(self.SubFolderTree.rootPath()+'/'))
			self.PathBar.setText(self.SubFolderTree.rootPath()+'/')
			StopPath[0] = '0'
			StopPath2[0] = '0'
			PathHistorys.append(self.SubFolderTree.rootPath()+'/')
			BackupRootPath.append(self.SubFolderTree.rootPath())
		NowRootDirectoryPath[0] = self.SubFolderTree.rootPath()

	def SingleClickRootFolder(self):
		try:
			RootIndex = self.RootFolderTree.selectedIndexes()[0]
		except:
			RootIndex = self.RootFolderTree.selectedIndexes()
		if self.RootFolderTree.isExpanded(RootIndex):
			self.RootFolderTree.collapse(RootIndex)
		else:
			self.RootFolderTree.expand(RootIndex)

	def SinglePreviewSubFolder(self):
		SelectedItem[0] = self.SubFolderTree.selectedIndexes()
		PixelMap = QPixmap(self.SubFolderTree.filePath(self.SubFolderTree.selectedIndexes()[0]))
		if PixelMap.isNull():
			self.Preview.setText('プレビューできませんでした')
		else:
			self.Preview.setPixmap(PixelMap.scaled(self.Preview.width(), self.Preview.height(), Qt.KeepAspectRatio, Qt.SmoothTransformation))

	def FilerContextMenu(self, Point):
		self.Menu1 = QMenu()
		self.Menu1.setStyleSheet('QMenu{background: #2d2d2d;color: #ededed;} QMenu::item:selected{background: #af0c00;color: #ededed;}')
		try:
			if os.path.isfile(self.RootFolderFileSystemModel.filePath(self.RootFolderTree.selectedIndexes()[0])):
				self.Menu1.addAction('開く', self.OpenFile)
				self.Menu1.addAction('コピー', self.CopyFile)
				self.Menu1.addAction('削除', self.Deleting)
			else:
				self.Menu1.addAction('コピー', self.CopyFile)
				self.Menu1.addAction('フォルダの新規作成', self.CreateFolder)
				self.Menu1.addAction('フォルダを開く', self.OpenFile)
				self.Menu1.addAction('ここにコピー', self.CopyiedFiles)
			self.Menu1.exec(self.RootFolderTree.mapToGlobal(Point))
		except:
			pass

	def OpenFile(self):
		QDesktopServices.openUrl('file:///{}'.format(self.RootFolderFileSystemModel.filePath(self.RootFolderTree.selectedIndexes()[0])))

	def CopyFile(self):
		CopiedItems[0] = [self.RootFolderFileSystemModel.filePath(countItem) for countItem in self.RootFolderTree.selectedIndexes()]
		CopiedItemCount[0] = len(self.RootFolderTree.selectedIndexes())

	def CreateFolder(self):
		Result = NewCreateFolderDialog.OutputResult()
		if Result[1] == '0':
			if not Result[0] == '':
				if not Result[0] == ' ':
					try:
						os.mkdir('{}{}{}'.format(self.RootFolderFileSystemModel.filePath(self.RootFolderTree.selectedIndexes()[0]), '/', Result[0]))
					except:
						for c in range(9999):
							try:
								os.mkdir('{}{}{} ({})'.format(self.RootFolderFileSystemModel.filePath(self.RootFolderTree.selectedIndexes()[0]), '/', Result[0], c))
								break
							except:
								pass

	def CopyiedFiles(self):
		try:
			if not self.RootFolderFileSystemModel.filePath(self.RootFolderTree.selectedIndexes()[0]) == '':
				self.RootPath = self.RootFolderFileSystemModel.filePath(self.RootFolderTree.selectedIndexes()[0])
			else:
				self.RootPath = os.path.expanduser('~')
		except:
			self.RootPath = os.path.expanduser('~')
		if CopiedItemCount[0] == len(CopiedItems[0]):
			for CopiedItem in CopiedItems[0]:
				newPath = '{}{}{}'.format(self.RootPath, '/', CopiedItem.split('/')[-1])
				if not QFile.exists(newPath):
					QFile.copy(CopiedItem, newPath)
				else:
					for cc in range(9999):
						if not QFile.exists('{} ({}).{}'.format(newPath.split('.')[0], cc+1, newPath.split('.')[-1])):
							QFile.copy(CopiedItem, '{} ({}).{}'.format(newPath.split('.')[0], cc+1, newPath.split('.')[-1]))
							break
						else:
							pass

	def Deleting(self):
		if os.path.isfile(self.RootFolderFileSystemModel.filePath(self.RootFolderTree.selectedIndexes()[0])):
			send2trash.send2trash(self.RootFolderFileSystemModel.filePath(self.RootFolderTree.selectedIndexes()[0]))
		else:
			send2trash.send2trash(self.RootFolderFileSystemModel.filePath(self.RootFolderTree.selectedIndexes()[0]))

	def ItemSorting(self):
		if SortedNumbar[0] == '1':
			self.SortChangeButton.setText('昇順(A-Z)')
			self.SubFolderTree.sort(0, Qt.SortOrder.AscendingOrder)
			SortedNumbar[0] = '0'
		elif SortedNumbar[0] == '0':
			self.SortChangeButton.setText('降順(Z-A)')
			self.SubFolderTree.sort(0, Qt.SortOrder.DescendingOrder)
			SortedNumbar[0] = '1'

	def SortingItemMenu(self):
		if SortedNumbar[0] == '1':
			self.SortChangeButton.setText('昇順(A-Z)')
			self.SubFolderTree.sort(0, Qt.SortOrder.AscendingOrder)
			SortedNumbar[0] = '0'
		elif SortedNumbar[0] == '0':
			self.SortChangeButton.setText('降順(Z-A)')
			self.SubFolderTree.sort(0, Qt.SortOrder.DescendingOrder)
			SortedNumbar[0] = '1'

	def on_TextSearch(self, text):
		try:
			if not self.FolderTree.isExpanded(self.FolderTree.selectedIndexes()[0]):
				self.FolderTree.expandRecursively(self.FolderTree.selectedIndexes()[0], 3)
		except:
			pass
		self.FolderTree.keyboardSearch('')
		self.FolderTree.keyboardSearch(text)

	def on_TextSearch2(self, text):
		try:
			if not self.InputView2.isExpanded(self.InputView2.selectedIndexes()[0]):
				self.InputView2.expandRecursively(self.InputView2.selectedIndexes()[0], 3)
		except:
			pass
		self.InputView2.keyboardSearch('')
		self.InputView2.keyboardSearch(text)

	def on_TextSearch4(self, text):
		try:
			if not self.RootFolderTree.isExpanded(self.RootFolderTree.selectedIndexes()[0]):
				self.RootFolderTree.expandRecursively(self.RootFolderTree.selectedIndexes()[0], 3)
		except:
			pass
		self.RootFolderTree.keyboardSearch('')
		self.RootFolderTree.keyboardSearch(text)

	def from_item_to_json(self, parent, data):
		for c in range(len(data)):
			path = json.loads(data[c]).get('PATH')
			if os.path.isfile(path):
				AcceptFileType = ('.svg', '.jpg', '.jpeg', '.png', '.bmp', '.gif', '.rgb', '.tiff', '.xbm', '.pbm', '.pgm', '.ppm')
				try:
					if path.lower().endswith(AcceptFileType):
						icon = QIcon(LoadThread.submit(self.LoadImage, path).result())
					if path.lower().endswith('.flac'):
						icon = QIcon(self.LoadFLAC(path))
					if path.lower().endswith('.m4a'):
						icon = QIcon(self.LoadM4A(path))
					if path.lower().endswith('.mp3'):
						icon = QIcon(self.LoadMP3(path))
					if not path.lower().endswith(('.flac', '.m4a', '.mp3')) and not path.lower().endswith(AcceptFileType):
						icon = QFileIconProvider().icon(QFileIconProvider.File)
				except:
					icon = QFileIconProvider().icon(QFileIconProvider.File)
			else:
				icon = QFileIconProvider().icon(QFileIconProvider.Folder)
			c2 = QStandardItem(icon, path)
			parent.appendRow(c2)

	def LoadImage(self, path):
		try:
			img = QPixmap(QSize(32, 32))
			img.load(path)
			return img
		except:
			pass

	def LoadFLAC(self, path):
		return QPixmap(QSize(64, 64)).fromImage(QImage.fromData(mutagen.flac.FLAC(path).pictures[0].data))

	def LoadMP3(self, path):
		return QPixmap(QSize(64, 64)).fromImage(QImage.fromData(mutagen.mp3.MP3(path)['APIC:'].data))

	def LoadM4A(self, path):
		return QPixmap(QSize(64, 64)).fromImage(QImage.fromData(mutagen.mp4.MP4(path)['covr'][0]))

	def on_TextSearch5(self):
		if not self.FileTreeSearch2.text() == '':
			DicFiles = []
			for File in pathlib.Path(self.SubFolderTree.rootPath()+'/').glob('**/{}'.format(self.FileTreeSearch2.text())):
				DicFiles.append(json.dumps({'PATH': '{}'.format(str(File))}, indent=2, ensure_ascii=False))
			self.ItemModel = QStandardItemModel()
			self.from_item_to_json(self.ItemModel.invisibleRootItem(), sorted(DicFiles))
			SearchWindow(model=self.ItemModel).show()

	def SelectedItem(self, index):
		try:
			rootIndex = self.FolderTree.selectedIndexes()[0]
			self.FolderTree.expand(rootIndex)
		except:
			pass
		if os.path.isfile(self.FileSystemModel.filePath(self.FileSystemModel.index(index.row(), 0, index.parent()))):
			pass
		else:
			self.FileFinput_2.setText(self.FileSystemModel.filePath(self.FileSystemModel.index(index.row(), 0, index.parent())))

	def SelectedItem2(self, index):
		try:
			rootIndex2 = self.InputView2.selectedIndexes()[0]
			self.InputView2.expand(rootIndex2)
		except:
			pass
		if os.path.isfile(self.FileSystemModel2.filePath(self.FileSystemModel2.index(index.row(), 0, index.parent()))):
			pass
		else:
			self.FolderPath.setText(self.FileSystemModel2.filePath(self.FileSystemModel2.index(index.row(), 0, index.parent())))

	def SelectedFolder(self):
		try:
			RootIndex = self.RootFolderTree.selectedIndexes()[0]
		except:
			RootIndex = self.RootFolderTree.selectedIndexes()
		if not os.path.isfile(self.RootFolderFileSystemModel.filePath(RootIndex)):
			if self.RootFolderTree.isExpanded(RootIndex):
				self.RootFolderTree.collapse(RootIndex)
			else:
				self.RootFolderTree.expand(RootIndex)
			PathListory[0] = self.RootFolderFileSystemModel.filePath(RootIndex)
			self.SubFolderTree.setRootPath(self.RootFolderFileSystemModel.filePath(RootIndex))
			self.SubFolderTree.setRootIndex(self.SubFolderTree.index(self.RootFolderFileSystemModel.filePath(RootIndex)))
			self.PathBar.setText(self.SubFolderTree.rootPath()+'/')
			NowRootDirectoryPath[0] = self.SubFolderTree.rootPath()
			StopPath[0] = '2'
			StopPath2[0] = '0'
			PathHistorys.append(self.SubFolderTree.rootPath()+'/')
			BackupRootPath.append(self.SubFolderTree.rootPath())
		else:
			QDesktopServices.openUrl('file:///{}'.format(self.RootFolderFileSystemModel.filePath(RootIndex)))

	def FileFolderSelector(self):
		if self.FileFinput.text() == '**':
			self.FileFinput.setText('*.*')
		self.FileOption.stateChanged.connect(self.FileFolderSelectorCallBak)
		self.FileTypeOption.stateChanged.connect(self.FileFolderSelectorCallBak)
		if self.FileFinput.text() == '**':
			self.FileFinput.setText('*.*')

	def FileFolderSelectorCallBak(self):
		if self.FileTypeOption.checkState() == Qt.Checked:
			if not '*' in self.FileFinput.text():
				try:
					FileName = self.FileFinput.text().split('.')[0]
				except:
					FileName = ''
				try:
					FileType = self.FileFinput.text().split('.')[1]
				except:
					FileType = ''
				if FileName == '':
					FileName = ''
				if FileType == '':
					FileType = '.*'
				if FileName == '' and FileType == '':
					FileName = ''
					FileType = '.*'
				if not '**' in self.FileFinput.text():
					self.FileFinput.setText('{}{}'.format(FileName, FileType).replace('..', '.'))
				else:
					self.FileFinput.setText('*.*')
			elif self.FileOption.checkState() == Qt.Checked and self.FileTypeOption.checkState() == Qt.Checked:
				self.FileFinput.setText('*.*')
			elif self.FileFinput.text() == '*.*':
				self.FileFinput.setText('*.')
			elif self.FileFinput.text() == '*.':
				self.FileFinput.setText('.*')
			elif '*' in self.FileFinput.text() and self.FileOption.checkState() == Qt.Checked:
				if '.' in self.FileFinput.text() and not '*' in self.FileFinput.text():
					try:
						Fname = self.FileFinput.text().split('.')[0]
					except:
						Fname = ''
					try:
						Ftype = self.FileFinput.text().split('.')[1]
					except:
						Ftype = ''
					self.FileFinput.setText('{}{}'.format(Fname, Ftype))
				elif self.FileFinput.text() == '*.':
					self.FileFinput.setText('.*')
				else:
					self.FileFinput.setText('*.*')
		elif self.FileOption.checkState() == Qt.Unchecked and self.FileTypeOption.checkState() == Qt.Unchecked:
			self.FileFinput.setText(self.FileFinput.text().replace('.*', '').replace('*.', '').replace('*', ''))
		if self.FileOption.checkState() == Qt.Checked:
			self.dPrint('[INFO] ファイル名を設定しました。ファイル名: {}'.format(self.FileFinput.text().split('.')[0]))
		if self.FileOption.checkState() == Qt.Checked:
			if not '*' in self.FileFinput.text():
				try:
					FileName = self.FileFinput.text().split('.')[0]
				except:
					FileName = ''
				try:
					FileType = self.FileFinput.text().split('.')[1]
				except:
					FileType = ''
				if FileName == '':
					FileName = '*.'
				if FileType == '':
					FileType = ''
				if FileName == '' and FileType == '':
					FileName = '*.'
					FileType = ''
				if not '**' in self.FileFinput.text():
					self.FileFinput.setText('{}{}'.format(FileName, FileType).replace('..', '.'))
				else:
					self.FileFinput.setText('*.*')
			elif self.FileOption.checkState() == Qt.Checked and self.FileTypeOption.checkState() == Qt.Checked:
				self.FileFinput.setText('*.*')
			elif self.FileFinput.text() == '*.*':
				self.FileFinput.setText('.*')
			elif self.FileFinput.text() == '.*':
				self.FileFinput.setText('*.')
			elif '*' in self.FileFinput.text() and self.FileTypeOption.checkState() == Qt.Checked:
				if '.' in self.FileFinput.text() and not '*' in self.FileFinput.text():
					try:
						Fname = self.FileFinput.text().split('.')[0]
					except:
						Fname = ''
					try:
						Ftype = self.FileFinput.text().split('.')[1]
					except:
						Ftype = ''
					self.FileFinput.setText('{}{}'.format(Fname, Ftype))
				else:
					self.FileFinput.setText('*.*')
		elif self.FileOption.checkState() == Qt.Unchecked and self.FileTypeOption.checkState() == Qt.Unchecked:
			self.FileFinput.setText(self.FileFinput.text().replace('.*', '').replace('*.', '').replace('*', ''))
		if self.FileTypeOption.checkState() == Qt.Checked:
			self.dPrint('[INFO] ファイルタイプを設定しました。ファイルタイプ: {}'.format(self.FileFinput.text().split('.')[1]))

	def dPrint(self, Log):
		self.DebugArea.appendPlainText(Log)

	def dPrint2(self, Logs):
		self.DebugLog2.appendPlainText(Logs)

	def Fill_Model_from_Json(self, Partent, data, path=''):
		if isinstance(data, dict):
			for itm, childs in data.items():
				if itm == '／':
					Icon = QFileIconProvider().icon(QFileIconProvider.Drive)
				elif os.path.isdir(path) or not os.path.isfile(path):
					Icon = QFileIconProvider().icon(QFileIconProvider.Folder)
				else:
					Icon = QFileIconProvider().icon(QFileIconProvider.File)
				child = QStandardItem(Icon, str(itm))
				Partent.appendRow(child)
				self.Fill_Model_from_Json(child, childs)

		elif isinstance(data, list):
			for P in data:
				self.Fill_Model_from_Json(Partent, P)
		else:
			Partent.appendRow(QStandardItem(str(data)))

	def FindAllFiles(self, path):
		for root, dirC, file in os.walk(path):
			yield root
			for File in file:
				yield os.path.join(root, File)

	def BigFileSearching(self):
		DicsFiles = []
		FoundFiles = []
		size_min_mb = 50 << 20
		for File in self.FindAllFiles(self.FolderPath.text()):
			try:
				if os.path.isfile(File):
					if os.path.getsize(File) >= size_min_mb:
						if os.path.getsize(File) >> 20:
							FoundFiles.append(File)
						self.dPrint2('[INFO] ファイルが見つかりました! 使用容量: {:.1f}MB 場所: {}'.format(os.path.getsize(File) >> 20, File))
			except:
				pass
		try:
			DriveLetter = os.path.splitdrive(os.environ['windir'])[0] + '/'
		except:
			DriveLetter = '／'
		for Dics in FoundFiles:
			DicsLists = Dics.split('/')
			PathDics = ''.join(pathlist.replace(pathlist, '{"'+pathlist+'": ') for pathlist in DicsLists)
			SearcedPathDic = re.sub('($)', '}'*(len(DicsLists)), PathDics).replace('{"": ', '{"%s": ' % DriveLetter).replace(': }', ': {}}')
			EndValue = re.findall('(".+": )', json.dumps(ast.literal_eval(SearcedPathDic), indent=2, ensure_ascii=False))[-1].split(':')[0]
			PathJson = json.dumps(ast.literal_eval(SearcedPathDic), ensure_ascii=False).replace('{' + EndValue + ': {}', EndValue).replace('}','') + '}' * (len(DicsLists) - 1)
			DicsFiles.append([PathJson, Dics])
		for DicsF, Path in DicsFiles:
			try:
				self.Fill_Model_from_Json(self.ResultView2Model.invisibleRootItem(), ast.literal_eval(DicsF), Path)
			except:
				continue
		self.ResultView2.setModel(self.ResultView2Model)
		self.ResultView2.expandAll()

	def SearchingFile(self):
		FileAppends = []
		DicFiles = []

		for File in pathlib.Path(self.FileFinput_2.text()).glob('**/{}'.format(self.FileFinput.text())):
			self.dPrint('[INFO] ファイルが見つかりました! 場所: {}'.format(File))
			FileAppends.append(str(File))

		try:
			DriveLetter = os.path.splitdrive(os.environ['windir'])[0] + '/'
		except:
			DriveLetter = '／'
		for dics in FileAppends:
			DicsList = dics.split('/')
			PDic = ''.join(pathlist.replace(pathlist, '{"'+pathlist+'": ') for pathlist in DicsList)
			PathDic = re.sub('($)', '}'*(len(DicsList)), PDic).replace('{"": ', '{"%s": ' % DriveLetter).replace(': }', ': {}}')
			EndValue = re.findall('(".+": )', json.dumps(ast.literal_eval(PathDic), indent=2, ensure_ascii=False))[-1].split(':')[0]
			PathJson = json.dumps(ast.literal_eval(PathDic), ensure_ascii=False).replace('{' + EndValue + ': {}', EndValue).replace('}', '') + '}' * (len(DicsList) -1)
			DicFiles.append([PathJson, dics])
		for DicsFF, Path in DicFiles:
				self.Fill_Model_from_Json(self.resultMOdel.invisibleRootItem(), ast.literal_eval(DicsFF), path=Path)
		self.ResultTree.setModel(self.resultMOdel)
		self.ResultTree.expandAll()


	def ClearDebug(self):
		self.DebugArea.clear()
		self.resultMOdel.removeRows(0, self.resultMOdel.rowCount())

	def ClearDebug2(self):
		self.DebugLog2.clear()
		self.ResultView2Model.removeRows(0, self.ResultView2Model.rowCount())

	def retranslateUi(self, Extend):
		Extend.setWindowTitle(QCoreApplication.translate("Searcher", "ExtendExplorerTools", None))
		self.FileOption.setText(QCoreApplication.translate("Searcher", "ファイル名を無指定", None))
		self.FileTypeOption.setText(QCoreApplication.translate("Searcher", "ファイル拡張子を無指定", None))
		self.FileName.setText(QCoreApplication.translate("Searcher", "ファイル名:", None))
		self.FolderName.setText(QCoreApplication.translate("Searcher", "フォルダ名:", None))
		self.label_2.setText(QCoreApplication.translate("Searcher", "以下からもフォルダを選択できます", None))
		self.SearchButton.setText(QCoreApplication.translate("Searcher", "ファイル検索を開始", None))
		self.ResultDelButton.setText(QCoreApplication.translate("Searcher", "結果を消す", None))
		self.Tab3.setTabText(self.Tab3.indexOf(self.tab), QCoreApplication.translate("Searcher", "ファイルの詳細検索", None))
		self.FolderPathLabel.setText(QCoreApplication.translate("Searcher", "検索したい場所:", None))
		self.BigFileSearchButton.setText(QCoreApplication.translate("Searcher", "ファイル検索を開始", None))
		self.ResultDelButton2.setText(QCoreApplication.translate("Searcher", "結果を消す", None))
		self.Tab3.setTabText(self.Tab3.indexOf(self.tab_2), QCoreApplication.translate("Searcher", "大きいファイルの詳細検索", None))
		self.Tab3.setTabText(self.Tab3.indexOf(self.tab_3), QCoreApplication.translate("Searcher", "システムの情報", None))
		self.FolderSearchLabel2.setText(QCoreApplication.translate("FullTools2", "以下からもフォルダを選択できます", None))
		self.Tab3.setTabText(self.Tab3.indexOf(self.tab_4), QCoreApplication.translate("FullTools2", "エクスプローラー", None))
		self.UpDirectory.setIcon(self.IconSet('up'))
		self.UpDirectory.setToolTip(QCoreApplication.translate("FullTools2", "<html><head/><body><p>上の階層に戻る</p></body></html>", None))
		self.HomeButton.setIcon(self.IconSet('home'))
		self.BackButton.setIcon(self.IconSet('back'))
		self.OnButton.setIcon(self.IconSet('on'))

def main():
	app = QApplication(sys.argv)
	main_window = MainWindowwView()
	ui_window = Ui_FullTools2()
	ui_window.setupUi(main_window)
	main_window.setFixedSize(main_window.size())
	main_window.show()
	sys.exit(app.exec())

if __name__ == '__main__':
	main()
